let createWasmMonoInstance;var Module=(()=>{var c=location.href;return function(t={}){var e,n,r=t;r.ready=new Promise(((c,t)=>{e=c,n=t}));var o,u,M,ll=Object.assign({},r),Zl="./this.program",quit_=(c,t)=>{throw t},cl="object"==typeof window,dl="function"==typeof importScripts,tl=("object"==typeof process&&"object"==typeof process.versions&&process.versions.node,"");(cl||dl)&&(dl?tl=self.location.href:"undefined"!=typeof document&&document.currentScript&&(tl=document.currentScript.src),c&&(tl=c),tl=0!==tl.indexOf("blob:")?tl.substr(0,tl.replace(/[?#].*/,"").lastIndexOf("/")+1):"",o=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.send(null),t.responseText},dl&&(M=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),u=(c,t,e)=>{var n=new XMLHttpRequest;n.open("GET",c,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):e()},n.onerror=e,n.send(null)});var el,ml,bl=r.print||console.log.bind(console),nl=r.printErr||console.error.bind(console);Object.assign(r,ll),ll=null,r.arguments&&r.arguments,r.thisProgram&&(Zl=r.thisProgram),r.quit&&(quit_=r.quit),r.wasmBinary&&(el=r.wasmBinary),"object"!=typeof WebAssembly&&abort("no native wasm support detected");var al,Xl,Gl,il,Wl,rl,ol,hl,Vl=!1;var yl=[],sl=[],ul=[],Rl=[];var pl=0,Yl=null,Fl=null;function addRunDependency(c){pl++,r.monitorRunDependencies&&r.monitorRunDependencies(pl)}function removeRunDependency(c){if(pl--,r.monitorRunDependencies&&r.monitorRunDependencies(pl),0==pl&&(null!==Yl&&(clearInterval(Yl),Yl=null),Fl)){var t=Fl;Fl=null,t()}}function abort(c){r.onAbort&&r.onAbort(c),nl(c="Aborted("+c+")"),Vl=!0,1,c+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(c);throw n(t),t}var Jl,Il,Nl,Hl,isDataURI=c=>c.startsWith("data:application/octet-stream;base64,");function getBinarySync(c){if(c==Jl&&el)return new Uint8Array(el);if(M)return M(c);throw"both async and sync fetching of the wasm failed"}function instantiateArrayBuffer(c,t,e){return function(c){return el||!cl&&!dl||"function"!=typeof fetch?Promise.resolve().then((()=>getBinarySync(c))):fetch(c,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at '"+c+"'";return t.arrayBuffer()})).catch((()=>getBinarySync(c)))}(c).then((c=>WebAssembly.instantiate(c,t))).then((c=>c)).then(e,(c=>{nl(`failed to asynchronously prepare wasm: ${c}`),abort(c)}))}function ExitStatus(c){this.name="ExitStatus",this.message=`Program terminated with exit(${c})`,this.status=c}r.locateFile?isDataURI(Jl="main-bin-mono.wasm")||(Il=Jl,Jl=r.locateFile?r.locateFile(Il,tl):tl+Il):Jl=new URL("main-bin-mono.wasm",location.href).href;var callRuntimeCallbacks=c=>{for(;c.length>0;)c.shift()(r)},vl=r.noExitRuntime||!1,kl="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(c,t,e)=>{for(var n=t+e,r=t;c[r]&&!(r>=n);)++r;if(r-t>16&&c.buffer&&kl)return kl.decode(c.subarray(t,r));for(var o="";t<r;){var u=c[t++];if(128&u){var M=63&c[t++];if(192!=(224&u)){var ll=63&c[t++];if((u=224==(240&u)?(15&u)<<12|M<<6|ll:(7&u)<<18|M<<12|ll<<6|63&c[t++])<65536)o+=String.fromCharCode(u);else{var Zl=u-65536;o+=String.fromCharCode(55296|Zl>>10,56320|1023&Zl)}}else o+=String.fromCharCode((31&u)<<6|M)}else o+=String.fromCharCode(u)}return o},UTF8ToString=(c,t)=>c?UTF8ArrayToString(Xl,c,t):"",Ul=[],Tl=0;function ExceptionInfo(c){this.excPtr=c,this.ptr=c-24,this.set_type=function(c){rl[this.ptr+4>>2]=c},this.get_type=function(){return rl[this.ptr+4>>2]},this.set_destructor=function(c){rl[this.ptr+8>>2]=c},this.get_destructor=function(){return rl[this.ptr+8>>2]},this.set_caught=function(c){c=c?1:0,al[this.ptr+12>>0]=c},this.get_caught=function(){return 0!=al[this.ptr+12>>0]},this.set_rethrown=function(c){c=c?1:0,al[this.ptr+13>>0]=c},this.get_rethrown=function(){return 0!=al[this.ptr+13>>0]},this.init=function(c,t){this.set_adjusted_ptr(0),this.set_type(c),this.set_destructor(t)},this.set_adjusted_ptr=function(c){rl[this.ptr+16>>2]=c},this.get_adjusted_ptr=function(){return rl[this.ptr+16>>2]},this.get_exception_ptr=function(){if(___cxa_is_pointer_type(this.get_type()))return rl[this.excPtr>>2];var c=this.get_adjusted_ptr();return 0!==c?c:this.excPtr}}var findMatchingCatch=c=>{var t=Tl;if(!t)return setTempRet0(0),0;var e=new ExceptionInfo(t);e.set_adjusted_ptr(t);var n=e.get_type();if(!n)return setTempRet0(0),t;for(var r in c){var o=c[r];if(0===o||o===n)break;var u=e.ptr+16;if(___cxa_can_catch(o,n,u))return setTempRet0(o),t}return setTempRet0(n),t},gl={isAbs:c=>"/"===c.charAt(0),splitPath:c=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(c).slice(1),normalizeArray:(c,t)=>{for(var e=0,n=c.length-1;n>=0;n--){var r=c[n];"."===r?c.splice(n,1):".."===r?(c.splice(n,1),e++):e&&(c.splice(n,1),e--)}if(t)for(;e;e--)c.unshift("..");return c},normalize:c=>{var t=gl.isAbs(c),e="/"===c.substr(-1);return c=gl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),c||t||(c="."),c&&e&&(c+="/"),(t?"/":"")+c},dirname:c=>{var t=gl.splitPath(c),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},basename:c=>{if("/"===c)return"/";var t=(c=(c=gl.normalize(c)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?c:c.substr(t+1)},join:function(){var c=Array.prototype.slice.call(arguments);return gl.normalize(c.join("/"))},join2:(c,t)=>gl.normalize(c+"/"+t)},randomFill=c=>(randomFill=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return c=>crypto.getRandomValues(c);abort("initRandomDevice")})())(c),Kl={resolve:function(){for(var c="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:Bl.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";c=n+"/"+c,t=gl.isAbs(n)}return c=gl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),(t?"/":"")+c||"."},relative:(c,t)=>{function trim(c){for(var t=0;t<c.length&&""===c[t];t++);for(var e=c.length-1;e>=0&&""===c[e];e--);return t>e?[]:c.slice(t,e-t+1)}c=Kl.resolve(c).substr(1),t=Kl.resolve(t).substr(1);for(var e=trim(c.split("/")),n=trim(t.split("/")),r=Math.min(e.length,n.length),o=r,u=0;u<r;u++)if(e[u]!==n[u]){o=u;break}var M=[];for(u=o;u<e.length;u++)M.push("..");return(M=M.concat(n.slice(o))).join("/")}},fl=[],lengthBytesUTF8=c=>{for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n<=127?t++:n<=2047?t+=2:n>=55296&&n<=57343?(t+=4,++e):t+=3}return t},stringToUTF8Array=(c,t,e,n)=>{if(!(n>0))return 0;for(var r=e,o=e+n-1,u=0;u<c.length;++u){var M=c.charCodeAt(u);if(M>=55296&&M<=57343)M=65536+((1023&M)<<10)|1023&c.charCodeAt(++u);if(M<=127){if(e>=o)break;t[e++]=M}else if(M<=2047){if(e+1>=o)break;t[e++]=192|M>>6,t[e++]=128|63&M}else if(M<=65535){if(e+2>=o)break;t[e++]=224|M>>12,t[e++]=128|M>>6&63,t[e++]=128|63&M}else{if(e+3>=o)break;t[e++]=240|M>>18,t[e++]=128|M>>12&63,t[e++]=128|M>>6&63,t[e++]=128|63&M}}return t[e]=0,e-r};function intArrayFromString(c,t,e){var n=e>0?e:lengthBytesUTF8(c)+1,r=new Array(n),o=stringToUTF8Array(c,r,0,r.length);return t&&(r.length=o),r}var zl={ttys:[],init(){},shutdown(){},register(c,t){zl.ttys[c]={input:[],output:[],ops:t},Bl.registerDevice(c,zl.stream_ops)},stream_ops:{open(c){var t=zl.ttys[c.node.rdev];if(!t)throw new Bl.ErrnoError(43);c.tty=t,c.seekable=!1},close(c){c.tty.ops.fsync(c.tty)},fsync(c){c.tty.ops.fsync(c.tty)},read(c,t,e,n,r){if(!c.tty||!c.tty.ops.get_char)throw new Bl.ErrnoError(60);for(var o=0,u=0;u<n;u++){var M;try{M=c.tty.ops.get_char(c.tty)}catch(c){throw new Bl.ErrnoError(29)}if(void 0===M&&0===o)throw new Bl.ErrnoError(6);if(null==M)break;o++,t[e+u]=M}return o&&(c.node.timestamp=Date.now()),o},write(c,t,e,n,r){if(!c.tty||!c.tty.ops.put_char)throw new Bl.ErrnoError(60);try{for(var o=0;o<n;o++)c.tty.ops.put_char(c.tty,t[e+o])}catch(c){throw new Bl.ErrnoError(29)}return n&&(c.node.timestamp=Date.now()),o}},default_tty_ops:{get_char:c=>(()=>{if(!fl.length){var c=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(c=window.prompt("Input: "))&&(c+="\n"):"function"==typeof readline&&null!==(c=readline())&&(c+="\n"),!c)return null;fl=intArrayFromString(c,!0)}return fl.shift()})(),put_char(c,t){null===t||10===t?(bl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},fsync(c){c.output&&c.output.length>0&&(bl(UTF8ArrayToString(c.output,0)),c.output=[])},ioctl_tcgets:c=>({c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}),ioctl_tcsets:(c,t,e)=>0,ioctl_tiocgwinsz:c=>[24,80]},default_tty1_ops:{put_char(c,t){null===t||10===t?(nl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},fsync(c){c.output&&c.output.length>0&&(nl(UTF8ArrayToString(c.output,0)),c.output=[])}}},mmapAlloc=c=>{c=((c,t)=>Math.ceil(c/t)*t)(c,65536);var t=_emscripten_builtin_memalign(65536,c);return t?((c,t)=>(Xl.fill(0,c,c+t),c))(t,c):0},Sl={ops_table:null,mount:c=>Sl.createNode(null,"/",16895,0),createNode(c,t,e,n){if(Bl.isBlkdev(e)||Bl.isFIFO(e))throw new Bl.ErrnoError(63);Sl.ops_table||(Sl.ops_table={dir:{node:{getattr:Sl.node_ops.getattr,setattr:Sl.node_ops.setattr,lookup:Sl.node_ops.lookup,mknod:Sl.node_ops.mknod,rename:Sl.node_ops.rename,unlink:Sl.node_ops.unlink,rmdir:Sl.node_ops.rmdir,readdir:Sl.node_ops.readdir,symlink:Sl.node_ops.symlink},stream:{llseek:Sl.stream_ops.llseek}},file:{node:{getattr:Sl.node_ops.getattr,setattr:Sl.node_ops.setattr},stream:{llseek:Sl.stream_ops.llseek,read:Sl.stream_ops.read,write:Sl.stream_ops.write,allocate:Sl.stream_ops.allocate,mmap:Sl.stream_ops.mmap,msync:Sl.stream_ops.msync}},link:{node:{getattr:Sl.node_ops.getattr,setattr:Sl.node_ops.setattr,readlink:Sl.node_ops.readlink},stream:{}},chrdev:{node:{getattr:Sl.node_ops.getattr,setattr:Sl.node_ops.setattr},stream:Bl.chrdev_stream_ops}});var r=Bl.createNode(c,t,e,n);return Bl.isDir(r.mode)?(r.node_ops=Sl.ops_table.dir.node,r.stream_ops=Sl.ops_table.dir.stream,r.contents={}):Bl.isFile(r.mode)?(r.node_ops=Sl.ops_table.file.node,r.stream_ops=Sl.ops_table.file.stream,r.usedBytes=0,r.contents=null):Bl.isLink(r.mode)?(r.node_ops=Sl.ops_table.link.node,r.stream_ops=Sl.ops_table.link.stream):Bl.isChrdev(r.mode)&&(r.node_ops=Sl.ops_table.chrdev.node,r.stream_ops=Sl.ops_table.chrdev.stream),r.timestamp=Date.now(),c&&(c.contents[t]=r,c.timestamp=r.timestamp),r},getFileDataAsTypedArray:c=>c.contents?c.contents.subarray?c.contents.subarray(0,c.usedBytes):new Uint8Array(c.contents):new Uint8Array(0),expandFileStorage(c,t){var e=c.contents?c.contents.length:0;if(!(e>=t)){t=Math.max(t,e*(e<1048576?2:1.125)>>>0),0!=e&&(t=Math.max(t,256));var n=c.contents;c.contents=new Uint8Array(t),c.usedBytes>0&&c.contents.set(n.subarray(0,c.usedBytes),0)}},resizeFileStorage(c,t){if(c.usedBytes!=t)if(0==t)c.contents=null,c.usedBytes=0;else{var e=c.contents;c.contents=new Uint8Array(t),e&&c.contents.set(e.subarray(0,Math.min(t,c.usedBytes))),c.usedBytes=t}},node_ops:{getattr(c){var t={};return t.dev=Bl.isChrdev(c.mode)?c.id:1,t.ino=c.id,t.mode=c.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=c.rdev,Bl.isDir(c.mode)?t.size=4096:Bl.isFile(c.mode)?t.size=c.usedBytes:Bl.isLink(c.mode)?t.size=c.link.length:t.size=0,t.atime=new Date(c.timestamp),t.mtime=new Date(c.timestamp),t.ctime=new Date(c.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr(c,t){void 0!==t.mode&&(c.mode=t.mode),void 0!==t.timestamp&&(c.timestamp=t.timestamp),void 0!==t.size&&Sl.resizeFileStorage(c,t.size)},lookup(c,t){throw Bl.genericErrors[44]},mknod:(c,t,e,n)=>Sl.createNode(c,t,e,n),rename(c,t,e){if(Bl.isDir(c.mode)){var n;try{n=Bl.lookupNode(t,e)}catch(c){}if(n)for(var r in n.contents)throw new Bl.ErrnoError(55)}delete c.parent.contents[c.name],c.parent.timestamp=Date.now(),c.name=e,t.contents[e]=c,t.timestamp=c.parent.timestamp,c.parent=t},unlink(c,t){delete c.contents[t],c.timestamp=Date.now()},rmdir(c,t){var e=Bl.lookupNode(c,t);for(var n in e.contents)throw new Bl.ErrnoError(55);delete c.contents[t],c.timestamp=Date.now()},readdir(c){var t=[".",".."];for(var e in c.contents)c.contents.hasOwnProperty(e)&&t.push(e);return t},symlink(c,t,e){var n=Sl.createNode(c,t,41471,0);return n.link=e,n},readlink(c){if(!Bl.isLink(c.mode))throw new Bl.ErrnoError(28);return c.link}},stream_ops:{read(c,t,e,n,r){var o=c.node.contents;if(r>=c.node.usedBytes)return 0;var u=Math.min(c.node.usedBytes-r,n);if(u>8&&o.subarray)t.set(o.subarray(r,r+u),e);else for(var M=0;M<u;M++)t[e+M]=o[r+M];return u},write(c,t,e,n,r,o){if(!n)return 0;var u=c.node;if(u.timestamp=Date.now(),t.subarray&&(!u.contents||u.contents.subarray)){if(o)return u.contents=t.subarray(e,e+n),u.usedBytes=n,n;if(0===u.usedBytes&&0===r)return u.contents=t.slice(e,e+n),u.usedBytes=n,n;if(r+n<=u.usedBytes)return u.contents.set(t.subarray(e,e+n),r),n}if(Sl.expandFileStorage(u,r+n),u.contents.subarray&&t.subarray)u.contents.set(t.subarray(e,e+n),r);else for(var M=0;M<n;M++)u.contents[r+M]=t[e+M];return u.usedBytes=Math.max(u.usedBytes,r+n),n},llseek(c,t,e){var n=t;if(1===e?n+=c.position:2===e&&Bl.isFile(c.node.mode)&&(n+=c.node.usedBytes),n<0)throw new Bl.ErrnoError(28);return n},allocate(c,t,e){Sl.expandFileStorage(c.node,t+e),c.node.usedBytes=Math.max(c.node.usedBytes,t+e)},mmap(c,t,e,n,r){if(!Bl.isFile(c.node.mode))throw new Bl.ErrnoError(43);var o,u,M=c.node.contents;if(2&r||M.buffer!==al.buffer){if((e>0||e+t<M.length)&&(M=M.subarray?M.subarray(e,e+t):Array.prototype.slice.call(M,e,e+t)),u=!0,!(o=mmapAlloc(t)))throw new Bl.ErrnoError(48);al.set(M,o)}else u=!1,o=M.byteOffset;return{ptr:o,allocated:u}},msync:(c,t,e,n,r)=>(Sl.stream_ops.write(c,t,0,n,e,!1),0)}},asyncLoad=(c,t,e,n)=>{var r=n?"":`al ${c}`;u(c,(e=>{var n;n=`Loading data file "${c}" failed (no arrayBuffer).`,e||abort(n),t(new Uint8Array(e)),r&&removeRunDependency()}),(t=>{if(!e)throw`Loading data file "${c}" failed.`;e()})),r&&addRunDependency()},xl=r.preloadPlugins||[],FS_getMode=(c,t)=>{var e=0;return c&&(e|=365),t&&(e|=146),e},Bl={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath(c,t={}){if(!(c=Kl.resolve(c)))return{path:"",node:null};if((t=Object.assign({follow_mount:!0,recurse_count:0},t)).recurse_count>8)throw new Bl.ErrnoError(32);for(var e=c.split("/").filter((c=>!!c)),n=Bl.root,r="/",o=0;o<e.length;o++){var u=o===e.length-1;if(u&&t.parent)break;if(n=Bl.lookupNode(n,e[o]),r=gl.join2(r,e[o]),Bl.isMountpoint(n)&&(!u||u&&t.follow_mount)&&(n=n.mounted.root),!u||t.follow)for(var M=0;Bl.isLink(n.mode);){var ll=Bl.readlink(r);if(r=Kl.resolve(gl.dirname(r),ll),n=Bl.lookupPath(r,{recurse_count:t.recurse_count+1}).node,M++>40)throw new Bl.ErrnoError(32)}}return{path:r,node:n}},getPath(c){for(var t;;){if(Bl.isRoot(c)){var e=c.mount.mountpoint;return t?"/"!==e[e.length-1]?`${e}/${t}`:e+t:e}t=t?`${c.name}/${t}`:c.name,c=c.parent}},hashName(c,t){for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n)|0;return(c+e>>>0)%Bl.nameTable.length},hashAddNode(c){var t=Bl.hashName(c.parent.id,c.name);c.name_next=Bl.nameTable[t],Bl.nameTable[t]=c},hashRemoveNode(c){var t=Bl.hashName(c.parent.id,c.name);if(Bl.nameTable[t]===c)Bl.nameTable[t]=c.name_next;else for(var e=Bl.nameTable[t];e;){if(e.name_next===c){e.name_next=c.name_next;break}e=e.name_next}},lookupNode(c,t){var e=Bl.mayLookup(c);if(e)throw new Bl.ErrnoError(e,c);for(var n=Bl.hashName(c.id,t),r=Bl.nameTable[n];r;r=r.name_next){var o=r.name;if(r.parent.id===c.id&&o===t)return r}return Bl.lookup(c,t)},createNode(c,t,e,n){var r=new Bl.FSNode(c,t,e,n);return Bl.hashAddNode(r),r},destroyNode(c){Bl.hashRemoveNode(c)},isRoot:c=>c===c.parent,isMountpoint:c=>!!c.mounted,isFile:c=>32768==(61440&c),isDir:c=>16384==(61440&c),isLink:c=>40960==(61440&c),isChrdev:c=>8192==(61440&c),isBlkdev:c=>24576==(61440&c),isFIFO:c=>4096==(61440&c),isSocket:c=>49152==(49152&c),flagsToPermissionString(c){var t=["r","w","rw"][3&c];return 512&c&&(t+="w"),t},nodePermissions:(c,t)=>Bl.ignorePermissions||(!t.includes("r")||292&c.mode)&&(!t.includes("w")||146&c.mode)&&(!t.includes("x")||73&c.mode)?0:2,mayLookup(c){var t=Bl.nodePermissions(c,"x");return t||(c.node_ops.lookup?0:2)},mayCreate(c,t){try{Bl.lookupNode(c,t);return 20}catch(c){}return Bl.nodePermissions(c,"wx")},mayDelete(c,t,e){var n;try{n=Bl.lookupNode(c,t)}catch(c){return c.errno}var r=Bl.nodePermissions(c,"wx");if(r)return r;if(e){if(!Bl.isDir(n.mode))return 54;if(Bl.isRoot(n)||Bl.getPath(n)===Bl.cwd())return 10}else if(Bl.isDir(n.mode))return 31;return 0},mayOpen:(c,t)=>c?Bl.isLink(c.mode)?32:Bl.isDir(c.mode)&&("r"!==Bl.flagsToPermissionString(t)||512&t)?31:Bl.nodePermissions(c,Bl.flagsToPermissionString(t)):44,MAX_OPEN_FDS:4096,nextfd(){for(var c=0;c<=Bl.MAX_OPEN_FDS;c++)if(!Bl.streams[c])return c;throw new Bl.ErrnoError(33)},getStreamChecked(c){var t=Bl.getStream(c);if(!t)throw new Bl.ErrnoError(8);return t},getStream:c=>Bl.streams[c],createStream:(c,t=-1)=>(Bl.FSStream||(Bl.FSStream=function(){this.shared={}},Bl.FSStream.prototype={},Object.defineProperties(Bl.FSStream.prototype,{object:{get(){return this.node},set(c){this.node=c}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(c){this.shared.flags=c}},position:{get(){return this.shared.position},set(c){this.shared.position=c}}})),c=Object.assign(new Bl.FSStream,c),-1==t&&(t=Bl.nextfd()),c.fd=t,Bl.streams[t]=c,c),closeStream(c){Bl.streams[c]=null},chrdev_stream_ops:{open(c){var t=Bl.getDevice(c.node.rdev);c.stream_ops=t.stream_ops,c.stream_ops.open&&c.stream_ops.open(c)},llseek(){throw new Bl.ErrnoError(70)}},major:c=>c>>8,minor:c=>255&c,makedev:(c,t)=>c<<8|t,registerDevice(c,t){Bl.devices[c]={stream_ops:t}},getDevice:c=>Bl.devices[c],getMounts(c){for(var t=[],e=[c];e.length;){var n=e.pop();t.push(n),e.push.apply(e,n.mounts)}return t},syncfs(c,t){"function"==typeof c&&(t=c,c=!1),Bl.syncFSRequests++,Bl.syncFSRequests>1&&nl(`warning: ${Bl.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var e=Bl.getMounts(Bl.root.mount),n=0;function doCallback(c){return Bl.syncFSRequests--,t(c)}function done(c){if(c)return done.errored?void 0:(done.errored=!0,doCallback(c));++n>=e.length&&doCallback(null)}e.forEach((t=>{if(!t.type.syncfs)return done(null);t.type.syncfs(t,c,done)}))},mount(c,t,e){var n,r="/"===e,o=!e;if(r&&Bl.root)throw new Bl.ErrnoError(10);if(!r&&!o){var u=Bl.lookupPath(e,{follow_mount:!1});if(e=u.path,n=u.node,Bl.isMountpoint(n))throw new Bl.ErrnoError(10);if(!Bl.isDir(n.mode))throw new Bl.ErrnoError(54)}var M={type:c,opts:t,mountpoint:e,mounts:[]},ll=c.mount(M);return ll.mount=M,M.root=ll,r?Bl.root=ll:n&&(n.mounted=M,n.mount&&n.mount.mounts.push(M)),ll},unmount(c){var t=Bl.lookupPath(c,{follow_mount:!1});if(!Bl.isMountpoint(t.node))throw new Bl.ErrnoError(28);var e=t.node,n=e.mounted,r=Bl.getMounts(n);Object.keys(Bl.nameTable).forEach((c=>{for(var t=Bl.nameTable[c];t;){var e=t.name_next;r.includes(t.mount)&&Bl.destroyNode(t),t=e}})),e.mounted=null;var o=e.mount.mounts.indexOf(n);e.mount.mounts.splice(o,1)},lookup:(c,t)=>c.node_ops.lookup(c,t),mknod(c,t,e){var n=Bl.lookupPath(c,{parent:!0}).node,r=gl.basename(c);if(!r||"."===r||".."===r)throw new Bl.ErrnoError(28);var o=Bl.mayCreate(n,r);if(o)throw new Bl.ErrnoError(o);if(!n.node_ops.mknod)throw new Bl.ErrnoError(63);return n.node_ops.mknod(n,r,t,e)},create:(c,t)=>(t=void 0!==t?t:438,t&=4095,t|=32768,Bl.mknod(c,t,0)),mkdir:(c,t)=>(t=void 0!==t?t:511,t&=1023,t|=16384,Bl.mknod(c,t,0)),mkdirTree(c,t){for(var e=c.split("/"),n="",r=0;r<e.length;++r)if(e[r]){n+="/"+e[r];try{Bl.mkdir(n,t)}catch(c){if(20!=c.errno)throw c}}},mkdev:(c,t,e)=>(void 0===e&&(e=t,t=438),t|=8192,Bl.mknod(c,t,e)),symlink(c,t){if(!Kl.resolve(c))throw new Bl.ErrnoError(44);var e=Bl.lookupPath(t,{parent:!0}).node;if(!e)throw new Bl.ErrnoError(44);var n=gl.basename(t),r=Bl.mayCreate(e,n);if(r)throw new Bl.ErrnoError(r);if(!e.node_ops.symlink)throw new Bl.ErrnoError(63);return e.node_ops.symlink(e,n,c)},rename(c,t){var e,n,r=gl.dirname(c),o=gl.dirname(t),u=gl.basename(c),M=gl.basename(t);if(e=Bl.lookupPath(c,{parent:!0}).node,n=Bl.lookupPath(t,{parent:!0}).node,!e||!n)throw new Bl.ErrnoError(44);if(e.mount!==n.mount)throw new Bl.ErrnoError(75);var ll,Zl=Bl.lookupNode(e,u),cl=Kl.relative(c,o);if("."!==cl.charAt(0))throw new Bl.ErrnoError(28);if("."!==(cl=Kl.relative(t,r)).charAt(0))throw new Bl.ErrnoError(55);try{ll=Bl.lookupNode(n,M)}catch(c){}if(Zl!==ll){var dl=Bl.isDir(Zl.mode),tl=Bl.mayDelete(e,u,dl);if(tl)throw new Bl.ErrnoError(tl);if(tl=ll?Bl.mayDelete(n,M,dl):Bl.mayCreate(n,M))throw new Bl.ErrnoError(tl);if(!e.node_ops.rename)throw new Bl.ErrnoError(63);if(Bl.isMountpoint(Zl)||ll&&Bl.isMountpoint(ll))throw new Bl.ErrnoError(10);if(n!==e&&(tl=Bl.nodePermissions(e,"w")))throw new Bl.ErrnoError(tl);Bl.hashRemoveNode(Zl);try{e.node_ops.rename(Zl,n,M)}catch(c){throw c}finally{Bl.hashAddNode(Zl)}}},rmdir(c){var t=Bl.lookupPath(c,{parent:!0}).node,e=gl.basename(c),n=Bl.lookupNode(t,e),r=Bl.mayDelete(t,e,!0);if(r)throw new Bl.ErrnoError(r);if(!t.node_ops.rmdir)throw new Bl.ErrnoError(63);if(Bl.isMountpoint(n))throw new Bl.ErrnoError(10);t.node_ops.rmdir(t,e),Bl.destroyNode(n)},readdir(c){var t=Bl.lookupPath(c,{follow:!0}).node;if(!t.node_ops.readdir)throw new Bl.ErrnoError(54);return t.node_ops.readdir(t)},unlink(c){var t=Bl.lookupPath(c,{parent:!0}).node;if(!t)throw new Bl.ErrnoError(44);var e=gl.basename(c),n=Bl.lookupNode(t,e),r=Bl.mayDelete(t,e,!1);if(r)throw new Bl.ErrnoError(r);if(!t.node_ops.unlink)throw new Bl.ErrnoError(63);if(Bl.isMountpoint(n))throw new Bl.ErrnoError(10);t.node_ops.unlink(t,e),Bl.destroyNode(n)},readlink(c){var t=Bl.lookupPath(c).node;if(!t)throw new Bl.ErrnoError(44);if(!t.node_ops.readlink)throw new Bl.ErrnoError(28);return Kl.resolve(Bl.getPath(t.parent),t.node_ops.readlink(t))},stat(c,t){var e=Bl.lookupPath(c,{follow:!t}).node;if(!e)throw new Bl.ErrnoError(44);if(!e.node_ops.getattr)throw new Bl.ErrnoError(63);return e.node_ops.getattr(e)},lstat:c=>Bl.stat(c,!0),chmod(c,t,e){var n;"string"==typeof c?n=Bl.lookupPath(c,{follow:!e}).node:n=c;if(!n.node_ops.setattr)throw new Bl.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&t|-4096&n.mode,timestamp:Date.now()})},lchmod(c,t){Bl.chmod(c,t,!0)},fchmod(c,t){var e=Bl.getStreamChecked(c);Bl.chmod(e.node,t)},chown(c,t,e,n){var r;"string"==typeof c?r=Bl.lookupPath(c,{follow:!n}).node:r=c;if(!r.node_ops.setattr)throw new Bl.ErrnoError(63);r.node_ops.setattr(r,{timestamp:Date.now()})},lchown(c,t,e){Bl.chown(c,t,e,!0)},fchown(c,t,e){var n=Bl.getStreamChecked(c);Bl.chown(n.node,t,e)},truncate(c,t){if(t<0)throw new Bl.ErrnoError(28);var e;"string"==typeof c?e=Bl.lookupPath(c,{follow:!0}).node:e=c;if(!e.node_ops.setattr)throw new Bl.ErrnoError(63);if(Bl.isDir(e.mode))throw new Bl.ErrnoError(31);if(!Bl.isFile(e.mode))throw new Bl.ErrnoError(28);var n=Bl.nodePermissions(e,"w");if(n)throw new Bl.ErrnoError(n);e.node_ops.setattr(e,{size:t,timestamp:Date.now()})},ftruncate(c,t){var e=Bl.getStreamChecked(c);if(0==(2097155&e.flags))throw new Bl.ErrnoError(28);Bl.truncate(e.node,t)},utime(c,t,e){var n=Bl.lookupPath(c,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(t,e)})},open(c,t,e){if(""===c)throw new Bl.ErrnoError(44);var n;if(e=void 0===e?438:e,e=64&(t="string"==typeof t?(c=>{var t={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[c];if(void 0===t)throw new Error(`Unknown file open mode: ${c}`);return t})(t):t)?4095&e|32768:0,"object"==typeof c)n=c;else{c=gl.normalize(c);try{n=Bl.lookupPath(c,{follow:!(131072&t)}).node}catch(c){}}var o=!1;if(64&t)if(n){if(128&t)throw new Bl.ErrnoError(20)}else n=Bl.mknod(c,e,0),o=!0;if(!n)throw new Bl.ErrnoError(44);if(Bl.isChrdev(n.mode)&&(t&=-513),65536&t&&!Bl.isDir(n.mode))throw new Bl.ErrnoError(54);if(!o){var u=Bl.mayOpen(n,t);if(u)throw new Bl.ErrnoError(u)}512&t&&!o&&Bl.truncate(n,0),t&=-131713;var M=Bl.createStream({node:n,path:Bl.getPath(n),flags:t,seekable:!0,position:0,stream_ops:n.stream_ops,ungotten:[],error:!1});return M.stream_ops.open&&M.stream_ops.open(M),!r.logReadFiles||1&t||(Bl.readFiles||(Bl.readFiles={}),c in Bl.readFiles||(Bl.readFiles[c]=1)),M},close(c){if(Bl.isClosed(c))throw new Bl.ErrnoError(8);c.getdents&&(c.getdents=null);try{c.stream_ops.close&&c.stream_ops.close(c)}catch(c){throw c}finally{Bl.closeStream(c.fd)}c.fd=null},isClosed:c=>null===c.fd,llseek(c,t,e){if(Bl.isClosed(c))throw new Bl.ErrnoError(8);if(!c.seekable||!c.stream_ops.llseek)throw new Bl.ErrnoError(70);if(0!=e&&1!=e&&2!=e)throw new Bl.ErrnoError(28);return c.position=c.stream_ops.llseek(c,t,e),c.ungotten=[],c.position},read(c,t,e,n,r){if(n<0||r<0)throw new Bl.ErrnoError(28);if(Bl.isClosed(c))throw new Bl.ErrnoError(8);if(1==(2097155&c.flags))throw new Bl.ErrnoError(8);if(Bl.isDir(c.node.mode))throw new Bl.ErrnoError(31);if(!c.stream_ops.read)throw new Bl.ErrnoError(28);var o=void 0!==r;if(o){if(!c.seekable)throw new Bl.ErrnoError(70)}else r=c.position;var u=c.stream_ops.read(c,t,e,n,r);return o||(c.position+=u),u},write(c,t,e,n,r,o){if(n<0||r<0)throw new Bl.ErrnoError(28);if(Bl.isClosed(c))throw new Bl.ErrnoError(8);if(0==(2097155&c.flags))throw new Bl.ErrnoError(8);if(Bl.isDir(c.node.mode))throw new Bl.ErrnoError(31);if(!c.stream_ops.write)throw new Bl.ErrnoError(28);c.seekable&&1024&c.flags&&Bl.llseek(c,0,2);var u=void 0!==r;if(u){if(!c.seekable)throw new Bl.ErrnoError(70)}else r=c.position;var M=c.stream_ops.write(c,t,e,n,r,o);return u||(c.position+=M),M},allocate(c,t,e){if(Bl.isClosed(c))throw new Bl.ErrnoError(8);if(t<0||e<=0)throw new Bl.ErrnoError(28);if(0==(2097155&c.flags))throw new Bl.ErrnoError(8);if(!Bl.isFile(c.node.mode)&&!Bl.isDir(c.node.mode))throw new Bl.ErrnoError(43);if(!c.stream_ops.allocate)throw new Bl.ErrnoError(138);c.stream_ops.allocate(c,t,e)},mmap(c,t,e,n,r){if(0!=(2&n)&&0==(2&r)&&2!=(2097155&c.flags))throw new Bl.ErrnoError(2);if(1==(2097155&c.flags))throw new Bl.ErrnoError(2);if(!c.stream_ops.mmap)throw new Bl.ErrnoError(43);return c.stream_ops.mmap(c,t,e,n,r)},msync:(c,t,e,n,r)=>c.stream_ops.msync?c.stream_ops.msync(c,t,e,n,r):0,munmap:c=>0,ioctl(c,t,e){if(!c.stream_ops.ioctl)throw new Bl.ErrnoError(59);return c.stream_ops.ioctl(c,t,e)},readFile(c,t={}){if(t.flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error(`Invalid encoding type "${t.encoding}"`);var e,n=Bl.open(c,t.flags),r=Bl.stat(c).size,o=new Uint8Array(r);return Bl.read(n,o,0,r,0),"utf8"===t.encoding?e=UTF8ArrayToString(o,0):"binary"===t.encoding&&(e=o),Bl.close(n),e},writeFile(c,t,e={}){e.flags=e.flags||577;var n=Bl.open(c,e.flags,e.mode);if("string"==typeof t){var r=new Uint8Array(lengthBytesUTF8(t)+1),o=stringToUTF8Array(t,r,0,r.length);Bl.write(n,r,0,o,void 0,e.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");Bl.write(n,t,0,t.byteLength,void 0,e.canOwn)}Bl.close(n)},cwd:()=>Bl.currentPath,chdir(c){var t=Bl.lookupPath(c,{follow:!0});if(null===t.node)throw new Bl.ErrnoError(44);if(!Bl.isDir(t.node.mode))throw new Bl.ErrnoError(54);var e=Bl.nodePermissions(t.node,"x");if(e)throw new Bl.ErrnoError(e);Bl.currentPath=t.path},createDefaultDirectories(){Bl.mkdir("/tmp"),Bl.mkdir("/home"),Bl.mkdir("/home/web_user")},createDefaultDevices(){Bl.mkdir("/dev"),Bl.registerDevice(Bl.makedev(1,3),{read:()=>0,write:(c,t,e,n,r)=>n}),Bl.mkdev("/dev/null",Bl.makedev(1,3)),zl.register(Bl.makedev(5,0),zl.default_tty_ops),zl.register(Bl.makedev(6,0),zl.default_tty1_ops),Bl.mkdev("/dev/tty",Bl.makedev(5,0)),Bl.mkdev("/dev/tty1",Bl.makedev(6,0));var c=new Uint8Array(1024),t=0,randomByte=()=>(0===t&&(t=randomFill(c).byteLength),c[--t]);Bl.createDevice("/dev","random",randomByte),Bl.createDevice("/dev","urandom",randomByte),Bl.mkdir("/dev/shm"),Bl.mkdir("/dev/shm/tmp")},createSpecialDirectories(){Bl.mkdir("/proc");var c=Bl.mkdir("/proc/self");Bl.mkdir("/proc/self/fd"),Bl.mount({mount(){var t=Bl.createNode(c,"fd",16895,73);return t.node_ops={lookup(c,t){var e=+t,n=Bl.getStreamChecked(e),r={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>n.path}};return r.parent=r,r}},t}},{},"/proc/self/fd")},createStandardStreams(){r.stdin?Bl.createDevice("/dev","stdin",r.stdin):Bl.symlink("/dev/tty","/dev/stdin"),r.stdout?Bl.createDevice("/dev","stdout",null,r.stdout):Bl.symlink("/dev/tty","/dev/stdout"),r.stderr?Bl.createDevice("/dev","stderr",null,r.stderr):Bl.symlink("/dev/tty1","/dev/stderr");Bl.open("/dev/stdin",0),Bl.open("/dev/stdout",1),Bl.open("/dev/stderr",1)},ensureErrnoError(){Bl.ErrnoError||(Bl.ErrnoError=function(c,t){this.name="ErrnoError",this.node=t,this.setErrno=function(c){this.errno=c},this.setErrno(c),this.message="FS error"},Bl.ErrnoError.prototype=new Error,Bl.ErrnoError.prototype.constructor=Bl.ErrnoError,[44].forEach((c=>{Bl.genericErrors[c]=new Bl.ErrnoError(c),Bl.genericErrors[c].stack="<generic error, no stack>"})))},staticInit(){Bl.ensureErrnoError(),Bl.nameTable=new Array(4096),Bl.mount(Sl,{},"/"),Bl.createDefaultDirectories(),Bl.createDefaultDevices(),Bl.createSpecialDirectories(),Bl.filesystems={MEMFS:Sl}},init(c,t,e){Bl.init.initialized=!0,Bl.ensureErrnoError(),r.stdin=c||r.stdin,r.stdout=t||r.stdout,r.stderr=e||r.stderr,Bl.createStandardStreams()},quit(){Bl.init.initialized=!1,hZ(0);for(var c=0;c<Bl.streams.length;c++){var t=Bl.streams[c];t&&Bl.close(t)}},findObject(c,t){var e=Bl.analyzePath(c,t);return e.exists?e.object:null},analyzePath(c,t){try{c=(n=Bl.lookupPath(c,{follow:!t})).path}catch(c){}var e={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=Bl.lookupPath(c,{parent:!0});e.parentExists=!0,e.parentPath=n.path,e.parentObject=n.node,e.name=gl.basename(c),n=Bl.lookupPath(c,{follow:!t}),e.exists=!0,e.path=n.path,e.object=n.node,e.name=n.node.name,e.isRoot="/"===n.path}catch(c){e.error=c.errno}return e},createPath(c,t,e,n){c="string"==typeof c?c:Bl.getPath(c);for(var r=t.split("/").reverse();r.length;){var o=r.pop();if(o){var u=gl.join2(c,o);try{Bl.mkdir(u)}catch(c){}c=u}}return u},createFile(c,t,e,n,r){var o=gl.join2("string"==typeof c?c:Bl.getPath(c),t),u=FS_getMode(n,r);return Bl.create(o,u)},createDataFile(c,t,e,n,r,o){var u=t;c&&(c="string"==typeof c?c:Bl.getPath(c),u=t?gl.join2(c,t):c);var M=FS_getMode(n,r),ll=Bl.create(u,M);if(e){if("string"==typeof e){for(var Zl=new Array(e.length),cl=0,dl=e.length;cl<dl;++cl)Zl[cl]=e.charCodeAt(cl);e=Zl}Bl.chmod(ll,146|M);var tl=Bl.open(ll,577);Bl.write(tl,e,0,e.length,0,o),Bl.close(tl),Bl.chmod(ll,M)}},createDevice(c,t,e,n){var r=gl.join2("string"==typeof c?c:Bl.getPath(c),t),o=FS_getMode(!!e,!!n);Bl.createDevice.major||(Bl.createDevice.major=64);var u=Bl.makedev(Bl.createDevice.major++,0);return Bl.registerDevice(u,{open(c){c.seekable=!1},close(c){n&&n.buffer&&n.buffer.length&&n(10)},read(c,t,n,r,o){for(var u=0,M=0;M<r;M++){var ll;try{ll=e()}catch(c){throw new Bl.ErrnoError(29)}if(void 0===ll&&0===u)throw new Bl.ErrnoError(6);if(null==ll)break;u++,t[n+M]=ll}return u&&(c.node.timestamp=Date.now()),u},write(c,t,e,r,o){for(var u=0;u<r;u++)try{n(t[e+u])}catch(c){throw new Bl.ErrnoError(29)}return r&&(c.node.timestamp=Date.now()),u}}),Bl.mkdev(r,o,u)},forceLoadFile(c){if(c.isDevice||c.isFolder||c.link||c.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!o)throw new Error("Cannot load without read() or XMLHttpRequest.");try{c.contents=intArrayFromString(o(c.url),!0),c.usedBytes=c.contents.length}catch(c){throw new Bl.ErrnoError(29)}},createLazyFile(c,t,e,n,r){function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(c){if(!(c>this.length-1||c<0)){var t=c%this.chunkSize,e=c/this.chunkSize|0;return this.getter(e)[t]}},LazyUint8Array.prototype.setDataGetter=function(c){this.getter=c},LazyUint8Array.prototype.cacheLength=function(){var c=new XMLHttpRequest;if(c.open("HEAD",e,!1),c.send(null),!(c.status>=200&&c.status<300||304===c.status))throw new Error("Couldn't load "+e+". Status: "+c.status);var t,n=Number(c.getResponseHeader("Content-length")),r=(t=c.getResponseHeader("Accept-Ranges"))&&"bytes"===t,o=(t=c.getResponseHeader("Content-Encoding"))&&"gzip"===t,u=1048576;r||(u=n);var M=this;M.setDataGetter((c=>{var t=c*u,r=(c+1)*u-1;if(r=Math.min(r,n-1),void 0===M.chunks[c]&&(M.chunks[c]=((c,t)=>{if(c>t)throw new Error("invalid range ("+c+", "+t+") or no bytes requested!");if(t>n-1)throw new Error("only "+n+" bytes available! programmer error!");var r=new XMLHttpRequest;if(r.open("GET",e,!1),n!==u&&r.setRequestHeader("Range","bytes="+c+"-"+t),r.responseType="arraybuffer",r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),!(r.status>=200&&r.status<300||304===r.status))throw new Error("Couldn't load "+e+". Status: "+r.status);return void 0!==r.response?new Uint8Array(r.response||[]):intArrayFromString(r.responseText||"",!0)})(t,r)),void 0===M.chunks[c])throw new Error("doXHR failed!");return M.chunks[c]})),!o&&n||(u=n=1,n=this.getter(0).length,u=n,bl("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=u,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!dl)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new LazyUint8Array;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:o}}else u={isDevice:!1,url:e};var M=Bl.createFile(c,t,u,n,r);u.contents?M.contents=u.contents:u.url&&(M.contents=null,M.url=u.url),Object.defineProperties(M,{usedBytes:{get:function(){return this.contents.length}}});var ll={};function writeChunks(c,t,e,n,r){var o=c.node.contents;if(r>=o.length)return 0;var u=Math.min(o.length-r,n);if(o.slice)for(var M=0;M<u;M++)t[e+M]=o[r+M];else for(M=0;M<u;M++)t[e+M]=o.get(r+M);return u}return Object.keys(M.stream_ops).forEach((c=>{var t=M.stream_ops[c];ll[c]=function(){return Bl.forceLoadFile(M),t.apply(null,arguments)}})),ll.read=(c,t,e,n,r)=>(Bl.forceLoadFile(M),writeChunks(c,t,e,n,r)),ll.mmap=(c,t,e,n,r)=>{Bl.forceLoadFile(M);var o=mmapAlloc(t);if(!o)throw new Bl.ErrnoError(48);return writeChunks(c,al,o,t,e),{ptr:o,allocated:!0}},M.stream_ops=ll,M}},wl={DEFAULT_POLLMASK:5,calculateAt(c,t,e){if(gl.isAbs(t))return t;var n;-100===c?n=Bl.cwd():n=wl.getStreamFromFD(c).path;if(0==t.length){if(!e)throw new Bl.ErrnoError(44);return n}return gl.join2(n,t)},doStat(c,t,e){try{var n=c(t)}catch(c){if(c&&c.node&&gl.normalize(t)!==gl.normalize(Bl.getPath(c.node)))return-54;throw c}Wl[e>>2]=n.dev,Wl[e+4>>2]=n.mode,rl[e+8>>2]=n.nlink,Wl[e+12>>2]=n.uid,Wl[e+16>>2]=n.gid,Wl[e+20>>2]=n.rdev,Hl=[n.size>>>0,(Nl=n.size,+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[e+24>>2]=Hl[0],Wl[e+28>>2]=Hl[1],Wl[e+32>>2]=4096,Wl[e+36>>2]=n.blocks;var r=n.atime.getTime(),o=n.mtime.getTime(),u=n.ctime.getTime();return Hl=[Math.floor(r/1e3)>>>0,(Nl=Math.floor(r/1e3),+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[e+40>>2]=Hl[0],Wl[e+44>>2]=Hl[1],rl[e+48>>2]=r%1e3*1e3,Hl=[Math.floor(o/1e3)>>>0,(Nl=Math.floor(o/1e3),+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[e+56>>2]=Hl[0],Wl[e+60>>2]=Hl[1],rl[e+64>>2]=o%1e3*1e3,Hl=[Math.floor(u/1e3)>>>0,(Nl=Math.floor(u/1e3),+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[e+72>>2]=Hl[0],Wl[e+76>>2]=Hl[1],rl[e+80>>2]=u%1e3*1e3,Hl=[n.ino>>>0,(Nl=n.ino,+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[e+88>>2]=Hl[0],Wl[e+92>>2]=Hl[1],0},doMsync(c,t,e,n,r){if(!Bl.isFile(t.node.mode))throw new Bl.ErrnoError(43);if(2&n)return 0;var o=Xl.slice(c,c+e);Bl.msync(t,o,r,e,n)},varargs:void 0,get(){var c=Wl[+wl.varargs>>2];return wl.varargs+=4,c},getp:()=>wl.get(),getStr:c=>UTF8ToString(c),getStreamFromFD:c=>Bl.getStreamChecked(c)};var convertI32PairToI53Checked=(c,t)=>t+2097152>>>0<4194305-!!c?(c>>>0)+4294967296*t:NaN;var stringToUTF8=(c,t,e)=>stringToUTF8Array(c,Xl,t,e);var Ll,Cl,Ml,readLatin1String=c=>{for(var t="",e=c;Xl[e];)t+=Ll[Xl[e++]];return t},Pl={},jl={},El={},throwBindingError=c=>{throw new Cl(c)},throwInternalError=c=>{throw new Ml(c)},whenDependentTypesAreResolved=(c,t,e)=>{function onComplete(t){var n=e(t);n.length!==c.length&&throwInternalError("Mismatched type converter count");for(var r=0;r<c.length;++r)registerType(c[r],n[r])}c.forEach((function(c){El[c]=t}));var n=new Array(t.length),r=[],o=0;t.forEach(((c,t)=>{jl.hasOwnProperty(c)?n[t]=jl[c]:(r.push(c),Pl.hasOwnProperty(c)||(Pl[c]=[]),Pl[c].push((()=>{n[t]=jl[c],++o===r.length&&onComplete(n)})))})),0===r.length&&onComplete(n)};function registerType(c,t,e={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(c,t,e={}){var n=t.name;if(c||throwBindingError(`type "${n}" must have a positive integer typeid pointer`),jl.hasOwnProperty(c)){if(e.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${n}' twice`)}if(jl[c]=t,delete El[c],Pl.hasOwnProperty(c)){var r=Pl[c];delete Pl[c],r.forEach((c=>c()))}}(c,t,e)}var Ql,throwInstanceAlreadyDeleted=c=>{throwBindingError(c.$$.ptrType.registeredClass.name+" instance already deleted")},Ol=!1,detachFinalizer=c=>{},releaseClassHandle=c=>{c.count.value-=1,0===c.count.value&&(c=>{c.smartPtr?c.smartPtrType.rawDestructor(c.smartPtr):c.ptrType.registeredClass.rawDestructor(c.ptr)})(c)},downcastPointer=(c,t,e)=>{if(t===e)return c;if(void 0===e.baseClass)return null;var n=downcastPointer(c,t,e.baseClass);return null===n?null:e.downcast(n)},Dl={},getInheritedInstanceCount=()=>Object.keys(_l).length,getLiveInheritedInstances=()=>{var c=[];for(var t in _l)_l.hasOwnProperty(t)&&c.push(_l[t]);return c},Al=[],flushPendingDeletes=()=>{for(;Al.length;){var c=Al.pop();c.$$.deleteScheduled=!1,c.delete()}},setDelayFunction=c=>{Ql=c,Al.length&&Ql&&Ql(flushPendingDeletes)},_l={},getInheritedInstance=(c,t)=>(t=((c,t)=>{for(void 0===t&&throwBindingError("ptr should not be undefined");c.baseClass;)t=c.upcast(t),c=c.baseClass;return t})(c,t),_l[t]),makeClassHandle=(c,t)=>(t.ptrType&&t.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!t.smartPtrType!==!!t.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),t.count={value:1},attachFinalizer(Object.create(c,{$$:{value:t}})));function RegisteredPointer_fromWireType(c){var t=this.getPointee(c);if(!t)return this.destructor(c),null;var e=getInheritedInstance(this.registeredClass,t);if(void 0!==e){if(0===e.$$.count.value)return e.$$.ptr=t,e.$$.smartPtr=c,e.clone();var n=e.clone();return this.destructor(c),n}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:t,smartPtrType:this,smartPtr:c}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:c})}var r,o=this.registeredClass.getActualType(t),u=Dl[o];if(!u)return makeDefaultHandle.call(this);r=this.isConst?u.constPointerType:u.pointerType;var M=downcastPointer(t,this.registeredClass,r.registeredClass);return null===M?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M,smartPtrType:this,smartPtr:c}):makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M})}var attachFinalizer=c=>"undefined"==typeof FinalizationRegistry?(attachFinalizer=c=>c,c):(Ol=new FinalizationRegistry((c=>{releaseClassHandle(c.$$)})),attachFinalizer=c=>{var t=c.$$;if(!!t.smartPtr){var e={$$:t};Ol.register(c,e,c)}return c},detachFinalizer=c=>Ol.unregister(c),attachFinalizer(c));function ClassHandle(){}var createNamedFunction=(c,t)=>Object.defineProperty(t,"name",{value:c}),ensureOverloadTable=(c,t,e)=>{if(void 0===c[t].overloadTable){var n=c[t];c[t]=function(){return c[t].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${e}' called with an invalid number of arguments (${arguments.length}) - expects one of (${c[t].overloadTable})!`),c[t].overloadTable[arguments.length].apply(this,arguments)},c[t].overloadTable=[],c[t].overloadTable[n.argCount]=n}};function RegisteredClass(c,t,e,n,r,o,u,M){this.name=c,this.constructor=t,this.instancePrototype=e,this.rawDestructor=n,this.baseClass=r,this.getActualType=o,this.upcast=u,this.downcast=M,this.pureVirtualFunctions=[]}var upcastPointer=(c,t,e)=>{for(;t!==e;)t.upcast||throwBindingError(`Expected null or instance of ${e.name}, got an instance of ${t.name}`),c=t.upcast(c),t=t.baseClass;return c};function constNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function genericPointerToWireType(c,t){var e;if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),this.isSmartPointer?(e=this.rawConstructor(),null!==c&&c.push(this.rawDestructor,e),e):0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&t.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name} to parameter type ${this.name}`);var n=t.$$.ptrType.registeredClass;if(e=upcastPointer(t.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===t.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:t.$$.smartPtrType===this?e=t.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:e=t.$$.smartPtr;break;case 2:if(t.$$.smartPtrType===this)e=t.$$.smartPtr;else{var r=t.clone();e=this.rawShare(e,cZ.toHandle((()=>r.delete()))),null!==c&&c.push(this.rawDestructor,e)}break;default:throwBindingError("Unsupporting sharing policy")}return e}function nonConstNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`),t.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function readPointer(c){return this.fromWireType(rl[c>>2])}function RegisteredPointer(c,t,e,n,r,o,u,M,ll,Zl,cl){this.name=c,this.registeredClass=t,this.isReference=e,this.isConst=n,this.isSmartPointer=r,this.pointeeType=o,this.sharingPolicy=u,this.rawGetPointee=M,this.rawConstructor=ll,this.rawShare=Zl,this.rawDestructor=cl,r||void 0!==t.baseClass?this.toWireType=genericPointerToWireType:n?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}var $l,ql,lZ=[],getWasmTableEntry=c=>{var t=lZ[c];return t||(c>=lZ.length&&(lZ.length=c+1),lZ[c]=t=$l.get(c)),t},dynCall=(c,t,e)=>c.includes("j")?((c,t,e)=>{var n=r["dynCall_"+c];return e&&e.length?n.apply(null,[t].concat(e)):n.call(null,t)})(c,t,e):getWasmTableEntry(t).apply(null,e),embind__requireFunction=(c,t)=>{var e,n,r,o=(c=readLatin1String(c)).includes("j")?(e=c,n=t,r=[],function(){return r.length=0,Object.assign(r,arguments),dynCall(e,n,r)}):getWasmTableEntry(t);return"function"!=typeof o&&throwBindingError(`unknown function pointer with signature ${c}: ${t}`),o},getTypeName=c=>{var t=___getTypeName(c),e=readLatin1String(t);return _free(t),e},throwUnboundTypeError=(c,t)=>{var e=[],n={};throw t.forEach((function visit(c){n[c]||jl[c]||(El[c]?El[c].forEach(visit):(e.push(c),n[c]=!0))})),new ql(`${c}: `+e.map(getTypeName).join([", "]))},heap32VectorToArray=(c,t)=>{for(var e=[],n=0;n<c;n++)e.push(rl[t+4*n>>2]);return e},runDestructors=c=>{for(;c.length;){var t=c.pop();c.pop()(t)}};function craftInvokerFunction(c,t,e,n,r,o){var u=t.length;u<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var M=null!==t[1]&&null!==e,ll=!1,Zl=1;Zl<t.length;++Zl)if(null!==t[Zl]&&void 0===t[Zl].destructorFunction){ll=!0;break}var cl="void"!==t[0].name,dl="",tl="";for(Zl=0;Zl<u-2;++Zl)dl+=(0!==Zl?", ":"")+"arg"+Zl,tl+=(0!==Zl?", ":"")+"arg"+Zl+"Wired";var el=`\n        return function (${dl}) {\n        if (arguments.length !== ${u-2}) {\n          throwBindingError('function ${c} called with ' + arguments.length + ' arguments, expected ${u-2}');\n        }`;ll&&(el+="var destructors = [];\n");var ml=ll?"destructors":"null",bl=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],nl=[throwBindingError,n,r,runDestructors,t[0],t[1]];M&&(el+="var thisWired = classParam.toWireType("+ml+", this);\n");for(Zl=0;Zl<u-2;++Zl)el+="var arg"+Zl+"Wired = argType"+Zl+".toWireType("+ml+", arg"+Zl+"); // "+t[Zl+2].name+"\n",bl.push("argType"+Zl),nl.push(t[Zl+2]);if(M&&(tl="thisWired"+(tl.length>0?", ":"")+tl),el+=(cl||o?"var rv = ":"")+"invoker(fn"+(tl.length>0?", ":"")+tl+");\n",ll)el+="runDestructors(destructors);\n";else for(Zl=M?1:2;Zl<t.length;++Zl){var al=1===Zl?"thisWired":"arg"+(Zl-2)+"Wired";null!==t[Zl].destructorFunction&&(el+=al+"_dtor("+al+"); // "+t[Zl].name+"\n",bl.push(al+"_dtor"),nl.push(t[Zl].destructorFunction))}cl&&(el+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),el+="}\n",bl.push(el);var Xl=function(c,t){if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var e=createNamedFunction(c.name||"unknownFunctionName",(function(){}));e.prototype=c.prototype;var n=new e,r=c.apply(n,t);return r instanceof Object?r:n}(Function,bl).apply(null,nl);return createNamedFunction(c,Xl)}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var ZZ=new HandleAllocator,__emval_decref=c=>{c>=ZZ.reserved&&0==--ZZ.get(c).refcount&&ZZ.free(c)},count_emval_handles=()=>{for(var c=0,t=ZZ.reserved;t<ZZ.allocated.length;++t)void 0!==ZZ.allocated[t]&&++c;return c},cZ={toValue:c=>(c||throwBindingError("Cannot use deleted val. handle = "+c),ZZ.get(c).value),toHandle:c=>{switch(c){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ZZ.allocate({refcount:1,value:c})}}};function simpleReadValueFromPointer(c){return this.fromWireType(Wl[c>>2])}var embindRepr=c=>{if(null===c)return"null";var t=typeof c;return"object"===t||"array"===t||"function"===t?c.toString():""+c},floatReadValueFromPointer=(c,t)=>{switch(t){case 4:return function(c){return this.fromWireType(ol[c>>2])};case 8:return function(c){return this.fromWireType(hl[c>>3])};default:throw new TypeError(`invalid float width (${t}): ${c}`)}},integerReadValueFromPointer=(c,t,e)=>{switch(t){case 1:return e?c=>al[c>>0]:c=>Xl[c>>0];case 2:return e?c=>Gl[c>>1]:c=>il[c>>1];case 4:return e?c=>Wl[c>>2]:c=>rl[c>>2];default:throw new TypeError(`invalid integer width (${t}): ${c}`)}},dZ="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(c,t)=>{for(var e=c,n=e>>1,r=n+t/2;!(n>=r)&&il[n];)++n;if((e=n<<1)-c>32&&dZ)return dZ.decode(Xl.subarray(c,e));for(var o="",u=0;!(u>=t/2);++u){var M=Gl[c+2*u>>1];if(0==M)break;o+=String.fromCharCode(M)}return o},stringToUTF16=(c,t,e)=>{if(void 0===e&&(e=2147483647),e<2)return 0;for(var n=t,r=(e-=2)<2*c.length?e/2:c.length,o=0;o<r;++o){var u=c.charCodeAt(o);Gl[t>>1]=u,t+=2}return Gl[t>>1]=0,t-n},lengthBytesUTF16=c=>2*c.length,UTF32ToString=(c,t)=>{for(var e=0,n="";!(e>=t/4);){var r=Wl[c+4*e>>2];if(0==r)break;if(++e,r>=65536){var o=r-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(r)}return n},stringToUTF32=(c,t,e)=>{if(void 0===e&&(e=2147483647),e<4)return 0;for(var n=t,r=n+e-4,o=0;o<c.length;++o){var u=c.charCodeAt(o);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&c.charCodeAt(++o);if(Wl[t>>2]=u,(t+=4)+4>r)break}return Wl[t>>2]=0,t-n},lengthBytesUTF32=c=>{for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&++e,t+=4}return t};var tZ;tZ=()=>performance.now();var eZ={},getEnvStrings=()=>{if(!getEnvStrings.strings){var c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:Zl||"./this.program"};for(var t in eZ)void 0===eZ[t]?delete c[t]:c[t]=eZ[t];var e=[];for(var t in c)e.push(`${t}=${c[t]}`);getEnvStrings.strings=e}return getEnvStrings.strings},keepRuntimeAlive=()=>vl||!1,_exit=(c,t)=>{var e;c,keepRuntimeAlive()||(___funcs_on_exit(),callRuntimeCallbacks(ul),Bl.quit(),zl.shutdown(),!0),e=c,keepRuntimeAlive()||(r.onExit&&r.onExit(e),Vl=!0),quit_(e,new ExitStatus(e))};var mZ,bZ,nZ,isLeapYear=c=>c%4==0&&(c%100!=0||c%400==0),aZ=[31,29,31,30,31,30,31,31,30,31,30,31],XZ=[31,28,31,30,31,30,31,31,30,31,30,31],_strftime=(c,t,e,n)=>{var r=rl[n+40>>2],o={tm_sec:Wl[n>>2],tm_min:Wl[n+4>>2],tm_hour:Wl[n+8>>2],tm_mday:Wl[n+12>>2],tm_mon:Wl[n+16>>2],tm_year:Wl[n+20>>2],tm_wday:Wl[n+24>>2],tm_yday:Wl[n+28>>2],tm_isdst:Wl[n+32>>2],tm_gmtoff:Wl[n+36>>2],tm_zone:r?UTF8ToString(r):""},u=UTF8ToString(e),M={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ll in M)u=u.replace(new RegExp(ll,"g"),M[ll]);var Zl=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],cl=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(c,t,e){for(var n="number"==typeof c?c.toString():c||"";n.length<t;)n=e[0]+n;return n}function leadingNulls(c,t){return leadingSomething(c,t,"0")}function compareByDay(c,t){function sgn(c){return c<0?-1:c>0?1:0}var e;return 0===(e=sgn(c.getFullYear()-t.getFullYear()))&&0===(e=sgn(c.getMonth()-t.getMonth()))&&(e=sgn(c.getDate()-t.getDate())),e}function getFirstWeekStartDate(c){switch(c.getDay()){case 0:return new Date(c.getFullYear()-1,11,29);case 1:return c;case 2:return new Date(c.getFullYear(),0,3);case 3:return new Date(c.getFullYear(),0,2);case 4:return new Date(c.getFullYear(),0,1);case 5:return new Date(c.getFullYear()-1,11,31);case 6:return new Date(c.getFullYear()-1,11,30)}}function getWeekBasedYear(c){var t=((c,t)=>{for(var e=new Date(c.getTime());t>0;){var n=isLeapYear(e.getFullYear()),r=e.getMonth(),o=(n?aZ:XZ)[r];if(!(t>o-e.getDate()))return e.setDate(e.getDate()+t),e;t-=o-e.getDate()+1,e.setDate(1),r<11?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e})(new Date(c.tm_year+1900,0,1),c.tm_yday),e=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),r=getFirstWeekStartDate(e),o=getFirstWeekStartDate(n);return compareByDay(r,t)<=0?compareByDay(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var dl={"%a":c=>Zl[c.tm_wday].substring(0,3),"%A":c=>Zl[c.tm_wday],"%b":c=>cl[c.tm_mon].substring(0,3),"%B":c=>cl[c.tm_mon],"%C":c=>leadingNulls((c.tm_year+1900)/100|0,2),"%d":c=>leadingNulls(c.tm_mday,2),"%e":c=>leadingSomething(c.tm_mday,2," "),"%g":c=>getWeekBasedYear(c).toString().substring(2),"%G":c=>getWeekBasedYear(c),"%H":c=>leadingNulls(c.tm_hour,2),"%I":c=>{var t=c.tm_hour;return 0==t?t=12:t>12&&(t-=12),leadingNulls(t,2)},"%j":c=>leadingNulls(c.tm_mday+((c,t)=>{for(var e=0,n=0;n<=t;e+=c[n++]);return e})(isLeapYear(c.tm_year+1900)?aZ:XZ,c.tm_mon-1),3),"%m":c=>leadingNulls(c.tm_mon+1,2),"%M":c=>leadingNulls(c.tm_min,2),"%n":()=>"\n","%p":c=>c.tm_hour>=0&&c.tm_hour<12?"AM":"PM","%S":c=>leadingNulls(c.tm_sec,2),"%t":()=>"\t","%u":c=>c.tm_wday||7,"%U":c=>{var t=c.tm_yday+7-c.tm_wday;return leadingNulls(Math.floor(t/7),2)},"%V":c=>{var t=Math.floor((c.tm_yday+7-(c.tm_wday+6)%7)/7);if((c.tm_wday+371-c.tm_yday-2)%7<=2&&t++,t){if(53==t){var e=(c.tm_wday+371-c.tm_yday)%7;4==e||3==e&&isLeapYear(c.tm_year)||(t=1)}}else{t=52;var n=(c.tm_wday+7-c.tm_yday-1)%7;(4==n||5==n&&isLeapYear(c.tm_year%400-1))&&t++}return leadingNulls(t,2)},"%w":c=>c.tm_wday,"%W":c=>{var t=c.tm_yday+7-(c.tm_wday+6)%7;return leadingNulls(Math.floor(t/7),2)},"%y":c=>(c.tm_year+1900).toString().substring(2),"%Y":c=>c.tm_year+1900,"%z":c=>{var t=c.tm_gmtoff,e=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(e?"+":"-")+String("0000"+t).slice(-4)},"%Z":c=>c.tm_zone,"%%":()=>"%"};for(var ll in u=u.replace(/%%/g,"\0\0"),dl)u.includes(ll)&&(u=u.replace(new RegExp(ll,"g"),dl[ll](o)));var tl,el,ml=intArrayFromString(u=u.replace(/\0\0/g,"%"),!1);return ml.length>t?0:(tl=ml,el=c,al.set(tl,el),ml.length-1)},FSNode=function(c,t,e,n){c||(c=this),this.parent=c,this.mount=c.mount,this.mounted=null,this.id=Bl.nextInode++,this.name=t,this.mode=e,this.node_ops={},this.stream_ops={},this.rdev=n},GZ=365,iZ=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&GZ)===GZ},set:function(c){c?this.mode|=GZ:this.mode&=-366}},write:{get:function(){return(this.mode&iZ)===iZ},set:function(c){c?this.mode|=iZ:this.mode&=-147}},isFolder:{get:function(){return Bl.isDir(this.mode)}},isDevice:{get:function(){return Bl.isChrdev(this.mode)}}}),Bl.FSNode=FSNode,Bl.createPreloadedFile=(c,t,e,n,r,o,u,M,ll,Zl)=>{var cl=t?Kl.resolve(gl.join2(c,t)):c;function processData(e){function finish(e){Zl&&Zl(),M||((c,t,e,n,r,o)=>{Bl.createDataFile(c,t,e,n,r,o)})(c,t,e,n,r,ll),o&&o(),removeRunDependency()}((c,t,e,n)=>{"undefined"!=typeof Browser&&Browser.init();var r=!1;return xl.forEach((o=>{r||o.canHandle(t)&&(o.handle(c,t,e,n),r=!0)})),r})(e,cl,finish,(()=>{u&&u(),removeRunDependency()}))||finish(e)}addRunDependency(),"string"==typeof e?asyncLoad(e,(c=>processData(c)),u):processData(e)},Bl.staticInit(),(()=>{for(var c=new Array(256),t=0;t<256;++t)c[t]=String.fromCharCode(t);Ll=c})(),Cl=r.BindingError=class extends Error{constructor(c){super(c),this.name="BindingError"}},Ml=r.InternalError=class extends Error{constructor(c){super(c),this.name="InternalError"}},Object.assign(ClassHandle.prototype,{isAliasOf(c){if(!(this instanceof ClassHandle))return!1;if(!(c instanceof ClassHandle))return!1;var t=this.$$.ptrType.registeredClass,e=this.$$.ptr;c.$$=c.$$;for(var n=c.$$.ptrType.registeredClass,r=c.$$.ptr;t.baseClass;)e=t.upcast(e),t=t.baseClass;for(;n.baseClass;)r=n.upcast(r),n=n.baseClass;return t===n&&e===r},clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var c,t=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(c=this.$$,{count:c.count,deleteScheduled:c.deleteScheduled,preservePointerOnDelete:c.preservePointerOnDelete,ptr:c.ptr,ptrType:c.ptrType,smartPtr:c.smartPtr,smartPtrType:c.smartPtrType})}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t},delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},isDeleted(){return!this.$$.ptr},deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),Al.push(this),1===Al.length&&Ql&&Ql(flushPendingDeletes),this.$$.deleteScheduled=!0,this}}),r.getInheritedInstanceCount=getInheritedInstanceCount,r.getLiveInheritedInstances=getLiveInheritedInstances,r.flushPendingDeletes=flushPendingDeletes,r.setDelayFunction=setDelayFunction,Object.assign(RegisteredPointer.prototype,{getPointee(c){return this.rawGetPointee&&(c=this.rawGetPointee(c)),c},destructor(c){this.rawDestructor&&this.rawDestructor(c)},argPackAdvance:8,readValueFromPointer:readPointer,deleteObject(c){null!==c&&c.delete()},fromWireType:RegisteredPointer_fromWireType}),ql=r.UnboundTypeError=(mZ=Error,(nZ=createNamedFunction(bZ="UnboundTypeError",(function(c){this.name=bZ,this.message=c;var t=new Error(c).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}))).prototype=Object.create(mZ.prototype),nZ.prototype.constructor=nZ,nZ.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},nZ),Object.assign(HandleAllocator.prototype,{get(c){return this.allocated[c]},has(c){return void 0!==this.allocated[c]},allocate(c){var t=this.freelist.pop()||this.allocated.length;return this.allocated[t]=c,t},free(c){this.allocated[c]=void 0,this.freelist.push(c)}}),ZZ.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),ZZ.reserved=ZZ.allocated.length,r.count_emval_handles=count_emval_handles;var WZ,rZ={a:(c,t,e,n)=>{abort(`Assertion failed: ${UTF8ToString(c)}, at: `+[t?UTF8ToString(t):"unknown filename",e,n?UTF8ToString(n):"unknown function"])},t:c=>{var t=new ExceptionInfo(c);return t.get_caught()||(t.set_caught(!0)),t.set_rethrown(!1),Ul.push(t),___cxa_increment_exception_refcount(t.excPtr),t.get_exception_ptr()},s:()=>{_setThrew(0,0);var c=Ul.pop();___cxa_decrement_exception_refcount(c.excPtr),Tl=0},c:()=>findMatchingCatch([]),j:c=>findMatchingCatch([c]),oa:()=>{var c=Ul.pop();c||abort("no exception to throw");var t=c.excPtr;throw c.get_rethrown()||(Ul.push(c),c.set_rethrown(!0),c.set_caught(!1)),Tl=t},m:(c,t,e)=>{throw new ExceptionInfo(c).init(t,e),Tl=c},g:c=>{throw Tl||(Tl=c),Tl},ea:function(c,t){try{var e=wl.getStreamFromFD(c);return wl.doStat(Bl.stat,e.path,t)}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},R:function(c,t,e){var n=convertI32PairToI53Checked(t,e);try{return isNaN(n)?61:(Bl.ftruncate(c,n),0)}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},ca:function(c,t,e,n){try{t=wl.getStr(t);var r=256&n,o=4096&n;return n&=-6401,t=wl.calculateAt(c,t,o),wl.doStat(r?Bl.lstat:Bl.stat,t,e)}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},fa:function(c,t,e,n){wl.varargs=n;try{t=wl.getStr(t),t=wl.calculateAt(c,t);var r=n?wl.get():0;return Bl.open(t,e,r).fd}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},_:function(c,t,e,n){try{if(t=wl.getStr(t),t=wl.calculateAt(c,t),n<=0)return-28;var r=Bl.readlink(t),o=Math.min(n,lengthBytesUTF8(r)),u=al[e+o];return stringToUTF8(r,e,n+1),al[e+o]=u,o}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},Z:function(c,t,e,n){try{return t=wl.getStr(t),n=wl.getStr(n),t=wl.calculateAt(c,t),n=wl.calculateAt(e,n),Bl.rename(t,n),0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},da:function(c,t){try{return c=wl.getStr(c),wl.doStat(Bl.stat,c,t)}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},X:function(c,t,e){try{return t=wl.getStr(t),t=wl.calculateAt(c,t),0===e?Bl.unlink(t):512===e?Bl.rmdir(t):abort("Invalid flags passed to unlinkat"),0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},S:(c,t,e,n,r)=>{},ja:(c,t,e,n)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return!!c},toWireType:function(c,t){return t?e:n},argPackAdvance:8,readValueFromPointer:function(c){return this.fromWireType(Xl[c])},destructorFunction:null})},N:(c,t,e,n,o,u,M,ll,Zl,cl,dl,tl,el)=>{dl=readLatin1String(dl),u=embind__requireFunction(o,u),ll&&(ll=embind__requireFunction(M,ll)),cl&&(cl=embind__requireFunction(Zl,cl)),el=embind__requireFunction(tl,el);var ml=(c=>{if(void 0===c)return"_unknown";var t=(c=c.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return t>=48&&t<=57?`_${c}`:c})(dl);((c,t,e)=>{r.hasOwnProperty(c)?((void 0===e||void 0!==r[c].overloadTable&&void 0!==r[c].overloadTable[e])&&throwBindingError(`Cannot register public name '${c}' twice`),ensureOverloadTable(r,c,c),r.hasOwnProperty(e)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${e})!`),r[c].overloadTable[e]=t):(r[c]=t,void 0!==e&&(r[c].numArguments=e))})(ml,(function(){throwUnboundTypeError(`Cannot construct ${dl} due to unbound types`,[n])})),whenDependentTypesAreResolved([c,t,e],n?[n]:[],(function(t){var e,o;t=t[0],o=n?(e=t.registeredClass).instancePrototype:ClassHandle.prototype;var M=createNamedFunction(dl,(function(){if(Object.getPrototypeOf(this)!==Zl)throw new Cl("Use 'new' to construct "+dl);if(void 0===tl.constructor_body)throw new Cl(dl+" has no accessible constructor");var c=tl.constructor_body[arguments.length];if(void 0===c)throw new Cl(`Tried to invoke ctor of ${dl} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(tl.constructor_body).toString()}) parameters instead!`);return c.apply(this,arguments)})),Zl=Object.create(o,{constructor:{value:M}});M.prototype=Zl;var tl=new RegisteredClass(dl,M,Zl,el,e,u,ll,cl);tl.baseClass&&(void 0===tl.baseClass.__derivedClasses&&(tl.baseClass.__derivedClasses=[]),tl.baseClass.__derivedClasses.push(tl));var bl=new RegisteredPointer(dl,tl,!0,!1,!1),nl=new RegisteredPointer(dl+"*",tl,!1,!1,!1),al=new RegisteredPointer(dl+" const*",tl,!1,!0,!1);return Dl[c]={pointerType:nl,constPointerType:al},((c,t,e)=>{r.hasOwnProperty(c)||throwInternalError("Replacing nonexistant public symbol"),void 0!==r[c].overloadTable&&void 0!==e?r[c].overloadTable[e]=t:(r[c]=t,r[c].argCount=e)})(ml,M),[bl,nl,al]}))},M:(c,t,e,n,r,o)=>{var u=heap32VectorToArray(t,e);r=embind__requireFunction(n,r),whenDependentTypesAreResolved([],[c],(function(c){var e=`constructor ${(c=c[0]).name}`;if(void 0===c.registeredClass.constructor_body&&(c.registeredClass.constructor_body=[]),void 0!==c.registeredClass.constructor_body[t-1])throw new Cl(`Cannot register multiple constructors with identical number of parameters (${t-1}) for class '${c.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return c.registeredClass.constructor_body[t-1]=()=>{throwUnboundTypeError(`Cannot construct ${c.name} due to unbound types`,u)},whenDependentTypesAreResolved([],u,(n=>(n.splice(1,0,null),c.registeredClass.constructor_body[t-1]=craftInvokerFunction(e,n,null,r,o),[]))),[]}))},l:(c,t,e,n,r,o,u,M,ll)=>{var Zl=heap32VectorToArray(e,n);t=(c=>{const t=(c=c.trim()).indexOf("(");return-1!==t?c.substr(0,t):c})(t=readLatin1String(t)),o=embind__requireFunction(r,o),whenDependentTypesAreResolved([],[c],(function(c){var n=`${(c=c[0]).name}.${t}`;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${n} due to unbound types`,Zl)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]),M&&c.registeredClass.pureVirtualFunctions.push(t);var r=c.registeredClass.instancePrototype,cl=r[t];return void 0===cl||void 0===cl.overloadTable&&cl.className!==c.name&&cl.argCount===e-2?(unboundTypesHandler.argCount=e-2,unboundTypesHandler.className=c.name,r[t]=unboundTypesHandler):(ensureOverloadTable(r,t,n),r[t].overloadTable[e-2]=unboundTypesHandler),whenDependentTypesAreResolved([],Zl,(function(M){var Zl=craftInvokerFunction(n,M,c,o,u,ll);return void 0===r[t].overloadTable?(Zl.argCount=e-2,r[t]=Zl):r[t].overloadTable[e-2]=Zl,[]})),[]}))},ia:(c,t)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:c=>{var t=cZ.toValue(c);return __emval_decref(c),t},toWireType:(c,t)=>cZ.toHandle(t),argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},H:(c,t,e)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:c=>c,toWireType:(c,t)=>t,argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(t,e),destructorFunction:null})},o:(c,t,e,n,r)=>{t=readLatin1String(t),-1===r&&(r=4294967295);var fromWireType=c=>c;if(0===n){var o=32-8*e;fromWireType=c=>c<<o>>>o}var u=t.includes("unsigned");registerType(c,{name:t,fromWireType:fromWireType,toWireType:u?function(c,t){return this.name,t>>>0}:function(c,t){return this.name,t},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(t,e,0!==n),destructorFunction:null})},k:(c,t,e)=>{var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];function decodeMemoryView(c){var t=rl[c>>2],e=rl[c+4>>2];return new n(al.buffer,e,t)}registerType(c,{name:e=readLatin1String(e),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},G:(c,t)=>{var e="std::string"===(t=readLatin1String(t));registerType(c,{name:t,fromWireType(c){var t,n=rl[c>>2],r=c+4;if(e)for(var o=r,u=0;u<=n;++u){var M=r+u;if(u==n||0==Xl[M]){var ll=UTF8ToString(o,M-o);void 0===t?t=ll:(t+=String.fromCharCode(0),t+=ll),o=M+1}}else{var Zl=new Array(n);for(u=0;u<n;++u)Zl[u]=String.fromCharCode(Xl[r+u]);t=Zl.join("")}return _free(c),t},toWireType(c,t){var n;t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r="string"==typeof t;r||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),n=e&&r?lengthBytesUTF8(t):t.length;var o=_malloc(4+n+1),u=o+4;if(rl[o>>2]=n,e&&r)stringToUTF8(t,u,n+1);else if(r)for(var M=0;M<n;++M){var ll=t.charCodeAt(M);ll>255&&(_free(u),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),Xl[u+M]=ll}else for(M=0;M<n;++M)Xl[u+M]=t[M];return null!==c&&c.push(_free,o),o},argPackAdvance:8,readValueFromPointer:readPointer,destructorFunction(c){_free(c)}})},z:(c,t,e)=>{var n,r,o,u,M;e=readLatin1String(e),2===t?(n=UTF16ToString,r=stringToUTF16,u=lengthBytesUTF16,o=()=>il,M=1):4===t&&(n=UTF32ToString,r=stringToUTF32,u=lengthBytesUTF32,o=()=>rl,M=2),registerType(c,{name:e,fromWireType:c=>{for(var e,r=rl[c>>2],u=o(),ll=c+4,Zl=0;Zl<=r;++Zl){var cl=c+4+Zl*t;if(Zl==r||0==u[cl>>M]){var dl=n(ll,cl-ll);void 0===e?e=dl:(e+=String.fromCharCode(0),e+=dl),ll=cl+t}}return _free(c),e},toWireType:(c,n)=>{"string"!=typeof n&&throwBindingError(`Cannot pass non-string to C++ string type ${e}`);var o=u(n),ll=_malloc(4+o+t);return rl[ll>>2]=o>>M,r(n,ll+4,o+t),null!==c&&c.push(_free,ll),ll},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction(c){_free(c)}})},ka:(c,t)=>{registerType(c,{isVoid:!0,name:t=readLatin1String(t),argPackAdvance:0,fromWireType:()=>{},toWireType:(c,t)=>{}})},ga:()=>1,sa:__emval_decref,ta:c=>{c>4&&(ZZ.get(c).refcount+=1)},q:(c,t)=>{var e,n,r;n="_emval_take_value",void 0===(r=jl[e=c])&&throwBindingError(n+" has unknown type "+getTypeName(e));var o=(c=r).readValueFromPointer(t);return cZ.toHandle(o)},O:function(c,t,e,n,r,o,u,M){var ll=convertI32PairToI53Checked(r,o);try{if(isNaN(ll))return 61;var Zl=wl.getStreamFromFD(n),cl=Bl.mmap(Zl,c,ll,t,e),dl=cl.ptr;return Wl[u>>2]=cl.allocated,rl[M>>2]=dl,0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},P:function(c,t,e,n,r,o,u){var M=convertI32PairToI53Checked(o,u);try{if(isNaN(M))return 61;var ll=wl.getStreamFromFD(r);2&e&&wl.doMsync(c,ll,t,n,M),Bl.munmap(ll)}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return-c.errno}},b:()=>{abort("")},E:()=>Date.now(),Y:()=>Xl.length,w:tZ,ha:(c,t,e)=>Xl.copyWithin(c,t,t+e),W:c=>{Xl.length;abort("OOM")},$:(c,t)=>{var e=0;return getEnvStrings().forEach(((n,r)=>{var o=t+e;rl[c+4*r>>2]=o,((c,t)=>{for(var e=0;e<c.length;++e)al[t++>>0]=c.charCodeAt(e);al[t>>0]=0})(n,o),e+=n.length+1})),0},aa:(c,t)=>{var e=getEnvStrings();rl[c>>2]=e.length;var n=0;return e.forEach((c=>n+=c.length+1)),rl[t>>2]=n,0},la:_exit,F:function(c){try{var t=wl.getStreamFromFD(c);return Bl.close(t),0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return c.errno}},D:function(c,t,e,n){try{var r=((c,t,e,n)=>{for(var r=0,o=0;o<e;o++){var u=rl[t>>2],M=rl[t+4>>2];t+=8;var ll=Bl.read(c,al,u,M,n);if(ll<0)return-1;if(r+=ll,ll<M)break;void 0!==n&&(n+=ll)}return r})(wl.getStreamFromFD(c),t,e);return rl[n>>2]=r,0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return c.errno}},Q:function(c,t,e,n,r){var o=convertI32PairToI53Checked(t,e);try{if(isNaN(o))return 61;var u=wl.getStreamFromFD(c);return Bl.llseek(u,o,n),Hl=[u.position>>>0,(Nl=u.position,+Math.abs(Nl)>=1?Nl>0?+Math.floor(Nl/4294967296)>>>0:~~+Math.ceil((Nl-+(~~Nl>>>0))/4294967296)>>>0:0)],Wl[r>>2]=Hl[0],Wl[r+4>>2]=Hl[1],u.getdents&&0===o&&0===n&&(u.getdents=null),0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return c.errno}},ba:function(c){try{var t=wl.getStreamFromFD(c);return t.stream_ops&&t.stream_ops.fsync?t.stream_ops.fsync(t):0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return c.errno}},y:function(c,t,e,n){try{var r=((c,t,e,n)=>{for(var r=0,o=0;o<e;o++){var u=rl[t>>2],M=rl[t+4>>2];t+=8;var ll=Bl.write(c,al,u,M,n);if(ll<0)return-1;r+=ll,void 0!==n&&(n+=ll)}return r})(wl.getStreamFromFD(c),t,e);return rl[n>>2]=r,0}catch(c){if(void 0===Bl||"ErrnoError"!==c.name)throw c;return c.errno}},U:(c,t)=>(randomFill(Xl.subarray(c,c+t)),0),ra:function(c,t){var e=stackSave();try{return getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},C:function(c){var t=stackSave();try{return getWasmTableEntry(c)()}catch(c){if(stackRestore(t),c!==c+0)throw c;_setThrew(1,0)}},f:function(c,t){var e=stackSave();try{return getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},na:function(c,t,e,n,r){var o=stackSave();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},qa:function(c,t,e){var n=stackSave();try{return getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},d:function(c,t,e){var n=stackSave();try{return getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},e:function(c,t,e,n){var r=stackSave();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},B:function(c,t,e,n,r){var o=stackSave();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},v:function(c,t,e,n,r,o){var u=stackSave();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(stackRestore(u),c!==c+0)throw c;_setThrew(1,0)}},K:function(c,t,e,n,r,o,u){var M=stackSave();try{return getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(stackRestore(M),c!==c+0)throw c;_setThrew(1,0)}},T:function(c,t,e,n){var r=stackSave();try{return VZ(c,t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},p:function(c){var t=stackSave();try{getWasmTableEntry(c)()}catch(c){if(stackRestore(t),c!==c+0)throw c;_setThrew(1,0)}},i:function(c,t){var e=stackSave();try{getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},h:function(c,t,e){var n=stackSave();try{getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},r:function(c,t,e,n){var r=stackSave();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},A:function(c,t,e,n,r){var o=stackSave();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},n:function(c,t,e,n){var r=stackSave();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},pa:function(c,t,e,n,r,o,u,M){var ll=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(stackRestore(ll),c!==c+0)throw c;_setThrew(1,0)}},L:function(c,t,e,n,r){var o=stackSave();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},I:function(c,t,e,n,r,o,u){var M=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(stackRestore(M),c!==c+0)throw c;_setThrew(1,0)}},J:function(c,t,e,n,r,o){var u=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(stackRestore(u),c!==c+0)throw c;_setThrew(1,0)}},u:function(c,t,e,n,r,o,u,M,ll,Zl){var cl=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,Zl)}catch(c){if(stackRestore(cl),c!==c+0)throw c;_setThrew(1,0)}},x:function(c,t,e,n,r,o,u,M,ll){var Zl=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll)}catch(c){if(stackRestore(Zl),c!==c+0)throw c;_setThrew(1,0)}},V:(c,t,e,n,r)=>_strftime(c,t,e,n),ma:function(c,t,e,n){const r=$l.length,o=new Uint8Array(Xl.slice(c+t,c+e));try{var u=new WebAssembly.Module(o),M=new WebAssembly.Instance(u,{env:{memory:ml}});for(var ll in M.exports){var Zl=M.exports[ll];addFunction(Zl)}return r<$l.length?r:n}catch(c){return console.log(c),n}}},oZ=function(){var c,t,e,o,u={a:rZ};function receiveInstance(c,t){var e;return oZ=c.exports,ml=oZ.ua,function(){var c=ml.buffer;r.HEAP8=al=new Int8Array(c),r.HEAP16=Gl=new Int16Array(c),r.HEAPU8=Xl=new Uint8Array(c),r.HEAPU16=il=new Uint16Array(c),r.HEAP32=Wl=new Int32Array(c),r.HEAPU32=rl=new Uint32Array(c),r.HEAPF32=ol=new Float32Array(c),r.HEAPF64=hl=new Float64Array(c)}(),$l=oZ.wa,e=oZ.va,sl.unshift(e),removeRunDependency(),oZ}if(addRunDependency(),r.instantiateWasm)try{return r.instantiateWasm(u,receiveInstance)}catch(c){nl(`Module.instantiateWasm callback failed with error: ${c}`),n(c)}return(c=el,t=Jl,e=u,o=function(c){receiveInstance(c.instance)},c||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(t)||"function"!=typeof fetch?instantiateArrayBuffer(t,e,o):fetch(t,{credentials:"same-origin"}).then((c=>WebAssembly.instantiateStreaming(c,e).then(o,(function(c){return nl(`wasm streaming compile failed: ${c}`),nl("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(t,e,o)}))))).catch(n),{}}(),_malloc=c=>(_malloc=oZ.xa)(c),_free=c=>(_free=oZ.ya)(c),___getTypeName=c=>(___getTypeName=oZ.Aa)(c),___funcs_on_exit=()=>(___funcs_on_exit=oZ.Ba)(),hZ=r._fflush=c=>(hZ=r._fflush=oZ.Ca)(c),_emscripten_builtin_memalign=(c,t)=>(_emscripten_builtin_memalign=oZ.Da)(c,t),_setThrew=(c,t)=>(_setThrew=oZ.Ea)(c,t),setTempRet0=c=>(setTempRet0=oZ.Fa)(c),stackSave=()=>(stackSave=oZ.Ga)(),stackRestore=c=>(stackRestore=oZ.Ha)(c),___cxa_decrement_exception_refcount=c=>(___cxa_decrement_exception_refcount=oZ.Ia)(c),___cxa_increment_exception_refcount=c=>(___cxa_increment_exception_refcount=oZ.Ja)(c),___cxa_can_catch=(c,t,e)=>(___cxa_can_catch=oZ.Ka)(c,t,e),___cxa_is_pointer_type=c=>(___cxa_is_pointer_type=oZ.La)(c),VZ=(r.dynCall_viijj=(c,t,e,n,o,u,M)=>(r.dynCall_viijj=oZ.Ma)(c,t,e,n,o,u,M),r.dynCall_viiijjj=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_viiijjj=oZ.Na)(c,t,e,n,o,u,M,ll,Zl,cl),r.dynCall_iiiij=(c,t,e,n,o,u)=>(r.dynCall_iiiij=oZ.Oa)(c,t,e,n,o,u),r.dynCall_jii=(c,t,e)=>(r.dynCall_jii=oZ.Pa)(c,t,e),r.dynCall_jjj=(c,t,e,n,o)=>(r.dynCall_jjj=oZ.Qa)(c,t,e,n,o),r.dynCall_iiiijj=(c,t,e,n,o,u,M,ll)=>(r.dynCall_iiiijj=oZ.Ra)(c,t,e,n,o,u,M,ll),r.dynCall_viijji=(c,t,e,n,o,u,M,ll)=>(r.dynCall_viijji=oZ.Sa)(c,t,e,n,o,u,M,ll),r.dynCall_iiijj=(c,t,e,n,o,u,M)=>(r.dynCall_iiijj=oZ.Ta)(c,t,e,n,o,u,M),r.dynCall_viijjj=(c,t,e,n,o,u,M,ll,Zl)=>(r.dynCall_viijjj=oZ.Ua)(c,t,e,n,o,u,M,ll,Zl),r.dynCall_iij=(c,t,e,n)=>(VZ=r.dynCall_iij=oZ.Va)(c,t,e,n));r.dynCall_iijjiiii=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_iijjiiii=oZ.Wa)(c,t,e,n,o,u,M,ll,Zl,cl),r.dynCall_jiji=(c,t,e,n,o)=>(r.dynCall_jiji=oZ.Xa)(c,t,e,n,o),r.dynCall_viijii=(c,t,e,n,o,u,M)=>(r.dynCall_viijii=oZ.Ya)(c,t,e,n,o,u,M),r.dynCall_iiiiij=(c,t,e,n,o,u,M)=>(r.dynCall_iiiiij=oZ.Za)(c,t,e,n,o,u,M),r.dynCall_iiiiijj=(c,t,e,n,o,u,M,ll,Zl)=>(r.dynCall_iiiiijj=oZ._a)(c,t,e,n,o,u,M,ll,Zl),r.dynCall_iiiiiijj=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_iiiiiijj=oZ.$a)(c,t,e,n,o,u,M,ll,Zl,cl),r.___start_em_js=261460,r.___stop_em_js=262072;function run(){function doRun(){WZ||(WZ=!0,r.calledRun=!0,Vl||(!0,r.noFSInit||Bl.init.initialized||Bl.init(),Bl.ignorePermissions=!1,zl.init(),callRuntimeCallbacks(sl),e(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)c=r.postRun.shift(),Rl.unshift(c);var c;callRuntimeCallbacks(Rl)}()))}pl>0||(!function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)c=r.preRun.shift(),yl.unshift(c);var c;callRuntimeCallbacks(yl)}(),pl>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),doRun()}),1)):doRun()))}if(Fl=function runCaller(){WZ||run(),WZ||(Fl=runCaller)},r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return run(),t.ready}})();let createWasmMultiInstance;createWasmMonoInstance=Module;Module=(()=>{var c=location.href;return function(t={}){var e,n,r=t;r.ready=new Promise(((c,t)=>{e=c,n=t}));var o,u,M,ll=Object.assign({},r),Zl="./this.program",quit_=(c,t)=>{throw t},cl="object"==typeof window,dl="function"==typeof importScripts,tl="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,el=r.ENVIRONMENT_IS_PTHREAD||!1,ml="";function locateFile(c){return r.locateFile?r.locateFile(c,ml):ml+c}(cl||dl)&&(dl?ml=self.location.href:"undefined"!=typeof document&&document.currentScript&&(ml=document.currentScript.src),c&&(ml=c),ml=0!==ml.indexOf("blob:")?ml.substr(0,ml.replace(/[?#].*/,"").lastIndexOf("/")+1):"",o=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.send(null),t.responseText},dl&&(M=c=>{var t=new XMLHttpRequest;return t.open("GET",c,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),u=(c,t,e)=>{var n=new XMLHttpRequest;n.open("GET",c,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):e()},n.onerror=e,n.send(null)});var bl,nl,al,Xl=r.print||console.log.bind(console),Gl=r.printErr||console.error.bind(console);Object.assign(r,ll),ll=null,r.arguments&&r.arguments,r.thisProgram&&(Zl=r.thisProgram),r.quit&&(quit_=r.quit),r.wasmBinary&&(bl=r.wasmBinary),"object"!=typeof WebAssembly&&abort("no native wasm support detected");var il,Wl,rl,ol,hl,Vl,yl,sl,ul,Rl=!1;var pl=r.INITIAL_MEMORY||134217728;if(el)nl=r.wasmMemory;else if(r.wasmMemory)nl=r.wasmMemory;else if(!((nl=new WebAssembly.Memory({initial:pl/65536,maximum:pl/65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw Gl("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),tl&&Gl("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)"),Error("bad memory");!function(){var c=nl.buffer;r.HEAP8=Wl=new Int8Array(c),r.HEAP16=ol=new Int16Array(c),r.HEAPU8=rl=new Uint8Array(c),r.HEAPU16=hl=new Uint16Array(c),r.HEAP32=Vl=new Int32Array(c),r.HEAPU32=yl=new Uint32Array(c),r.HEAPF32=sl=new Float32Array(c),r.HEAPF64=ul=new Float64Array(c)}(),pl=nl.buffer.byteLength;var Yl=[],Fl=[],Jl=[],Il=[],Nl=!1;function initRuntime(){!0,el||(r.noFSInit||Cl.init.initialized||Cl.init(),Cl.ignorePermissions=!1,Bl.init(),callRuntimeCallbacks(Fl))}function addOnPreRun(c){Yl.unshift(c)}var Hl=0,vl=null,kl=null;function addRunDependency(c){Hl++,r.monitorRunDependencies&&r.monitorRunDependencies(Hl)}function removeRunDependency(c){if(Hl--,r.monitorRunDependencies&&r.monitorRunDependencies(Hl),0==Hl&&(null!==vl&&(clearInterval(vl),vl=null),kl)){var t=kl;kl=null,t()}}function abort(c){r.onAbort&&r.onAbort(c),Gl(c="Aborted("+c+")"),Rl=!0,il=1,c+=". Build with -sASSERTIONS for more info.";var t=new WebAssembly.RuntimeError(c);throw n(t),t}var Ul,Tl,gl,isDataURI=c=>c.startsWith("data:application/octet-stream;base64,");function getBinarySync(c){if(c==Ul&&bl)return new Uint8Array(bl);if(M)return M(c);throw"both async and sync fetching of the wasm failed"}function instantiateArrayBuffer(c,t,e){return function(c){return bl||!cl&&!dl||"function"!=typeof fetch?Promise.resolve().then((()=>getBinarySync(c))):fetch(c,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at '"+c+"'";return t.arrayBuffer()})).catch((()=>getBinarySync(c)))}(c).then((c=>WebAssembly.instantiate(c,t))).then((c=>c)).then(e,(c=>{Gl(`failed to asynchronously prepare wasm: ${c}`),abort(c)}))}function ExitStatus(c){this.name="ExitStatus",this.message=`Program terminated with exit(${c})`,this.status=c}r.locateFile?isDataURI(Ul="main-bin-multi.wasm")||(Ul=locateFile(Ul)):Ul=new URL("main-bin-multi.wasm",location.href).href;var terminateWorker=c=>{c.terminate(),c.onmessage=c=>{}},cleanupThread=c=>{var t=Pl.pthreads[c];Pl.returnWorkerToPool(t)},spawnThread=c=>{var t=Pl.getNewWorker();if(!t)return 6;Pl.runningWorkers.push(t),Pl.pthreads[c.pthread_ptr]=t,t.pthread_ptr=c.pthread_ptr;var e={cmd:"run",start_routine:c.startRoutine,arg:c.arg,pthread_ptr:c.pthread_ptr};return t.postMessage(e,c.transferList),0},Kl=0,keepRuntimeAlive=()=>Ql||Kl>0,fl={isAbs:c=>"/"===c.charAt(0),splitPath:c=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(c).slice(1),normalizeArray:(c,t)=>{for(var e=0,n=c.length-1;n>=0;n--){var r=c[n];"."===r?c.splice(n,1):".."===r?(c.splice(n,1),e++):e&&(c.splice(n,1),e--)}if(t)for(;e;e--)c.unshift("..");return c},normalize:c=>{var t=fl.isAbs(c),e="/"===c.substr(-1);return c=fl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),c||t||(c="."),c&&e&&(c+="/"),(t?"/":"")+c},dirname:c=>{var t=fl.splitPath(c),e=t[0],n=t[1];return e||n?(n&&(n=n.substr(0,n.length-1)),e+n):"."},basename:c=>{if("/"===c)return"/";var t=(c=(c=fl.normalize(c)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?c:c.substr(t+1)},join:function(){var c=Array.prototype.slice.call(arguments);return fl.normalize(c.join("/"))},join2:(c,t)=>fl.normalize(c+"/"+t)},randomFill=c=>(randomFill=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return c=>(c.set(crypto.getRandomValues(new Uint8Array(c.byteLength))),c);abort("initRandomDevice")})())(c),zl={resolve:function(){for(var c="",t=!1,e=arguments.length-1;e>=-1&&!t;e--){var n=e>=0?arguments[e]:Cl.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";c=n+"/"+c,t=fl.isAbs(n)}return c=fl.normalizeArray(c.split("/").filter((c=>!!c)),!t).join("/"),(t?"/":"")+c||"."},relative:(c,t)=>{function trim(c){for(var t=0;t<c.length&&""===c[t];t++);for(var e=c.length-1;e>=0&&""===c[e];e--);return t>e?[]:c.slice(t,e-t+1)}c=zl.resolve(c).substr(1),t=zl.resolve(t).substr(1);for(var e=trim(c.split("/")),n=trim(t.split("/")),r=Math.min(e.length,n.length),o=r,u=0;u<r;u++)if(e[u]!==n[u]){o=u;break}var M=[];for(u=o;u<e.length;u++)M.push("..");return(M=M.concat(n.slice(o))).join("/")}},Sl="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,UTF8ArrayToString=(c,t,e)=>{for(var n=t+e,r=t;c[r]&&!(r>=n);)++r;if(r-t>16&&c.buffer&&Sl)return Sl.decode(c.buffer instanceof SharedArrayBuffer?c.slice(t,r):c.subarray(t,r));for(var o="";t<r;){var u=c[t++];if(128&u){var M=63&c[t++];if(192!=(224&u)){var ll=63&c[t++];if((u=224==(240&u)?(15&u)<<12|M<<6|ll:(7&u)<<18|M<<12|ll<<6|63&c[t++])<65536)o+=String.fromCharCode(u);else{var Zl=u-65536;o+=String.fromCharCode(55296|Zl>>10,56320|1023&Zl)}}else o+=String.fromCharCode((31&u)<<6|M)}else o+=String.fromCharCode(u)}return o},xl=[],lengthBytesUTF8=c=>{for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n<=127?t++:n<=2047?t+=2:n>=55296&&n<=57343?(t+=4,++e):t+=3}return t},stringToUTF8Array=(c,t,e,n)=>{if(!(n>0))return 0;for(var r=e,o=e+n-1,u=0;u<c.length;++u){var M=c.charCodeAt(u);if(M>=55296&&M<=57343)M=65536+((1023&M)<<10)|1023&c.charCodeAt(++u);if(M<=127){if(e>=o)break;t[e++]=M}else if(M<=2047){if(e+1>=o)break;t[e++]=192|M>>6,t[e++]=128|63&M}else if(M<=65535){if(e+2>=o)break;t[e++]=224|M>>12,t[e++]=128|M>>6&63,t[e++]=128|63&M}else{if(e+3>=o)break;t[e++]=240|M>>18,t[e++]=128|M>>12&63,t[e++]=128|M>>6&63,t[e++]=128|63&M}}return t[e]=0,e-r};function intArrayFromString(c,t,e){var n=e>0?e:lengthBytesUTF8(c)+1,r=new Array(n),o=stringToUTF8Array(c,r,0,r.length);return t&&(r.length=o),r}var Bl={ttys:[],init(){},shutdown(){},register(c,t){Bl.ttys[c]={input:[],output:[],ops:t},Cl.registerDevice(c,Bl.stream_ops)},stream_ops:{open(c){var t=Bl.ttys[c.node.rdev];if(!t)throw new Cl.ErrnoError(43);c.tty=t,c.seekable=!1},close(c){c.tty.ops.fsync(c.tty)},fsync(c){c.tty.ops.fsync(c.tty)},read(c,t,e,n,r){if(!c.tty||!c.tty.ops.get_char)throw new Cl.ErrnoError(60);for(var o=0,u=0;u<n;u++){var M;try{M=c.tty.ops.get_char(c.tty)}catch(c){throw new Cl.ErrnoError(29)}if(void 0===M&&0===o)throw new Cl.ErrnoError(6);if(null==M)break;o++,t[e+u]=M}return o&&(c.node.timestamp=Date.now()),o},write(c,t,e,n,r){if(!c.tty||!c.tty.ops.put_char)throw new Cl.ErrnoError(60);try{for(var o=0;o<n;o++)c.tty.ops.put_char(c.tty,t[e+o])}catch(c){throw new Cl.ErrnoError(29)}return n&&(c.node.timestamp=Date.now()),o}},default_tty_ops:{get_char:c=>(()=>{if(!xl.length){var c=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(c=window.prompt("Input: "))&&(c+="\n"):"function"==typeof readline&&null!==(c=readline())&&(c+="\n"),!c)return null;xl=intArrayFromString(c,!0)}return xl.shift()})(),put_char(c,t){null===t||10===t?(Xl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},fsync(c){c.output&&c.output.length>0&&(Xl(UTF8ArrayToString(c.output,0)),c.output=[])},ioctl_tcgets:c=>({c_iflag:25856,c_oflag:5,c_cflag:191,c_lflag:35387,c_cc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}),ioctl_tcsets:(c,t,e)=>0,ioctl_tiocgwinsz:c=>[24,80]},default_tty1_ops:{put_char(c,t){null===t||10===t?(Gl(UTF8ArrayToString(c.output,0)),c.output=[]):0!=t&&c.output.push(t)},fsync(c){c.output&&c.output.length>0&&(Gl(UTF8ArrayToString(c.output,0)),c.output=[])}}},mmapAlloc=c=>{c=((c,t)=>Math.ceil(c/t)*t)(c,65536);var t=IZ(65536,c);return t?((c,t)=>(rl.fill(0,c,c+t),c))(t,c):0},wl={ops_table:null,mount:c=>wl.createNode(null,"/",16895,0),createNode(c,t,e,n){if(Cl.isBlkdev(e)||Cl.isFIFO(e))throw new Cl.ErrnoError(63);wl.ops_table||(wl.ops_table={dir:{node:{getattr:wl.node_ops.getattr,setattr:wl.node_ops.setattr,lookup:wl.node_ops.lookup,mknod:wl.node_ops.mknod,rename:wl.node_ops.rename,unlink:wl.node_ops.unlink,rmdir:wl.node_ops.rmdir,readdir:wl.node_ops.readdir,symlink:wl.node_ops.symlink},stream:{llseek:wl.stream_ops.llseek}},file:{node:{getattr:wl.node_ops.getattr,setattr:wl.node_ops.setattr},stream:{llseek:wl.stream_ops.llseek,read:wl.stream_ops.read,write:wl.stream_ops.write,allocate:wl.stream_ops.allocate,mmap:wl.stream_ops.mmap,msync:wl.stream_ops.msync}},link:{node:{getattr:wl.node_ops.getattr,setattr:wl.node_ops.setattr,readlink:wl.node_ops.readlink},stream:{}},chrdev:{node:{getattr:wl.node_ops.getattr,setattr:wl.node_ops.setattr},stream:Cl.chrdev_stream_ops}});var r=Cl.createNode(c,t,e,n);return Cl.isDir(r.mode)?(r.node_ops=wl.ops_table.dir.node,r.stream_ops=wl.ops_table.dir.stream,r.contents={}):Cl.isFile(r.mode)?(r.node_ops=wl.ops_table.file.node,r.stream_ops=wl.ops_table.file.stream,r.usedBytes=0,r.contents=null):Cl.isLink(r.mode)?(r.node_ops=wl.ops_table.link.node,r.stream_ops=wl.ops_table.link.stream):Cl.isChrdev(r.mode)&&(r.node_ops=wl.ops_table.chrdev.node,r.stream_ops=wl.ops_table.chrdev.stream),r.timestamp=Date.now(),c&&(c.contents[t]=r,c.timestamp=r.timestamp),r},getFileDataAsTypedArray:c=>c.contents?c.contents.subarray?c.contents.subarray(0,c.usedBytes):new Uint8Array(c.contents):new Uint8Array(0),expandFileStorage(c,t){var e=c.contents?c.contents.length:0;if(!(e>=t)){t=Math.max(t,e*(e<1048576?2:1.125)>>>0),0!=e&&(t=Math.max(t,256));var n=c.contents;c.contents=new Uint8Array(t),c.usedBytes>0&&c.contents.set(n.subarray(0,c.usedBytes),0)}},resizeFileStorage(c,t){if(c.usedBytes!=t)if(0==t)c.contents=null,c.usedBytes=0;else{var e=c.contents;c.contents=new Uint8Array(t),e&&c.contents.set(e.subarray(0,Math.min(t,c.usedBytes))),c.usedBytes=t}},node_ops:{getattr(c){var t={};return t.dev=Cl.isChrdev(c.mode)?c.id:1,t.ino=c.id,t.mode=c.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=c.rdev,Cl.isDir(c.mode)?t.size=4096:Cl.isFile(c.mode)?t.size=c.usedBytes:Cl.isLink(c.mode)?t.size=c.link.length:t.size=0,t.atime=new Date(c.timestamp),t.mtime=new Date(c.timestamp),t.ctime=new Date(c.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr(c,t){void 0!==t.mode&&(c.mode=t.mode),void 0!==t.timestamp&&(c.timestamp=t.timestamp),void 0!==t.size&&wl.resizeFileStorage(c,t.size)},lookup(c,t){throw Cl.genericErrors[44]},mknod:(c,t,e,n)=>wl.createNode(c,t,e,n),rename(c,t,e){if(Cl.isDir(c.mode)){var n;try{n=Cl.lookupNode(t,e)}catch(c){}if(n)for(var r in n.contents)throw new Cl.ErrnoError(55)}delete c.parent.contents[c.name],c.parent.timestamp=Date.now(),c.name=e,t.contents[e]=c,t.timestamp=c.parent.timestamp,c.parent=t},unlink(c,t){delete c.contents[t],c.timestamp=Date.now()},rmdir(c,t){var e=Cl.lookupNode(c,t);for(var n in e.contents)throw new Cl.ErrnoError(55);delete c.contents[t],c.timestamp=Date.now()},readdir(c){var t=[".",".."];for(var e in c.contents)c.contents.hasOwnProperty(e)&&t.push(e);return t},symlink(c,t,e){var n=wl.createNode(c,t,41471,0);return n.link=e,n},readlink(c){if(!Cl.isLink(c.mode))throw new Cl.ErrnoError(28);return c.link}},stream_ops:{read(c,t,e,n,r){var o=c.node.contents;if(r>=c.node.usedBytes)return 0;var u=Math.min(c.node.usedBytes-r,n);if(u>8&&o.subarray)t.set(o.subarray(r,r+u),e);else for(var M=0;M<u;M++)t[e+M]=o[r+M];return u},write(c,t,e,n,r,o){if(!n)return 0;var u=c.node;if(u.timestamp=Date.now(),t.subarray&&(!u.contents||u.contents.subarray)){if(o)return u.contents=t.subarray(e,e+n),u.usedBytes=n,n;if(0===u.usedBytes&&0===r)return u.contents=t.slice(e,e+n),u.usedBytes=n,n;if(r+n<=u.usedBytes)return u.contents.set(t.subarray(e,e+n),r),n}if(wl.expandFileStorage(u,r+n),u.contents.subarray&&t.subarray)u.contents.set(t.subarray(e,e+n),r);else for(var M=0;M<n;M++)u.contents[r+M]=t[e+M];return u.usedBytes=Math.max(u.usedBytes,r+n),n},llseek(c,t,e){var n=t;if(1===e?n+=c.position:2===e&&Cl.isFile(c.node.mode)&&(n+=c.node.usedBytes),n<0)throw new Cl.ErrnoError(28);return n},allocate(c,t,e){wl.expandFileStorage(c.node,t+e),c.node.usedBytes=Math.max(c.node.usedBytes,t+e)},mmap(c,t,e,n,r){if(!Cl.isFile(c.node.mode))throw new Cl.ErrnoError(43);var o,u,M=c.node.contents;if(2&r||M.buffer!==Wl.buffer){if((e>0||e+t<M.length)&&(M=M.subarray?M.subarray(e,e+t):Array.prototype.slice.call(M,e,e+t)),u=!0,!(o=mmapAlloc(t)))throw new Cl.ErrnoError(48);Wl.set(M,o)}else u=!1,o=M.byteOffset;return{ptr:o,allocated:u}},msync:(c,t,e,n,r)=>(wl.stream_ops.write(c,t,0,n,e,!1),0)}},asyncLoad=(c,t,e,n)=>{var r=n?"":`al ${c}`;u(c,(e=>{var n;n=`Loading data file "${c}" failed (no arrayBuffer).`,e||abort(n),t(new Uint8Array(e)),r&&removeRunDependency()}),(t=>{if(!e)throw`Loading data file "${c}" failed.`;e()})),r&&addRunDependency()},Ll=r.preloadPlugins||[],FS_getMode=(c,t)=>{var e=0;return c&&(e|=365),t&&(e|=146),e},Cl={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath(c,t={}){if(!(c=zl.resolve(c)))return{path:"",node:null};if((t=Object.assign({follow_mount:!0,recurse_count:0},t)).recurse_count>8)throw new Cl.ErrnoError(32);for(var e=c.split("/").filter((c=>!!c)),n=Cl.root,r="/",o=0;o<e.length;o++){var u=o===e.length-1;if(u&&t.parent)break;if(n=Cl.lookupNode(n,e[o]),r=fl.join2(r,e[o]),Cl.isMountpoint(n)&&(!u||u&&t.follow_mount)&&(n=n.mounted.root),!u||t.follow)for(var M=0;Cl.isLink(n.mode);){var ll=Cl.readlink(r);if(r=zl.resolve(fl.dirname(r),ll),n=Cl.lookupPath(r,{recurse_count:t.recurse_count+1}).node,M++>40)throw new Cl.ErrnoError(32)}}return{path:r,node:n}},getPath(c){for(var t;;){if(Cl.isRoot(c)){var e=c.mount.mountpoint;return t?"/"!==e[e.length-1]?`${e}/${t}`:e+t:e}t=t?`${c.name}/${t}`:c.name,c=c.parent}},hashName(c,t){for(var e=0,n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n)|0;return(c+e>>>0)%Cl.nameTable.length},hashAddNode(c){var t=Cl.hashName(c.parent.id,c.name);c.name_next=Cl.nameTable[t],Cl.nameTable[t]=c},hashRemoveNode(c){var t=Cl.hashName(c.parent.id,c.name);if(Cl.nameTable[t]===c)Cl.nameTable[t]=c.name_next;else for(var e=Cl.nameTable[t];e;){if(e.name_next===c){e.name_next=c.name_next;break}e=e.name_next}},lookupNode(c,t){var e=Cl.mayLookup(c);if(e)throw new Cl.ErrnoError(e,c);for(var n=Cl.hashName(c.id,t),r=Cl.nameTable[n];r;r=r.name_next){var o=r.name;if(r.parent.id===c.id&&o===t)return r}return Cl.lookup(c,t)},createNode(c,t,e,n){var r=new Cl.FSNode(c,t,e,n);return Cl.hashAddNode(r),r},destroyNode(c){Cl.hashRemoveNode(c)},isRoot:c=>c===c.parent,isMountpoint:c=>!!c.mounted,isFile:c=>32768==(61440&c),isDir:c=>16384==(61440&c),isLink:c=>40960==(61440&c),isChrdev:c=>8192==(61440&c),isBlkdev:c=>24576==(61440&c),isFIFO:c=>4096==(61440&c),isSocket:c=>49152==(49152&c),flagsToPermissionString(c){var t=["r","w","rw"][3&c];return 512&c&&(t+="w"),t},nodePermissions:(c,t)=>Cl.ignorePermissions||(!t.includes("r")||292&c.mode)&&(!t.includes("w")||146&c.mode)&&(!t.includes("x")||73&c.mode)?0:2,mayLookup(c){var t=Cl.nodePermissions(c,"x");return t||(c.node_ops.lookup?0:2)},mayCreate(c,t){try{Cl.lookupNode(c,t);return 20}catch(c){}return Cl.nodePermissions(c,"wx")},mayDelete(c,t,e){var n;try{n=Cl.lookupNode(c,t)}catch(c){return c.errno}var r=Cl.nodePermissions(c,"wx");if(r)return r;if(e){if(!Cl.isDir(n.mode))return 54;if(Cl.isRoot(n)||Cl.getPath(n)===Cl.cwd())return 10}else if(Cl.isDir(n.mode))return 31;return 0},mayOpen:(c,t)=>c?Cl.isLink(c.mode)?32:Cl.isDir(c.mode)&&("r"!==Cl.flagsToPermissionString(t)||512&t)?31:Cl.nodePermissions(c,Cl.flagsToPermissionString(t)):44,MAX_OPEN_FDS:4096,nextfd(){for(var c=0;c<=Cl.MAX_OPEN_FDS;c++)if(!Cl.streams[c])return c;throw new Cl.ErrnoError(33)},getStreamChecked(c){var t=Cl.getStream(c);if(!t)throw new Cl.ErrnoError(8);return t},getStream:c=>Cl.streams[c],createStream:(c,t=-1)=>(Cl.FSStream||(Cl.FSStream=function(){this.shared={}},Cl.FSStream.prototype={},Object.defineProperties(Cl.FSStream.prototype,{object:{get(){return this.node},set(c){this.node=c}},isRead:{get(){return 1!=(2097155&this.flags)}},isWrite:{get(){return 0!=(2097155&this.flags)}},isAppend:{get(){return 1024&this.flags}},flags:{get(){return this.shared.flags},set(c){this.shared.flags=c}},position:{get(){return this.shared.position},set(c){this.shared.position=c}}})),c=Object.assign(new Cl.FSStream,c),-1==t&&(t=Cl.nextfd()),c.fd=t,Cl.streams[t]=c,c),closeStream(c){Cl.streams[c]=null},chrdev_stream_ops:{open(c){var t=Cl.getDevice(c.node.rdev);c.stream_ops=t.stream_ops,c.stream_ops.open&&c.stream_ops.open(c)},llseek(){throw new Cl.ErrnoError(70)}},major:c=>c>>8,minor:c=>255&c,makedev:(c,t)=>c<<8|t,registerDevice(c,t){Cl.devices[c]={stream_ops:t}},getDevice:c=>Cl.devices[c],getMounts(c){for(var t=[],e=[c];e.length;){var n=e.pop();t.push(n),e.push.apply(e,n.mounts)}return t},syncfs(c,t){"function"==typeof c&&(t=c,c=!1),Cl.syncFSRequests++,Cl.syncFSRequests>1&&Gl(`warning: ${Cl.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);var e=Cl.getMounts(Cl.root.mount),n=0;function doCallback(c){return Cl.syncFSRequests--,t(c)}function done(c){if(c)return done.errored?void 0:(done.errored=!0,doCallback(c));++n>=e.length&&doCallback(null)}e.forEach((t=>{if(!t.type.syncfs)return done(null);t.type.syncfs(t,c,done)}))},mount(c,t,e){var n,r="/"===e,o=!e;if(r&&Cl.root)throw new Cl.ErrnoError(10);if(!r&&!o){var u=Cl.lookupPath(e,{follow_mount:!1});if(e=u.path,n=u.node,Cl.isMountpoint(n))throw new Cl.ErrnoError(10);if(!Cl.isDir(n.mode))throw new Cl.ErrnoError(54)}var M={type:c,opts:t,mountpoint:e,mounts:[]},ll=c.mount(M);return ll.mount=M,M.root=ll,r?Cl.root=ll:n&&(n.mounted=M,n.mount&&n.mount.mounts.push(M)),ll},unmount(c){var t=Cl.lookupPath(c,{follow_mount:!1});if(!Cl.isMountpoint(t.node))throw new Cl.ErrnoError(28);var e=t.node,n=e.mounted,r=Cl.getMounts(n);Object.keys(Cl.nameTable).forEach((c=>{for(var t=Cl.nameTable[c];t;){var e=t.name_next;r.includes(t.mount)&&Cl.destroyNode(t),t=e}})),e.mounted=null;var o=e.mount.mounts.indexOf(n);e.mount.mounts.splice(o,1)},lookup:(c,t)=>c.node_ops.lookup(c,t),mknod(c,t,e){var n=Cl.lookupPath(c,{parent:!0}).node,r=fl.basename(c);if(!r||"."===r||".."===r)throw new Cl.ErrnoError(28);var o=Cl.mayCreate(n,r);if(o)throw new Cl.ErrnoError(o);if(!n.node_ops.mknod)throw new Cl.ErrnoError(63);return n.node_ops.mknod(n,r,t,e)},create:(c,t)=>(t=void 0!==t?t:438,t&=4095,t|=32768,Cl.mknod(c,t,0)),mkdir:(c,t)=>(t=void 0!==t?t:511,t&=1023,t|=16384,Cl.mknod(c,t,0)),mkdirTree(c,t){for(var e=c.split("/"),n="",r=0;r<e.length;++r)if(e[r]){n+="/"+e[r];try{Cl.mkdir(n,t)}catch(c){if(20!=c.errno)throw c}}},mkdev:(c,t,e)=>(void 0===e&&(e=t,t=438),t|=8192,Cl.mknod(c,t,e)),symlink(c,t){if(!zl.resolve(c))throw new Cl.ErrnoError(44);var e=Cl.lookupPath(t,{parent:!0}).node;if(!e)throw new Cl.ErrnoError(44);var n=fl.basename(t),r=Cl.mayCreate(e,n);if(r)throw new Cl.ErrnoError(r);if(!e.node_ops.symlink)throw new Cl.ErrnoError(63);return e.node_ops.symlink(e,n,c)},rename(c,t){var e,n,r=fl.dirname(c),o=fl.dirname(t),u=fl.basename(c),M=fl.basename(t);if(e=Cl.lookupPath(c,{parent:!0}).node,n=Cl.lookupPath(t,{parent:!0}).node,!e||!n)throw new Cl.ErrnoError(44);if(e.mount!==n.mount)throw new Cl.ErrnoError(75);var ll,Zl=Cl.lookupNode(e,u),cl=zl.relative(c,o);if("."!==cl.charAt(0))throw new Cl.ErrnoError(28);if("."!==(cl=zl.relative(t,r)).charAt(0))throw new Cl.ErrnoError(55);try{ll=Cl.lookupNode(n,M)}catch(c){}if(Zl!==ll){var dl=Cl.isDir(Zl.mode),tl=Cl.mayDelete(e,u,dl);if(tl)throw new Cl.ErrnoError(tl);if(tl=ll?Cl.mayDelete(n,M,dl):Cl.mayCreate(n,M))throw new Cl.ErrnoError(tl);if(!e.node_ops.rename)throw new Cl.ErrnoError(63);if(Cl.isMountpoint(Zl)||ll&&Cl.isMountpoint(ll))throw new Cl.ErrnoError(10);if(n!==e&&(tl=Cl.nodePermissions(e,"w")))throw new Cl.ErrnoError(tl);Cl.hashRemoveNode(Zl);try{e.node_ops.rename(Zl,n,M)}catch(c){throw c}finally{Cl.hashAddNode(Zl)}}},rmdir(c){var t=Cl.lookupPath(c,{parent:!0}).node,e=fl.basename(c),n=Cl.lookupNode(t,e),r=Cl.mayDelete(t,e,!0);if(r)throw new Cl.ErrnoError(r);if(!t.node_ops.rmdir)throw new Cl.ErrnoError(63);if(Cl.isMountpoint(n))throw new Cl.ErrnoError(10);t.node_ops.rmdir(t,e),Cl.destroyNode(n)},readdir(c){var t=Cl.lookupPath(c,{follow:!0}).node;if(!t.node_ops.readdir)throw new Cl.ErrnoError(54);return t.node_ops.readdir(t)},unlink(c){var t=Cl.lookupPath(c,{parent:!0}).node;if(!t)throw new Cl.ErrnoError(44);var e=fl.basename(c),n=Cl.lookupNode(t,e),r=Cl.mayDelete(t,e,!1);if(r)throw new Cl.ErrnoError(r);if(!t.node_ops.unlink)throw new Cl.ErrnoError(63);if(Cl.isMountpoint(n))throw new Cl.ErrnoError(10);t.node_ops.unlink(t,e),Cl.destroyNode(n)},readlink(c){var t=Cl.lookupPath(c).node;if(!t)throw new Cl.ErrnoError(44);if(!t.node_ops.readlink)throw new Cl.ErrnoError(28);return zl.resolve(Cl.getPath(t.parent),t.node_ops.readlink(t))},stat(c,t){var e=Cl.lookupPath(c,{follow:!t}).node;if(!e)throw new Cl.ErrnoError(44);if(!e.node_ops.getattr)throw new Cl.ErrnoError(63);return e.node_ops.getattr(e)},lstat:c=>Cl.stat(c,!0),chmod(c,t,e){var n;"string"==typeof c?n=Cl.lookupPath(c,{follow:!e}).node:n=c;if(!n.node_ops.setattr)throw new Cl.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&t|-4096&n.mode,timestamp:Date.now()})},lchmod(c,t){Cl.chmod(c,t,!0)},fchmod(c,t){var e=Cl.getStreamChecked(c);Cl.chmod(e.node,t)},chown(c,t,e,n){var r;"string"==typeof c?r=Cl.lookupPath(c,{follow:!n}).node:r=c;if(!r.node_ops.setattr)throw new Cl.ErrnoError(63);r.node_ops.setattr(r,{timestamp:Date.now()})},lchown(c,t,e){Cl.chown(c,t,e,!0)},fchown(c,t,e){var n=Cl.getStreamChecked(c);Cl.chown(n.node,t,e)},truncate(c,t){if(t<0)throw new Cl.ErrnoError(28);var e;"string"==typeof c?e=Cl.lookupPath(c,{follow:!0}).node:e=c;if(!e.node_ops.setattr)throw new Cl.ErrnoError(63);if(Cl.isDir(e.mode))throw new Cl.ErrnoError(31);if(!Cl.isFile(e.mode))throw new Cl.ErrnoError(28);var n=Cl.nodePermissions(e,"w");if(n)throw new Cl.ErrnoError(n);e.node_ops.setattr(e,{size:t,timestamp:Date.now()})},ftruncate(c,t){var e=Cl.getStreamChecked(c);if(0==(2097155&e.flags))throw new Cl.ErrnoError(28);Cl.truncate(e.node,t)},utime(c,t,e){var n=Cl.lookupPath(c,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(t,e)})},open(c,t,e){if(""===c)throw new Cl.ErrnoError(44);var n;if(e=void 0===e?438:e,e=64&(t="string"==typeof t?(c=>{var t={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[c];if(void 0===t)throw new Error(`Unknown file open mode: ${c}`);return t})(t):t)?4095&e|32768:0,"object"==typeof c)n=c;else{c=fl.normalize(c);try{n=Cl.lookupPath(c,{follow:!(131072&t)}).node}catch(c){}}var o=!1;if(64&t)if(n){if(128&t)throw new Cl.ErrnoError(20)}else n=Cl.mknod(c,e,0),o=!0;if(!n)throw new Cl.ErrnoError(44);if(Cl.isChrdev(n.mode)&&(t&=-513),65536&t&&!Cl.isDir(n.mode))throw new Cl.ErrnoError(54);if(!o){var u=Cl.mayOpen(n,t);if(u)throw new Cl.ErrnoError(u)}512&t&&!o&&Cl.truncate(n,0),t&=-131713;var M=Cl.createStream({node:n,path:Cl.getPath(n),flags:t,seekable:!0,position:0,stream_ops:n.stream_ops,ungotten:[],error:!1});return M.stream_ops.open&&M.stream_ops.open(M),!r.logReadFiles||1&t||(Cl.readFiles||(Cl.readFiles={}),c in Cl.readFiles||(Cl.readFiles[c]=1)),M},close(c){if(Cl.isClosed(c))throw new Cl.ErrnoError(8);c.getdents&&(c.getdents=null);try{c.stream_ops.close&&c.stream_ops.close(c)}catch(c){throw c}finally{Cl.closeStream(c.fd)}c.fd=null},isClosed:c=>null===c.fd,llseek(c,t,e){if(Cl.isClosed(c))throw new Cl.ErrnoError(8);if(!c.seekable||!c.stream_ops.llseek)throw new Cl.ErrnoError(70);if(0!=e&&1!=e&&2!=e)throw new Cl.ErrnoError(28);return c.position=c.stream_ops.llseek(c,t,e),c.ungotten=[],c.position},read(c,t,e,n,r){if(n<0||r<0)throw new Cl.ErrnoError(28);if(Cl.isClosed(c))throw new Cl.ErrnoError(8);if(1==(2097155&c.flags))throw new Cl.ErrnoError(8);if(Cl.isDir(c.node.mode))throw new Cl.ErrnoError(31);if(!c.stream_ops.read)throw new Cl.ErrnoError(28);var o=void 0!==r;if(o){if(!c.seekable)throw new Cl.ErrnoError(70)}else r=c.position;var u=c.stream_ops.read(c,t,e,n,r);return o||(c.position+=u),u},write(c,t,e,n,r,o){if(n<0||r<0)throw new Cl.ErrnoError(28);if(Cl.isClosed(c))throw new Cl.ErrnoError(8);if(0==(2097155&c.flags))throw new Cl.ErrnoError(8);if(Cl.isDir(c.node.mode))throw new Cl.ErrnoError(31);if(!c.stream_ops.write)throw new Cl.ErrnoError(28);c.seekable&&1024&c.flags&&Cl.llseek(c,0,2);var u=void 0!==r;if(u){if(!c.seekable)throw new Cl.ErrnoError(70)}else r=c.position;var M=c.stream_ops.write(c,t,e,n,r,o);return u||(c.position+=M),M},allocate(c,t,e){if(Cl.isClosed(c))throw new Cl.ErrnoError(8);if(t<0||e<=0)throw new Cl.ErrnoError(28);if(0==(2097155&c.flags))throw new Cl.ErrnoError(8);if(!Cl.isFile(c.node.mode)&&!Cl.isDir(c.node.mode))throw new Cl.ErrnoError(43);if(!c.stream_ops.allocate)throw new Cl.ErrnoError(138);c.stream_ops.allocate(c,t,e)},mmap(c,t,e,n,r){if(0!=(2&n)&&0==(2&r)&&2!=(2097155&c.flags))throw new Cl.ErrnoError(2);if(1==(2097155&c.flags))throw new Cl.ErrnoError(2);if(!c.stream_ops.mmap)throw new Cl.ErrnoError(43);return c.stream_ops.mmap(c,t,e,n,r)},msync:(c,t,e,n,r)=>c.stream_ops.msync?c.stream_ops.msync(c,t,e,n,r):0,munmap:c=>0,ioctl(c,t,e){if(!c.stream_ops.ioctl)throw new Cl.ErrnoError(59);return c.stream_ops.ioctl(c,t,e)},readFile(c,t={}){if(t.flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error(`Invalid encoding type "${t.encoding}"`);var e,n=Cl.open(c,t.flags),r=Cl.stat(c).size,o=new Uint8Array(r);return Cl.read(n,o,0,r,0),"utf8"===t.encoding?e=UTF8ArrayToString(o,0):"binary"===t.encoding&&(e=o),Cl.close(n),e},writeFile(c,t,e={}){e.flags=e.flags||577;var n=Cl.open(c,e.flags,e.mode);if("string"==typeof t){var r=new Uint8Array(lengthBytesUTF8(t)+1),o=stringToUTF8Array(t,r,0,r.length);Cl.write(n,r,0,o,void 0,e.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");Cl.write(n,t,0,t.byteLength,void 0,e.canOwn)}Cl.close(n)},cwd:()=>Cl.currentPath,chdir(c){var t=Cl.lookupPath(c,{follow:!0});if(null===t.node)throw new Cl.ErrnoError(44);if(!Cl.isDir(t.node.mode))throw new Cl.ErrnoError(54);var e=Cl.nodePermissions(t.node,"x");if(e)throw new Cl.ErrnoError(e);Cl.currentPath=t.path},createDefaultDirectories(){Cl.mkdir("/tmp"),Cl.mkdir("/home"),Cl.mkdir("/home/web_user")},createDefaultDevices(){Cl.mkdir("/dev"),Cl.registerDevice(Cl.makedev(1,3),{read:()=>0,write:(c,t,e,n,r)=>n}),Cl.mkdev("/dev/null",Cl.makedev(1,3)),Bl.register(Cl.makedev(5,0),Bl.default_tty_ops),Bl.register(Cl.makedev(6,0),Bl.default_tty1_ops),Cl.mkdev("/dev/tty",Cl.makedev(5,0)),Cl.mkdev("/dev/tty1",Cl.makedev(6,0));var c=new Uint8Array(1024),t=0,randomByte=()=>(0===t&&(t=randomFill(c).byteLength),c[--t]);Cl.createDevice("/dev","random",randomByte),Cl.createDevice("/dev","urandom",randomByte),Cl.mkdir("/dev/shm"),Cl.mkdir("/dev/shm/tmp")},createSpecialDirectories(){Cl.mkdir("/proc");var c=Cl.mkdir("/proc/self");Cl.mkdir("/proc/self/fd"),Cl.mount({mount(){var t=Cl.createNode(c,"fd",16895,73);return t.node_ops={lookup(c,t){var e=+t,n=Cl.getStreamChecked(e),r={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>n.path}};return r.parent=r,r}},t}},{},"/proc/self/fd")},createStandardStreams(){r.stdin?Cl.createDevice("/dev","stdin",r.stdin):Cl.symlink("/dev/tty","/dev/stdin"),r.stdout?Cl.createDevice("/dev","stdout",null,r.stdout):Cl.symlink("/dev/tty","/dev/stdout"),r.stderr?Cl.createDevice("/dev","stderr",null,r.stderr):Cl.symlink("/dev/tty1","/dev/stderr");Cl.open("/dev/stdin",0),Cl.open("/dev/stdout",1),Cl.open("/dev/stderr",1)},ensureErrnoError(){Cl.ErrnoError||(Cl.ErrnoError=function(c,t){this.name="ErrnoError",this.node=t,this.setErrno=function(c){this.errno=c},this.setErrno(c),this.message="FS error"},Cl.ErrnoError.prototype=new Error,Cl.ErrnoError.prototype.constructor=Cl.ErrnoError,[44].forEach((c=>{Cl.genericErrors[c]=new Cl.ErrnoError(c),Cl.genericErrors[c].stack="<generic error, no stack>"})))},staticInit(){Cl.ensureErrnoError(),Cl.nameTable=new Array(4096),Cl.mount(wl,{},"/"),Cl.createDefaultDirectories(),Cl.createDefaultDevices(),Cl.createSpecialDirectories(),Cl.filesystems={MEMFS:wl}},init(c,t,e){Cl.init.initialized=!0,Cl.ensureErrnoError(),r.stdin=c||r.stdin,r.stdout=t||r.stdout,r.stderr=e||r.stderr,Cl.createStandardStreams()},quit(){Cl.init.initialized=!1,vZ(0);for(var c=0;c<Cl.streams.length;c++){var t=Cl.streams[c];t&&Cl.close(t)}},findObject(c,t){var e=Cl.analyzePath(c,t);return e.exists?e.object:null},analyzePath(c,t){try{c=(n=Cl.lookupPath(c,{follow:!t})).path}catch(c){}var e={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=Cl.lookupPath(c,{parent:!0});e.parentExists=!0,e.parentPath=n.path,e.parentObject=n.node,e.name=fl.basename(c),n=Cl.lookupPath(c,{follow:!t}),e.exists=!0,e.path=n.path,e.object=n.node,e.name=n.node.name,e.isRoot="/"===n.path}catch(c){e.error=c.errno}return e},createPath(c,t,e,n){c="string"==typeof c?c:Cl.getPath(c);for(var r=t.split("/").reverse();r.length;){var o=r.pop();if(o){var u=fl.join2(c,o);try{Cl.mkdir(u)}catch(c){}c=u}}return u},createFile(c,t,e,n,r){var o=fl.join2("string"==typeof c?c:Cl.getPath(c),t),u=FS_getMode(n,r);return Cl.create(o,u)},createDataFile(c,t,e,n,r,o){var u=t;c&&(c="string"==typeof c?c:Cl.getPath(c),u=t?fl.join2(c,t):c);var M=FS_getMode(n,r),ll=Cl.create(u,M);if(e){if("string"==typeof e){for(var Zl=new Array(e.length),cl=0,dl=e.length;cl<dl;++cl)Zl[cl]=e.charCodeAt(cl);e=Zl}Cl.chmod(ll,146|M);var tl=Cl.open(ll,577);Cl.write(tl,e,0,e.length,0,o),Cl.close(tl),Cl.chmod(ll,M)}},createDevice(c,t,e,n){var r=fl.join2("string"==typeof c?c:Cl.getPath(c),t),o=FS_getMode(!!e,!!n);Cl.createDevice.major||(Cl.createDevice.major=64);var u=Cl.makedev(Cl.createDevice.major++,0);return Cl.registerDevice(u,{open(c){c.seekable=!1},close(c){n&&n.buffer&&n.buffer.length&&n(10)},read(c,t,n,r,o){for(var u=0,M=0;M<r;M++){var ll;try{ll=e()}catch(c){throw new Cl.ErrnoError(29)}if(void 0===ll&&0===u)throw new Cl.ErrnoError(6);if(null==ll)break;u++,t[n+M]=ll}return u&&(c.node.timestamp=Date.now()),u},write(c,t,e,r,o){for(var u=0;u<r;u++)try{n(t[e+u])}catch(c){throw new Cl.ErrnoError(29)}return r&&(c.node.timestamp=Date.now()),u}}),Cl.mkdev(r,o,u)},forceLoadFile(c){if(c.isDevice||c.isFolder||c.link||c.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!o)throw new Error("Cannot load without read() or XMLHttpRequest.");try{c.contents=intArrayFromString(o(c.url),!0),c.usedBytes=c.contents.length}catch(c){throw new Cl.ErrnoError(29)}},createLazyFile(c,t,e,n,r){function LazyUint8Array(){this.lengthKnown=!1,this.chunks=[]}if(LazyUint8Array.prototype.get=function(c){if(!(c>this.length-1||c<0)){var t=c%this.chunkSize,e=c/this.chunkSize|0;return this.getter(e)[t]}},LazyUint8Array.prototype.setDataGetter=function(c){this.getter=c},LazyUint8Array.prototype.cacheLength=function(){var c=new XMLHttpRequest;if(c.open("HEAD",e,!1),c.send(null),!(c.status>=200&&c.status<300||304===c.status))throw new Error("Couldn't load "+e+". Status: "+c.status);var t,n=Number(c.getResponseHeader("Content-length")),r=(t=c.getResponseHeader("Accept-Ranges"))&&"bytes"===t,o=(t=c.getResponseHeader("Content-Encoding"))&&"gzip"===t,u=1048576;r||(u=n);var M=this;M.setDataGetter((c=>{var t=c*u,r=(c+1)*u-1;if(r=Math.min(r,n-1),void 0===M.chunks[c]&&(M.chunks[c]=((c,t)=>{if(c>t)throw new Error("invalid range ("+c+", "+t+") or no bytes requested!");if(t>n-1)throw new Error("only "+n+" bytes available! programmer error!");var r=new XMLHttpRequest;if(r.open("GET",e,!1),n!==u&&r.setRequestHeader("Range","bytes="+c+"-"+t),r.responseType="arraybuffer",r.overrideMimeType&&r.overrideMimeType("text/plain; charset=x-user-defined"),r.send(null),!(r.status>=200&&r.status<300||304===r.status))throw new Error("Couldn't load "+e+". Status: "+r.status);return void 0!==r.response?new Uint8Array(r.response||[]):intArrayFromString(r.responseText||"",!0)})(t,r)),void 0===M.chunks[c])throw new Error("doXHR failed!");return M.chunks[c]})),!o&&n||(u=n=1,n=this.getter(0).length,u=n,Xl("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=u,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!dl)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new LazyUint8Array;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var u={isDevice:!1,contents:o}}else u={isDevice:!1,url:e};var M=Cl.createFile(c,t,u,n,r);u.contents?M.contents=u.contents:u.url&&(M.contents=null,M.url=u.url),Object.defineProperties(M,{usedBytes:{get:function(){return this.contents.length}}});var ll={};function writeChunks(c,t,e,n,r){var o=c.node.contents;if(r>=o.length)return 0;var u=Math.min(o.length-r,n);if(o.slice)for(var M=0;M<u;M++)t[e+M]=o[r+M];else for(M=0;M<u;M++)t[e+M]=o.get(r+M);return u}return Object.keys(M.stream_ops).forEach((c=>{var t=M.stream_ops[c];ll[c]=function(){return Cl.forceLoadFile(M),t.apply(null,arguments)}})),ll.read=(c,t,e,n,r)=>(Cl.forceLoadFile(M),writeChunks(c,t,e,n,r)),ll.mmap=(c,t,e,n,r)=>{Cl.forceLoadFile(M);var o=mmapAlloc(t);if(!o)throw new Cl.ErrnoError(48);return writeChunks(c,Wl,o,t,e),{ptr:o,allocated:!0}},M.stream_ops=ll,M}},UTF8ToString=(c,t)=>c?UTF8ArrayToString(rl,c,t):"",Ml={DEFAULT_POLLMASK:5,calculateAt(c,t,e){if(fl.isAbs(t))return t;var n;-100===c?n=Cl.cwd():n=Ml.getStreamFromFD(c).path;if(0==t.length){if(!e)throw new Cl.ErrnoError(44);return n}return fl.join2(n,t)},doStat(c,t,e){try{var n=c(t)}catch(c){if(c&&c.node&&fl.normalize(t)!==fl.normalize(Cl.getPath(c.node)))return-54;throw c}Vl[e>>2]=n.dev,Vl[e+4>>2]=n.mode,yl[e+8>>2]=n.nlink,Vl[e+12>>2]=n.uid,Vl[e+16>>2]=n.gid,Vl[e+20>>2]=n.rdev,gl=[n.size>>>0,(Tl=n.size,+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[e+24>>2]=gl[0],Vl[e+28>>2]=gl[1],Vl[e+32>>2]=4096,Vl[e+36>>2]=n.blocks;var r=n.atime.getTime(),o=n.mtime.getTime(),u=n.ctime.getTime();return gl=[Math.floor(r/1e3)>>>0,(Tl=Math.floor(r/1e3),+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[e+40>>2]=gl[0],Vl[e+44>>2]=gl[1],yl[e+48>>2]=r%1e3*1e3,gl=[Math.floor(o/1e3)>>>0,(Tl=Math.floor(o/1e3),+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[e+56>>2]=gl[0],Vl[e+60>>2]=gl[1],yl[e+64>>2]=o%1e3*1e3,gl=[Math.floor(u/1e3)>>>0,(Tl=Math.floor(u/1e3),+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[e+72>>2]=gl[0],Vl[e+76>>2]=gl[1],yl[e+80>>2]=u%1e3*1e3,gl=[n.ino>>>0,(Tl=n.ino,+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[e+88>>2]=gl[0],Vl[e+92>>2]=gl[1],0},doMsync(c,t,e,n,r){if(!Cl.isFile(t.node.mode))throw new Cl.ErrnoError(43);if(2&n)return 0;var o=rl.slice(c,c+e);Cl.msync(t,o,r,e,n)},varargs:void 0,get(){var c=Vl[+Ml.varargs>>2];return Ml.varargs+=4,c},getp:()=>Ml.get(),getStr:c=>UTF8ToString(c),getStreamFromFD:c=>Cl.getStreamChecked(c)},convertI32PairToI53Checked=(c,t)=>t+2097152>>>0<4194305-!!c?(c>>>0)+4294967296*t:NaN,proxyToMainThread=function(c,t){var e=arguments.length-2,n=arguments;return(c=>{var t=stackSave(),e=c();return stackRestore(t),e})((()=>{for(var r=e,o=stackAlloc(8*r),u=o>>3,M=0;M<e;M++){var ll=n[2+M];ul[u+M]=ll}return __emscripten_run_on_main_thread_js(c,r,o,t)}))};function _proc_exit(c){if(el)return proxyToMainThread(0,1,c);il=c,keepRuntimeAlive()||(Pl.terminateAllThreads(),r.onExit&&r.onExit(c),Rl=!0),quit_(c,new ExitStatus(c))}var _exit=(c,t)=>{if(il=c,el)throw exitOnMainThread(c),"unwind";keepRuntimeAlive()||el||(NZ(),callRuntimeCallbacks(Jl),Cl.quit(),Bl.shutdown(),Pl.terminateAllThreads(),Nl=!0),_proc_exit(c)},handleException=c=>{if(c instanceof ExitStatus||"unwind"==c)return il;quit_(1,c)},Pl={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],pthreads:{},init(){el?Pl.initWorker():Pl.initMainThread()},initMainThread(){for(var c=4;c--;)Pl.allocateUnusedWorker();addOnPreRun((()=>{addRunDependency(),Pl.loadWasmModuleToAllWorkers((()=>removeRunDependency()))}))},initWorker(){Ql=!1},setExitStatus:c=>{il=c},terminateAllThreads__deps:["$terminateWorker"],terminateAllThreads:()=>{for(var c of Pl.runningWorkers)terminateWorker(c);for(var c of Pl.unusedWorkers)terminateWorker(c);Pl.unusedWorkers=[],Pl.runningWorkers=[],Pl.pthreads=[]},returnWorkerToPool:c=>{var t=c.pthread_ptr;delete Pl.pthreads[t],Pl.unusedWorkers.push(c),Pl.runningWorkers.splice(Pl.runningWorkers.indexOf(c),1),c.pthread_ptr=0,__emscripten_thread_free_data(t)},receiveObjectTransfer(c){},threadInitTLS(){Pl.tlsInitFunctions.forEach((c=>c()))},loadWasmModuleToWorker:c=>new Promise((t=>{c.onmessage=e=>{var n=e.data,o=n.cmd;if(n.targetThread&&n.targetThread!=JZ()){var u=Pl.pthreads[n.targetThread];u?u.postMessage(n,n.transferList):Gl(`Internal error! Worker sent a message "${o}" to target pthread ${n.targetThread}, but that thread no longer exists!`)}else{var M;"checkMailbox"===o?checkMailbox():"spawnThread"===o?spawnThread(n):"cleanupThread"===o?cleanupThread(n.thread):"killThread"===o?(c=>{var t=Pl.pthreads[c];delete Pl.pthreads[c],terminateWorker(t),__emscripten_thread_free_data(c),Pl.runningWorkers.splice(Pl.runningWorkers.indexOf(t),1),t.pthread_ptr=0})(n.thread):"cancelThread"===o?(M=n.thread,Pl.pthreads[M].postMessage({cmd:"cancel"})):"loaded"===o?(c.loaded=!0,t(c)):"alert"===o?alert(`Thread ${n.threadId}: ${n.text}`):"setimmediate"===n.target?c.postMessage(n):"callHandler"===o?r[n.handler](...n.args):o&&Gl(`worker sent an unknown command ${o}`)}},c.onerror=c=>{throw Gl(`worker sent an error! ${c.filename}:${c.lineno}: ${c.message}`),c};var e=[];for(var n of["onExit","onAbort","print","printErr"])r.hasOwnProperty(n)&&e.push(n);c.postMessage({cmd:"load",handlers:e,urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:nl,wasmModule:al})})),loadWasmModuleToAllWorkers(c){if(el)return c();Promise.all(Pl.unusedWorkers.map(Pl.loadWasmModuleToWorker)).then(c)},allocateUnusedWorker(){var c;if(r.locateFile){var t=locateFile("main-bin-multi.worker.js");c=new Worker(t,{type:"module"})}else c=new Worker(new URL("main-bin-multi.worker.js",location.href),{type:"module"});Pl.unusedWorkers.push(c)},getNewWorker:()=>(0==Pl.unusedWorkers.length&&(Pl.allocateUnusedWorker(),Pl.loadWasmModuleToWorker(Pl.unusedWorkers[0])),Pl.unusedWorkers.pop())};r.PThread=Pl;var callRuntimeCallbacks=c=>{for(;c.length>0;)c.shift()(r)};function exitOnMainThread(c){if(el)return proxyToMainThread(1,0,c);_exit(c)}r.establishStackSpace=()=>{var c=JZ(),t=yl[c+52>>2],e=yl[c+56>>2];_emscripten_stack_set_limits(t,t-e),stackRestore(t)};var jl,El=[],getWasmTableEntry=c=>{var t=El[c];return t||(c>=El.length&&(El.length=c+1),El[c]=t=jl.get(c)),t};r.invokeEntryPoint=(c,t)=>{Kl=0,function(c){keepRuntimeAlive()?Pl.setExitStatus(c):kZ(c)}(getWasmTableEntry(c)(t))};var Ql=r.noExitRuntime||!1,registerTLSInit=c=>{Pl.tlsInitFunctions.push(c)},Ol=[],Dl=0;function ExceptionInfo(c){this.excPtr=c,this.ptr=c-24,this.set_type=function(c){yl[this.ptr+4>>2]=c},this.get_type=function(){return yl[this.ptr+4>>2]},this.set_destructor=function(c){yl[this.ptr+8>>2]=c},this.get_destructor=function(){return yl[this.ptr+8>>2]},this.set_caught=function(c){c=c?1:0,Wl[this.ptr+12>>0]=c},this.get_caught=function(){return 0!=Wl[this.ptr+12>>0]},this.set_rethrown=function(c){c=c?1:0,Wl[this.ptr+13>>0]=c},this.get_rethrown=function(){return 0!=Wl[this.ptr+13>>0]},this.init=function(c,t){this.set_adjusted_ptr(0),this.set_type(c),this.set_destructor(t)},this.set_adjusted_ptr=function(c){yl[this.ptr+16>>2]=c},this.get_adjusted_ptr=function(){return yl[this.ptr+16>>2]},this.get_exception_ptr=function(){if(___cxa_is_pointer_type(this.get_type()))return yl[this.excPtr>>2];var c=this.get_adjusted_ptr();return 0!==c?c:this.excPtr}}var findMatchingCatch=c=>{var t=Dl;if(!t)return setTempRet0(0),0;var e=new ExceptionInfo(t);e.set_adjusted_ptr(t);var n=e.get_type();if(!n)return setTempRet0(0),t;for(var r in c){var o=c[r];if(0===o||o===n)break;var u=e.ptr+16;if(___cxa_can_catch(o,n,u))return setTempRet0(o),t}return setTempRet0(n),t};function pthreadCreateProxied(c,t,e,n){return el?proxyToMainThread(2,1,c,t,e,n):___pthread_create_js(c,t,e,n)}var ___pthread_create_js=(c,t,e,n)=>{if("undefined"==typeof SharedArrayBuffer)return Gl("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var r=[];if(el&&0===r.length)return pthreadCreateProxied(c,t,e,n);var o={startRoutine:e,pthread_ptr:c,arg:n,transferList:r};return el?(o.cmd="spawnThread",postMessage(o,r),0):spawnThread(o)};function ___syscall_fstat64(c,t){if(el)return proxyToMainThread(4,1,c,t);try{var e=Ml.getStreamFromFD(c);return Ml.doStat(Cl.stat,e.path,t)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_ftruncate64(c,t,e){if(el)return proxyToMainThread(5,1,c,t,e);var n=convertI32PairToI53Checked(t,e);try{return isNaN(n)?61:(Cl.ftruncate(c,n),0)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_newfstatat(c,t,e,n){if(el)return proxyToMainThread(8,1,c,t,e,n);try{t=Ml.getStr(t);var r=256&n,o=4096&n;return n&=-6401,t=Ml.calculateAt(c,t,o),Ml.doStat(r?Cl.lstat:Cl.stat,t,e)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_openat(c,t,e,n){if(el)return proxyToMainThread(9,1,c,t,e,n);Ml.varargs=n;try{t=Ml.getStr(t),t=Ml.calculateAt(c,t);var r=n?Ml.get():0;return Cl.open(t,e,r).fd}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}var stringToUTF8=(c,t,e)=>stringToUTF8Array(c,rl,t,e);function ___syscall_readlinkat(c,t,e,n){if(el)return proxyToMainThread(10,1,c,t,e,n);try{if(t=Ml.getStr(t),t=Ml.calculateAt(c,t),n<=0)return-28;var r=Cl.readlink(t),o=Math.min(n,lengthBytesUTF8(r)),u=Wl[e+o];return stringToUTF8(r,e,n+1),Wl[e+o]=u,o}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_renameat(c,t,e,n){if(el)return proxyToMainThread(11,1,c,t,e,n);try{return t=Ml.getStr(t),n=Ml.getStr(n),t=Ml.calculateAt(c,t),n=Ml.calculateAt(e,n),Cl.rename(t,n),0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_stat64(c,t){if(el)return proxyToMainThread(12,1,c,t);try{return c=Ml.getStr(c),Ml.doStat(Cl.stat,c,t)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function ___syscall_unlinkat(c,t,e){if(el)return proxyToMainThread(13,1,c,t,e);try{return t=Ml.getStr(t),t=Ml.calculateAt(c,t),0===e?Cl.unlink(t):512===e?Cl.rmdir(t):abort("Invalid flags passed to unlinkat"),0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}var Al,_l,$l,readLatin1String=c=>{for(var t="",e=c;rl[e];)t+=Al[rl[e++]];return t},ql={},lZ={},ZZ={},throwBindingError=c=>{throw new _l(c)},throwInternalError=c=>{throw new $l(c)},whenDependentTypesAreResolved=(c,t,e)=>{function onComplete(t){var n=e(t);n.length!==c.length&&throwInternalError("Mismatched type converter count");for(var r=0;r<c.length;++r)registerType(c[r],n[r])}c.forEach((function(c){ZZ[c]=t}));var n=new Array(t.length),r=[],o=0;t.forEach(((c,t)=>{lZ.hasOwnProperty(c)?n[t]=lZ[c]:(r.push(c),ql.hasOwnProperty(c)||(ql[c]=[]),ql[c].push((()=>{n[t]=lZ[c],++o===r.length&&onComplete(n)})))})),0===r.length&&onComplete(n)};function registerType(c,t,e={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");return function(c,t,e={}){var n=t.name;if(c||throwBindingError(`type "${n}" must have a positive integer typeid pointer`),lZ.hasOwnProperty(c)){if(e.ignoreDuplicateRegistrations)return;throwBindingError(`Cannot register type '${n}' twice`)}if(lZ[c]=t,delete ZZ[c],ql.hasOwnProperty(c)){var r=ql[c];delete ql[c],r.forEach((c=>c()))}}(c,t,e)}var cZ,throwInstanceAlreadyDeleted=c=>{throwBindingError(c.$$.ptrType.registeredClass.name+" instance already deleted")},dZ=!1,detachFinalizer=c=>{},releaseClassHandle=c=>{c.count.value-=1,0===c.count.value&&(c=>{c.smartPtr?c.smartPtrType.rawDestructor(c.smartPtr):c.ptrType.registeredClass.rawDestructor(c.ptr)})(c)},downcastPointer=(c,t,e)=>{if(t===e)return c;if(void 0===e.baseClass)return null;var n=downcastPointer(c,t,e.baseClass);return null===n?null:e.downcast(n)},tZ={},getInheritedInstanceCount=()=>Object.keys(mZ).length,getLiveInheritedInstances=()=>{var c=[];for(var t in mZ)mZ.hasOwnProperty(t)&&c.push(mZ[t]);return c},eZ=[],flushPendingDeletes=()=>{for(;eZ.length;){var c=eZ.pop();c.$$.deleteScheduled=!1,c.delete()}},setDelayFunction=c=>{cZ=c,eZ.length&&cZ&&cZ(flushPendingDeletes)},mZ={},getInheritedInstance=(c,t)=>(t=((c,t)=>{for(void 0===t&&throwBindingError("ptr should not be undefined");c.baseClass;)t=c.upcast(t),c=c.baseClass;return t})(c,t),mZ[t]),makeClassHandle=(c,t)=>(t.ptrType&&t.ptr||throwInternalError("makeClassHandle requires ptr and ptrType"),!!t.smartPtrType!==!!t.smartPtr&&throwInternalError("Both smartPtrType and smartPtr must be specified"),t.count={value:1},attachFinalizer(Object.create(c,{$$:{value:t}})));function RegisteredPointer_fromWireType(c){var t=this.getPointee(c);if(!t)return this.destructor(c),null;var e=getInheritedInstance(this.registeredClass,t);if(void 0!==e){if(0===e.$$.count.value)return e.$$.ptr=t,e.$$.smartPtr=c,e.clone();var n=e.clone();return this.destructor(c),n}function makeDefaultHandle(){return this.isSmartPointer?makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:t,smartPtrType:this,smartPtr:c}):makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:c})}var r,o=this.registeredClass.getActualType(t),u=tZ[o];if(!u)return makeDefaultHandle.call(this);r=this.isConst?u.constPointerType:u.pointerType;var M=downcastPointer(t,this.registeredClass,r.registeredClass);return null===M?makeDefaultHandle.call(this):this.isSmartPointer?makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M,smartPtrType:this,smartPtr:c}):makeClassHandle(r.registeredClass.instancePrototype,{ptrType:r,ptr:M})}var attachFinalizer=c=>"undefined"==typeof FinalizationRegistry?(attachFinalizer=c=>c,c):(dZ=new FinalizationRegistry((c=>{releaseClassHandle(c.$$)})),attachFinalizer=c=>{var t=c.$$;if(!!t.smartPtr){var e={$$:t};dZ.register(c,e,c)}return c},detachFinalizer=c=>dZ.unregister(c),attachFinalizer(c));function ClassHandle(){}var createNamedFunction=(c,t)=>Object.defineProperty(t,"name",{value:c}),ensureOverloadTable=(c,t,e)=>{if(void 0===c[t].overloadTable){var n=c[t];c[t]=function(){return c[t].overloadTable.hasOwnProperty(arguments.length)||throwBindingError(`Function '${e}' called with an invalid number of arguments (${arguments.length}) - expects one of (${c[t].overloadTable})!`),c[t].overloadTable[arguments.length].apply(this,arguments)},c[t].overloadTable=[],c[t].overloadTable[n.argCount]=n}};function RegisteredClass(c,t,e,n,r,o,u,M){this.name=c,this.constructor=t,this.instancePrototype=e,this.rawDestructor=n,this.baseClass=r,this.getActualType=o,this.upcast=u,this.downcast=M,this.pureVirtualFunctions=[]}var upcastPointer=(c,t,e)=>{for(;t!==e;)t.upcast||throwBindingError(`Expected null or instance of ${e.name}, got an instance of ${t.name}`),c=t.upcast(c),t=t.baseClass;return c};function constNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function genericPointerToWireType(c,t){var e;if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),this.isSmartPointer?(e=this.rawConstructor(),null!==c&&c.push(this.rawDestructor,e),e):0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.isConst&&t.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name} to parameter type ${this.name}`);var n=t.$$.ptrType.registeredClass;if(e=upcastPointer(t.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===t.$$.smartPtr&&throwBindingError("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:t.$$.smartPtrType===this?e=t.$$.smartPtr:throwBindingError(`Cannot convert argument of type ${t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name} to parameter type ${this.name}`);break;case 1:e=t.$$.smartPtr;break;case 2:if(t.$$.smartPtrType===this)e=t.$$.smartPtr;else{var r=t.clone();e=this.rawShare(e,aZ.toHandle((()=>r.delete()))),null!==c&&c.push(this.rawDestructor,e)}break;default:throwBindingError("Unsupporting sharing policy")}return e}function nonConstNoSmartPtrRawPointerToWireType(c,t){if(null===t)return this.isReference&&throwBindingError(`null is not a valid ${this.name}`),0;t.$$||throwBindingError(`Cannot pass "${embindRepr(t)}" as a ${this.name}`),t.$$.ptr||throwBindingError(`Cannot pass deleted object as a pointer of type ${this.name}`),t.$$.ptrType.isConst&&throwBindingError(`Cannot convert argument of type ${t.$$.ptrType.name} to parameter type ${this.name}`);var e=t.$$.ptrType.registeredClass;return upcastPointer(t.$$.ptr,e,this.registeredClass)}function readPointer(c){return this.fromWireType(yl[c>>2])}function RegisteredPointer(c,t,e,n,r,o,u,M,ll,Zl,cl){this.name=c,this.registeredClass=t,this.isReference=e,this.isConst=n,this.isSmartPointer=r,this.pointeeType=o,this.sharingPolicy=u,this.rawGetPointee=M,this.rawConstructor=ll,this.rawShare=Zl,this.rawDestructor=cl,r||void 0!==t.baseClass?this.toWireType=genericPointerToWireType:n?(this.toWireType=constNoSmartPtrRawPointerToWireType,this.destructorFunction=null):(this.toWireType=nonConstNoSmartPtrRawPointerToWireType,this.destructorFunction=null)}var bZ,dynCall=(c,t,e)=>c.includes("j")?((c,t,e)=>{var n=r["dynCall_"+c];return e&&e.length?n.apply(null,[t].concat(e)):n.call(null,t)})(c,t,e):getWasmTableEntry(t).apply(null,e),embind__requireFunction=(c,t)=>{var e,n,r,o=(c=readLatin1String(c)).includes("j")?(e=c,n=t,r=[],function(){return r.length=0,Object.assign(r,arguments),dynCall(e,n,r)}):getWasmTableEntry(t);return"function"!=typeof o&&throwBindingError(`unknown function pointer with signature ${c}: ${t}`),o},getTypeName=c=>{var t=___getTypeName(c),e=readLatin1String(t);return _free(t),e},throwUnboundTypeError=(c,t)=>{var e=[],n={};throw t.forEach((function visit(c){n[c]||lZ[c]||(ZZ[c]?ZZ[c].forEach(visit):(e.push(c),n[c]=!0))})),new bZ(`${c}: `+e.map(getTypeName).join([", "]))},heap32VectorToArray=(c,t)=>{for(var e=[],n=0;n<c;n++)e.push(yl[t+4*n>>2]);return e},runDestructors=c=>{for(;c.length;){var t=c.pop();c.pop()(t)}};function craftInvokerFunction(c,t,e,n,r,o){var u=t.length;u<2&&throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var M=null!==t[1]&&null!==e,ll=!1,Zl=1;Zl<t.length;++Zl)if(null!==t[Zl]&&void 0===t[Zl].destructorFunction){ll=!0;break}var cl="void"!==t[0].name,dl="",tl="";for(Zl=0;Zl<u-2;++Zl)dl+=(0!==Zl?", ":"")+"arg"+Zl,tl+=(0!==Zl?", ":"")+"arg"+Zl+"Wired";var el=`\n        return function (${dl}) {\n        if (arguments.length !== ${u-2}) {\n          throwBindingError('function ${c} called with ' + arguments.length + ' arguments, expected ${u-2}');\n        }`;ll&&(el+="var destructors = [];\n");var ml=ll?"destructors":"null",bl=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],nl=[throwBindingError,n,r,runDestructors,t[0],t[1]];M&&(el+="var thisWired = classParam.toWireType("+ml+", this);\n");for(Zl=0;Zl<u-2;++Zl)el+="var arg"+Zl+"Wired = argType"+Zl+".toWireType("+ml+", arg"+Zl+"); // "+t[Zl+2].name+"\n",bl.push("argType"+Zl),nl.push(t[Zl+2]);if(M&&(tl="thisWired"+(tl.length>0?", ":"")+tl),el+=(cl||o?"var rv = ":"")+"invoker(fn"+(tl.length>0?", ":"")+tl+");\n",ll)el+="runDestructors(destructors);\n";else for(Zl=M?1:2;Zl<t.length;++Zl){var al=1===Zl?"thisWired":"arg"+(Zl-2)+"Wired";null!==t[Zl].destructorFunction&&(el+=al+"_dtor("+al+"); // "+t[Zl].name+"\n",bl.push(al+"_dtor"),nl.push(t[Zl].destructorFunction))}cl&&(el+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),el+="}\n",bl.push(el);var Xl=function(c,t){if(!(c instanceof Function))throw new TypeError(`new_ called with constructor type ${typeof c} which is not a function`);var e=createNamedFunction(c.name||"unknownFunctionName",(function(){}));e.prototype=c.prototype;var n=new e,r=c.apply(n,t);return r instanceof Object?r:n}(Function,bl).apply(null,nl);return createNamedFunction(c,Xl)}function HandleAllocator(){this.allocated=[void 0],this.freelist=[]}var nZ=new HandleAllocator,__emval_decref=c=>{c>=nZ.reserved&&0==--nZ.get(c).refcount&&nZ.free(c)},count_emval_handles=()=>{for(var c=0,t=nZ.reserved;t<nZ.allocated.length;++t)void 0!==nZ.allocated[t]&&++c;return c},aZ={toValue:c=>(c||throwBindingError("Cannot use deleted val. handle = "+c),nZ.get(c).value),toHandle:c=>{switch(c){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return nZ.allocate({refcount:1,value:c})}}};function simpleReadValueFromPointer(c){return this.fromWireType(Vl[c>>2])}var embindRepr=c=>{if(null===c)return"null";var t=typeof c;return"object"===t||"array"===t||"function"===t?c.toString():""+c},floatReadValueFromPointer=(c,t)=>{switch(t){case 4:return function(c){return this.fromWireType(sl[c>>2])};case 8:return function(c){return this.fromWireType(ul[c>>3])};default:throw new TypeError(`invalid float width (${t}): ${c}`)}},integerReadValueFromPointer=(c,t,e)=>{switch(t){case 1:return e?c=>Wl[c>>0]:c=>rl[c>>0];case 2:return e?c=>ol[c>>1]:c=>hl[c>>1];case 4:return e?c=>Vl[c>>2]:c=>yl[c>>2];default:throw new TypeError(`invalid integer width (${t}): ${c}`)}},XZ="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,UTF16ToString=(c,t)=>{for(var e=c,n=e>>1,r=n+t/2;!(n>=r)&&hl[n];)++n;if((e=n<<1)-c>32&&XZ)return XZ.decode(rl.slice(c,e));for(var o="",u=0;!(u>=t/2);++u){var M=ol[c+2*u>>1];if(0==M)break;o+=String.fromCharCode(M)}return o},stringToUTF16=(c,t,e)=>{if(void 0===e&&(e=2147483647),e<2)return 0;for(var n=t,r=(e-=2)<2*c.length?e/2:c.length,o=0;o<r;++o){var u=c.charCodeAt(o);ol[t>>1]=u,t+=2}return ol[t>>1]=0,t-n},lengthBytesUTF16=c=>2*c.length,UTF32ToString=(c,t)=>{for(var e=0,n="";!(e>=t/4);){var r=Vl[c+4*e>>2];if(0==r)break;if(++e,r>=65536){var o=r-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(r)}return n},stringToUTF32=(c,t,e)=>{if(void 0===e&&(e=2147483647),e<4)return 0;for(var n=t,r=n+e-4,o=0;o<c.length;++o){var u=c.charCodeAt(o);if(u>=55296&&u<=57343)u=65536+((1023&u)<<10)|1023&c.charCodeAt(++o);if(Vl[t>>2]=u,(t+=4)+4>r)break}return Vl[t>>2]=0,t-n},lengthBytesUTF32=c=>{for(var t=0,e=0;e<c.length;++e){var n=c.charCodeAt(e);n>=55296&&n<=57343&&++e,t+=4}return t},callUserCallback=c=>{if(!Nl&&!Rl)try{c(),(()=>{if(!Nl&&!keepRuntimeAlive())try{el?kZ(il):_exit(il)}catch(c){handleException(c)}})()}catch(c){handleException(c)}},__emscripten_thread_mailbox_await=c=>{if("function"==typeof Atomics.waitAsync){Atomics.waitAsync(Vl,c>>2,c).value.then(checkMailbox);var t=c+128;Atomics.store(Vl,t>>2,1)}};r.__emscripten_thread_mailbox_await=__emscripten_thread_mailbox_await;var checkMailbox=()=>{var c=JZ();c&&(__emscripten_thread_mailbox_await(c),callUserCallback(__emscripten_check_mailbox))};r.checkMailbox=checkMailbox;var GZ=[];function __mmap_js(c,t,e,n,r,o,u,M){if(el)return proxyToMainThread(14,1,c,t,e,n,r,o,u,M);var ll=convertI32PairToI53Checked(r,o);try{if(isNaN(ll))return 61;var Zl=Ml.getStreamFromFD(n),cl=Cl.mmap(Zl,c,ll,t,e),dl=cl.ptr;return Vl[u>>2]=cl.allocated,yl[M>>2]=dl,0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}function __munmap_js(c,t,e,n,r,o,u){if(el)return proxyToMainThread(15,1,c,t,e,n,r,o,u);var M=convertI32PairToI53Checked(o,u);try{if(isNaN(M))return 61;var ll=Ml.getStreamFromFD(r);2&e&&Ml.doMsync(c,ll,t,n,M),Cl.munmap(ll)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}}var iZ;iZ=()=>performance.timeOrigin+performance.now();var WZ={},getEnvStrings=()=>{if(!getEnvStrings.strings){var c={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:Zl||"./this.program"};for(var t in WZ)void 0===WZ[t]?delete c[t]:c[t]=WZ[t];var e=[];for(var t in c)e.push(`${t}=${c[t]}`);getEnvStrings.strings=e}return getEnvStrings.strings},_environ_get=function(c,t){if(el)return proxyToMainThread(16,1,c,t);var e=0;return getEnvStrings().forEach(((n,r)=>{var o=t+e;yl[c+4*r>>2]=o,((c,t)=>{for(var e=0;e<c.length;++e)Wl[t++>>0]=c.charCodeAt(e);Wl[t>>0]=0})(n,o),e+=n.length+1})),0},_environ_sizes_get=function(c,t){if(el)return proxyToMainThread(17,1,c,t);var e=getEnvStrings();yl[c>>2]=e.length;var n=0;return e.forEach((c=>n+=c.length+1)),yl[t>>2]=n,0};function _fd_close(c){if(el)return proxyToMainThread(18,1,c);try{var t=Ml.getStreamFromFD(c);return Cl.close(t),0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return c.errno}}function _fd_read(c,t,e,n){if(el)return proxyToMainThread(19,1,c,t,e,n);try{var r=((c,t,e,n)=>{for(var r=0,o=0;o<e;o++){var u=yl[t>>2],M=yl[t+4>>2];t+=8;var ll=Cl.read(c,Wl,u,M,n);if(ll<0)return-1;if(r+=ll,ll<M)break;void 0!==n&&(n+=ll)}return r})(Ml.getStreamFromFD(c),t,e);return yl[n>>2]=r,0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return c.errno}}function _fd_seek(c,t,e,n,r){if(el)return proxyToMainThread(20,1,c,t,e,n,r);var o=convertI32PairToI53Checked(t,e);try{if(isNaN(o))return 61;var u=Ml.getStreamFromFD(c);return Cl.llseek(u,o,n),gl=[u.position>>>0,(Tl=u.position,+Math.abs(Tl)>=1?Tl>0?+Math.floor(Tl/4294967296)>>>0:~~+Math.ceil((Tl-+(~~Tl>>>0))/4294967296)>>>0:0)],Vl[r>>2]=gl[0],Vl[r+4>>2]=gl[1],u.getdents&&0===o&&0===n&&(u.getdents=null),0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return c.errno}}function _fd_sync(c){if(el)return proxyToMainThread(21,1,c);try{var t=Ml.getStreamFromFD(c);return t.stream_ops&&t.stream_ops.fsync?t.stream_ops.fsync(t):0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return c.errno}}function _fd_write(c,t,e,n){if(el)return proxyToMainThread(22,1,c,t,e,n);try{var r=((c,t,e,n)=>{for(var r=0,o=0;o<e;o++){var u=yl[t>>2],M=yl[t+4>>2];t+=8;var ll=Cl.write(c,Wl,u,M,n);if(ll<0)return-1;r+=ll,void 0!==n&&(n+=ll)}return r})(Ml.getStreamFromFD(c),t,e);return yl[n>>2]=r,0}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return c.errno}}var isLeapYear=c=>c%4==0&&(c%100!=0||c%400==0),rZ=[31,29,31,30,31,30,31,31,30,31,30,31],oZ=[31,28,31,30,31,30,31,31,30,31,30,31],_strftime=(c,t,e,n)=>{var r=yl[n+40>>2],o={tm_sec:Vl[n>>2],tm_min:Vl[n+4>>2],tm_hour:Vl[n+8>>2],tm_mday:Vl[n+12>>2],tm_mon:Vl[n+16>>2],tm_year:Vl[n+20>>2],tm_wday:Vl[n+24>>2],tm_yday:Vl[n+28>>2],tm_isdst:Vl[n+32>>2],tm_gmtoff:Vl[n+36>>2],tm_zone:r?UTF8ToString(r):""},u=UTF8ToString(e),M={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var ll in M)u=u.replace(new RegExp(ll,"g"),M[ll]);var Zl=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],cl=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(c,t,e){for(var n="number"==typeof c?c.toString():c||"";n.length<t;)n=e[0]+n;return n}function leadingNulls(c,t){return leadingSomething(c,t,"0")}function compareByDay(c,t){function sgn(c){return c<0?-1:c>0?1:0}var e;return 0===(e=sgn(c.getFullYear()-t.getFullYear()))&&0===(e=sgn(c.getMonth()-t.getMonth()))&&(e=sgn(c.getDate()-t.getDate())),e}function getFirstWeekStartDate(c){switch(c.getDay()){case 0:return new Date(c.getFullYear()-1,11,29);case 1:return c;case 2:return new Date(c.getFullYear(),0,3);case 3:return new Date(c.getFullYear(),0,2);case 4:return new Date(c.getFullYear(),0,1);case 5:return new Date(c.getFullYear()-1,11,31);case 6:return new Date(c.getFullYear()-1,11,30)}}function getWeekBasedYear(c){var t=((c,t)=>{for(var e=new Date(c.getTime());t>0;){var n=isLeapYear(e.getFullYear()),r=e.getMonth(),o=(n?rZ:oZ)[r];if(!(t>o-e.getDate()))return e.setDate(e.getDate()+t),e;t-=o-e.getDate()+1,e.setDate(1),r<11?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e})(new Date(c.tm_year+1900,0,1),c.tm_yday),e=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),r=getFirstWeekStartDate(e),o=getFirstWeekStartDate(n);return compareByDay(r,t)<=0?compareByDay(o,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var dl={"%a":c=>Zl[c.tm_wday].substring(0,3),"%A":c=>Zl[c.tm_wday],"%b":c=>cl[c.tm_mon].substring(0,3),"%B":c=>cl[c.tm_mon],"%C":c=>leadingNulls((c.tm_year+1900)/100|0,2),"%d":c=>leadingNulls(c.tm_mday,2),"%e":c=>leadingSomething(c.tm_mday,2," "),"%g":c=>getWeekBasedYear(c).toString().substring(2),"%G":c=>getWeekBasedYear(c),"%H":c=>leadingNulls(c.tm_hour,2),"%I":c=>{var t=c.tm_hour;return 0==t?t=12:t>12&&(t-=12),leadingNulls(t,2)},"%j":c=>leadingNulls(c.tm_mday+((c,t)=>{for(var e=0,n=0;n<=t;e+=c[n++]);return e})(isLeapYear(c.tm_year+1900)?rZ:oZ,c.tm_mon-1),3),"%m":c=>leadingNulls(c.tm_mon+1,2),"%M":c=>leadingNulls(c.tm_min,2),"%n":()=>"\n","%p":c=>c.tm_hour>=0&&c.tm_hour<12?"AM":"PM","%S":c=>leadingNulls(c.tm_sec,2),"%t":()=>"\t","%u":c=>c.tm_wday||7,"%U":c=>{var t=c.tm_yday+7-c.tm_wday;return leadingNulls(Math.floor(t/7),2)},"%V":c=>{var t=Math.floor((c.tm_yday+7-(c.tm_wday+6)%7)/7);if((c.tm_wday+371-c.tm_yday-2)%7<=2&&t++,t){if(53==t){var e=(c.tm_wday+371-c.tm_yday)%7;4==e||3==e&&isLeapYear(c.tm_year)||(t=1)}}else{t=52;var n=(c.tm_wday+7-c.tm_yday-1)%7;(4==n||5==n&&isLeapYear(c.tm_year%400-1))&&t++}return leadingNulls(t,2)},"%w":c=>c.tm_wday,"%W":c=>{var t=c.tm_yday+7-(c.tm_wday+6)%7;return leadingNulls(Math.floor(t/7),2)},"%y":c=>(c.tm_year+1900).toString().substring(2),"%Y":c=>c.tm_year+1900,"%z":c=>{var t=c.tm_gmtoff,e=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(e?"+":"-")+String("0000"+t).slice(-4)},"%Z":c=>c.tm_zone,"%%":()=>"%"};for(var ll in u=u.replace(/%%/g,"\0\0"),dl)u.includes(ll)&&(u=u.replace(new RegExp(ll,"g"),dl[ll](o)));var tl,el,ml=intArrayFromString(u=u.replace(/\0\0/g,"%"),!1);return ml.length>t?0:(tl=ml,el=c,Wl.set(tl,el),ml.length-1)};Pl.init();var hZ,VZ,yZ,FSNode=function(c,t,e,n){c||(c=this),this.parent=c,this.mount=c.mount,this.mounted=null,this.id=Cl.nextInode++,this.name=t,this.mode=e,this.node_ops={},this.stream_ops={},this.rdev=n},sZ=365,uZ=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&sZ)===sZ},set:function(c){c?this.mode|=sZ:this.mode&=-366}},write:{get:function(){return(this.mode&uZ)===uZ},set:function(c){c?this.mode|=uZ:this.mode&=-147}},isFolder:{get:function(){return Cl.isDir(this.mode)}},isDevice:{get:function(){return Cl.isChrdev(this.mode)}}}),Cl.FSNode=FSNode,Cl.createPreloadedFile=(c,t,e,n,r,o,u,M,ll,Zl)=>{var cl=t?zl.resolve(fl.join2(c,t)):c;function processData(e){function finish(e){Zl&&Zl(),M||((c,t,e,n,r,o)=>{Cl.createDataFile(c,t,e,n,r,o)})(c,t,e,n,r,ll),o&&o(),removeRunDependency()}((c,t,e,n)=>{"undefined"!=typeof Browser&&Browser.init();var r=!1;return Ll.forEach((o=>{r||o.canHandle(t)&&(o.handle(c,t,e,n),r=!0)})),r})(e,cl,finish,(()=>{u&&u(),removeRunDependency()}))||finish(e)}addRunDependency(),"string"==typeof e?asyncLoad(e,(c=>processData(c)),u):processData(e)},Cl.staticInit(),(()=>{for(var c=new Array(256),t=0;t<256;++t)c[t]=String.fromCharCode(t);Al=c})(),_l=r.BindingError=class extends Error{constructor(c){super(c),this.name="BindingError"}},$l=r.InternalError=class extends Error{constructor(c){super(c),this.name="InternalError"}},Object.assign(ClassHandle.prototype,{isAliasOf(c){if(!(this instanceof ClassHandle))return!1;if(!(c instanceof ClassHandle))return!1;var t=this.$$.ptrType.registeredClass,e=this.$$.ptr;c.$$=c.$$;for(var n=c.$$.ptrType.registeredClass,r=c.$$.ptr;t.baseClass;)e=t.upcast(e),t=t.baseClass;for(;n.baseClass;)r=n.upcast(r),n=n.baseClass;return t===n&&e===r},clone(){if(this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var c,t=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:(c=this.$$,{count:c.count,deleteScheduled:c.deleteScheduled,preservePointerOnDelete:c.preservePointerOnDelete,ptr:c.ptr,ptrType:c.ptrType,smartPtr:c.smartPtr,smartPtrType:c.smartPtrType})}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t},delete(){this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),detachFinalizer(this),releaseClassHandle(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},isDeleted(){return!this.$$.ptr},deleteLater(){return this.$$.ptr||throwInstanceAlreadyDeleted(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&throwBindingError("Object already scheduled for deletion"),eZ.push(this),1===eZ.length&&cZ&&cZ(flushPendingDeletes),this.$$.deleteScheduled=!0,this}}),r.getInheritedInstanceCount=getInheritedInstanceCount,r.getLiveInheritedInstances=getLiveInheritedInstances,r.flushPendingDeletes=flushPendingDeletes,r.setDelayFunction=setDelayFunction,Object.assign(RegisteredPointer.prototype,{getPointee(c){return this.rawGetPointee&&(c=this.rawGetPointee(c)),c},destructor(c){this.rawDestructor&&this.rawDestructor(c)},argPackAdvance:8,readValueFromPointer:readPointer,deleteObject(c){null!==c&&c.delete()},fromWireType:RegisteredPointer_fromWireType}),bZ=r.UnboundTypeError=(hZ=Error,(yZ=createNamedFunction(VZ="UnboundTypeError",(function(c){this.name=VZ,this.message=c;var t=new Error(c).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}))).prototype=Object.create(hZ.prototype),yZ.prototype.constructor=yZ,yZ.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},yZ),Object.assign(HandleAllocator.prototype,{get(c){return this.allocated[c]},has(c){return void 0!==this.allocated[c]},allocate(c){var t=this.freelist.pop()||this.allocated.length;return this.allocated[t]=c,t},free(c){this.allocated[c]=void 0,this.freelist.push(c)}}),nZ.allocated.push({value:void 0},{value:null},{value:!0},{value:!1}),nZ.reserved=nZ.allocated.length,r.count_emval_handles=count_emval_handles;var RZ,pZ=[_proc_exit,exitOnMainThread,pthreadCreateProxied,function(c,t,e){if(el)return proxyToMainThread(3,1,c,t,e);Ml.varargs=e;try{var n=Ml.getStreamFromFD(c);switch(t){case 0:if((r=Ml.get())<0)return-28;for(;Cl.streams[r];)r++;return Cl.createStream(n,r).fd;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:var r=Ml.get();return n.flags|=r,0;case 5:r=Ml.getp();return ol[r+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return o=28,Vl[___errno_location()>>2]=o,-1}}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}var o},___syscall_fstat64,___syscall_ftruncate64,function(c,t,e){if(el)return proxyToMainThread(6,1,c,t,e);Ml.varargs=e;try{var n=Ml.getStreamFromFD(c);switch(t){case 21509:case 21510:case 21511:case 21512:case 21524:case 21515:return n.tty?0:-59;case 21505:if(!n.tty)return-59;if(n.tty.ops.ioctl_tcgets){var r=n.tty.ops.ioctl_tcgets(n),o=Ml.getp();Vl[o>>2]=r.c_iflag||0,Vl[o+4>>2]=r.c_oflag||0,Vl[o+8>>2]=r.c_cflag||0,Vl[o+12>>2]=r.c_lflag||0;for(var u=0;u<32;u++)Wl[o+u+17>>0]=r.c_cc[u]||0;return 0}return 0;case 21506:case 21507:case 21508:if(!n.tty)return-59;if(n.tty.ops.ioctl_tcsets){o=Ml.getp();var M=Vl[o>>2],ll=Vl[o+4>>2],Zl=Vl[o+8>>2],cl=Vl[o+12>>2],dl=[];for(u=0;u<32;u++)dl.push(Wl[o+u+17>>0]);return n.tty.ops.ioctl_tcsets(n.tty,t,{c_iflag:M,c_oflag:ll,c_cflag:Zl,c_lflag:cl,c_cc:dl})}return 0;case 21519:if(!n.tty)return-59;o=Ml.getp();return Vl[o>>2]=0,0;case 21520:return n.tty?-28:-59;case 21531:o=Ml.getp();return Cl.ioctl(n,t,o);case 21523:if(!n.tty)return-59;if(n.tty.ops.ioctl_tiocgwinsz){var tl=n.tty.ops.ioctl_tiocgwinsz(n.tty);o=Ml.getp();ol[o>>1]=tl[0],ol[o+2>>1]=tl[1]}return 0;default:return-28}}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}},function(c,t){if(el)return proxyToMainThread(7,1,c,t);try{return c=Ml.getStr(c),Ml.doStat(Cl.lstat,c,t)}catch(c){if(void 0===Cl||"ErrnoError"!==c.name)throw c;return-c.errno}},___syscall_newfstatat,___syscall_openat,___syscall_readlinkat,___syscall_renameat,___syscall_stat64,___syscall_unlinkat,__mmap_js,__munmap_js,_environ_get,_environ_sizes_get,_fd_close,_fd_read,_fd_seek,_fd_sync,_fd_write],YZ={b:(c,t,e,n)=>{abort(`Assertion failed: ${UTF8ToString(c)}, at: `+[t?UTF8ToString(t):"unknown filename",e,n?UTF8ToString(n):"unknown function"])},w:c=>{var t=new ExceptionInfo(c);return t.get_caught()||(t.set_caught(!0)),t.set_rethrown(!1),Ol.push(t),___cxa_increment_exception_refcount(t.excPtr),t.get_exception_ptr()},v:()=>{_setThrew(0,0);var c=Ol.pop();___cxa_decrement_exception_refcount(c.excPtr),Dl=0},d:()=>findMatchingCatch([]),k:c=>findMatchingCatch([c]),ya:()=>{var c=Ol.pop();c||abort("no exception to throw");var t=c.excPtr;throw c.get_rethrown()||(Ol.push(c),c.set_rethrown(!0),c.set_caught(!1)),Dl=t},n:(c,t,e)=>{throw new ExceptionInfo(c).init(t,e),Dl=c},ia:c=>{HZ(c,!dl,1,!cl,65536,!1),Pl.threadInitTLS()},E:c=>{el?postMessage({cmd:"cleanupThread",thread:c}):cleanupThread(c)},fa:___pthread_create_js,h:c=>{throw Dl||(Dl=c),Dl},oa:___syscall_fstat64,W:___syscall_ftruncate64,ma:___syscall_newfstatat,pa:___syscall_openat,ea:___syscall_readlinkat,da:___syscall_renameat,na:___syscall_stat64,aa:___syscall_unlinkat,X:(c,t,e,n,r)=>{},ua:(c,t,e,n)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:function(c){return!!c},toWireType:function(c,t){return t?e:n},argPackAdvance:8,readValueFromPointer:function(c){return this.fromWireType(rl[c])},destructorFunction:null})},S:(c,t,e,n,o,u,M,ll,Zl,cl,dl,tl,el)=>{dl=readLatin1String(dl),u=embind__requireFunction(o,u),ll&&(ll=embind__requireFunction(M,ll)),cl&&(cl=embind__requireFunction(Zl,cl)),el=embind__requireFunction(tl,el);var ml=(c=>{if(void 0===c)return"_unknown";var t=(c=c.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return t>=48&&t<=57?`_${c}`:c})(dl);((c,t,e)=>{r.hasOwnProperty(c)?((void 0===e||void 0!==r[c].overloadTable&&void 0!==r[c].overloadTable[e])&&throwBindingError(`Cannot register public name '${c}' twice`),ensureOverloadTable(r,c,c),r.hasOwnProperty(e)&&throwBindingError(`Cannot register multiple overloads of a function with the same number of arguments (${e})!`),r[c].overloadTable[e]=t):(r[c]=t,void 0!==e&&(r[c].numArguments=e))})(ml,(function(){throwUnboundTypeError(`Cannot construct ${dl} due to unbound types`,[n])})),whenDependentTypesAreResolved([c,t,e],n?[n]:[],(function(t){var e,o;t=t[0],o=n?(e=t.registeredClass).instancePrototype:ClassHandle.prototype;var M=createNamedFunction(dl,(function(){if(Object.getPrototypeOf(this)!==Zl)throw new _l("Use 'new' to construct "+dl);if(void 0===tl.constructor_body)throw new _l(dl+" has no accessible constructor");var c=tl.constructor_body[arguments.length];if(void 0===c)throw new _l(`Tried to invoke ctor of ${dl} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(tl.constructor_body).toString()}) parameters instead!`);return c.apply(this,arguments)})),Zl=Object.create(o,{constructor:{value:M}});M.prototype=Zl;var tl=new RegisteredClass(dl,M,Zl,el,e,u,ll,cl);tl.baseClass&&(void 0===tl.baseClass.__derivedClasses&&(tl.baseClass.__derivedClasses=[]),tl.baseClass.__derivedClasses.push(tl));var bl=new RegisteredPointer(dl,tl,!0,!1,!1),nl=new RegisteredPointer(dl+"*",tl,!1,!1,!1),al=new RegisteredPointer(dl+" const*",tl,!1,!0,!1);return tZ[c]={pointerType:nl,constPointerType:al},((c,t,e)=>{r.hasOwnProperty(c)||throwInternalError("Replacing nonexistant public symbol"),void 0!==r[c].overloadTable&&void 0!==e?r[c].overloadTable[e]=t:(r[c]=t,r[c].argCount=e)})(ml,M),[bl,nl,al]}))},R:(c,t,e,n,r,o)=>{var u=heap32VectorToArray(t,e);r=embind__requireFunction(n,r),whenDependentTypesAreResolved([],[c],(function(c){var e=`constructor ${(c=c[0]).name}`;if(void 0===c.registeredClass.constructor_body&&(c.registeredClass.constructor_body=[]),void 0!==c.registeredClass.constructor_body[t-1])throw new _l(`Cannot register multiple constructors with identical number of parameters (${t-1}) for class '${c.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return c.registeredClass.constructor_body[t-1]=()=>{throwUnboundTypeError(`Cannot construct ${c.name} due to unbound types`,u)},whenDependentTypesAreResolved([],u,(n=>(n.splice(1,0,null),c.registeredClass.constructor_body[t-1]=craftInvokerFunction(e,n,null,r,o),[]))),[]}))},m:(c,t,e,n,r,o,u,M,ll)=>{var Zl=heap32VectorToArray(e,n);t=(c=>{const t=(c=c.trim()).indexOf("(");return-1!==t?c.substr(0,t):c})(t=readLatin1String(t)),o=embind__requireFunction(r,o),whenDependentTypesAreResolved([],[c],(function(c){var n=`${(c=c[0]).name}.${t}`;function unboundTypesHandler(){throwUnboundTypeError(`Cannot call ${n} due to unbound types`,Zl)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]),M&&c.registeredClass.pureVirtualFunctions.push(t);var r=c.registeredClass.instancePrototype,cl=r[t];return void 0===cl||void 0===cl.overloadTable&&cl.className!==c.name&&cl.argCount===e-2?(unboundTypesHandler.argCount=e-2,unboundTypesHandler.className=c.name,r[t]=unboundTypesHandler):(ensureOverloadTable(r,t,n),r[t].overloadTable[e-2]=unboundTypesHandler),whenDependentTypesAreResolved([],Zl,(function(M){var Zl=craftInvokerFunction(n,M,c,o,u,ll);return void 0===r[t].overloadTable?(Zl.argCount=e-2,r[t]=Zl):r[t].overloadTable[e-2]=Zl,[]})),[]}))},ta:(c,t)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:c=>{var t=aZ.toValue(c);return __emval_decref(c),t},toWireType:(c,t)=>aZ.toHandle(t),argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction:null})},K:(c,t,e)=>{registerType(c,{name:t=readLatin1String(t),fromWireType:c=>c,toWireType:(c,t)=>t,argPackAdvance:8,readValueFromPointer:floatReadValueFromPointer(t,e),destructorFunction:null})},q:(c,t,e,n,r)=>{t=readLatin1String(t),-1===r&&(r=4294967295);var fromWireType=c=>c;if(0===n){var o=32-8*e;fromWireType=c=>c<<o>>>o}var u=t.includes("unsigned");registerType(c,{name:t,fromWireType:fromWireType,toWireType:u?function(c,t){return this.name,t>>>0}:function(c,t){return this.name,t},argPackAdvance:8,readValueFromPointer:integerReadValueFromPointer(t,e,0!==n),destructorFunction:null})},l:(c,t,e)=>{var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];function decodeMemoryView(c){var t=yl[c>>2],e=yl[c+4>>2];return new n(Wl.buffer,e,t)}registerType(c,{name:e=readLatin1String(e),fromWireType:decodeMemoryView,argPackAdvance:8,readValueFromPointer:decodeMemoryView},{ignoreDuplicateRegistrations:!0})},J:(c,t)=>{var e="std::string"===(t=readLatin1String(t));registerType(c,{name:t,fromWireType(c){var t,n=yl[c>>2],r=c+4;if(e)for(var o=r,u=0;u<=n;++u){var M=r+u;if(u==n||0==rl[M]){var ll=UTF8ToString(o,M-o);void 0===t?t=ll:(t+=String.fromCharCode(0),t+=ll),o=M+1}}else{var Zl=new Array(n);for(u=0;u<n;++u)Zl[u]=String.fromCharCode(rl[r+u]);t=Zl.join("")}return _free(c),t},toWireType(c,t){var n;t instanceof ArrayBuffer&&(t=new Uint8Array(t));var r="string"==typeof t;r||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||throwBindingError("Cannot pass non-string to std::string"),n=e&&r?lengthBytesUTF8(t):t.length;var o=_malloc(4+n+1),u=o+4;if(yl[o>>2]=n,e&&r)stringToUTF8(t,u,n+1);else if(r)for(var M=0;M<n;++M){var ll=t.charCodeAt(M);ll>255&&(_free(u),throwBindingError("String has UTF-16 code units that do not fit in 8 bits")),rl[u+M]=ll}else for(M=0;M<n;++M)rl[u+M]=t[M];return null!==c&&c.push(_free,o),o},argPackAdvance:8,readValueFromPointer:readPointer,destructorFunction(c){_free(c)}})},B:(c,t,e)=>{var n,r,o,u,M;e=readLatin1String(e),2===t?(n=UTF16ToString,r=stringToUTF16,u=lengthBytesUTF16,o=()=>hl,M=1):4===t&&(n=UTF32ToString,r=stringToUTF32,u=lengthBytesUTF32,o=()=>yl,M=2),registerType(c,{name:e,fromWireType:c=>{for(var e,r=yl[c>>2],u=o(),ll=c+4,Zl=0;Zl<=r;++Zl){var cl=c+4+Zl*t;if(Zl==r||0==u[cl>>M]){var dl=n(ll,cl-ll);void 0===e?e=dl:(e+=String.fromCharCode(0),e+=dl),ll=cl+t}}return _free(c),e},toWireType:(c,n)=>{"string"!=typeof n&&throwBindingError(`Cannot pass non-string to C++ string type ${e}`);var o=u(n),ll=_malloc(4+o+t);return yl[ll>>2]=o>>M,r(n,ll+4,o+t),null!==c&&c.push(_free,ll),ll},argPackAdvance:8,readValueFromPointer:simpleReadValueFromPointer,destructorFunction(c){_free(c)}})},va:(c,t)=>{registerType(c,{isVoid:!0,name:t=readLatin1String(t),argPackAdvance:0,fromWireType:()=>{},toWireType:(c,t)=>{}})},sa:()=>1,ba:(c,t,e)=>{if(c==t)setTimeout((()=>checkMailbox()));else if(el)postMessage({targetThread:c,cmd:"checkMailbox"});else{var n=Pl.pthreads[c];if(!n)return;n.postMessage({cmd:"checkMailbox"})}},ga:(c,t,e,n)=>{GZ.length=e;for(var r=n>>3,o=0;o<e;o++)GZ[o]=ul[r+o];var u=pZ[c];Pl.currentProxiedOperationCallerThread=t;var M=u.apply(null,GZ);return Pl.currentProxiedOperationCallerThread=0,M},ha:__emscripten_thread_mailbox_await,ra:c=>{},Ca:__emval_decref,Da:c=>{c>4&&(nZ.get(c).refcount+=1)},s:(c,t)=>{var e,n,r;n="_emval_take_value",void 0===(r=lZ[e=c])&&throwBindingError(n+" has unknown type "+getTypeName(e));var o=(c=r).readValueFromPointer(t);return aZ.toHandle(o)},T:__mmap_js,U:__munmap_js,c:()=>{abort("")},F:()=>{},H:()=>Date.now(),qa:()=>{throw Kl+=1,"unwind"},ca:()=>rl.length,p:iZ,M:()=>navigator.hardwareConcurrency,$:c=>{rl.length;abort("OOM")},ja:_environ_get,ka:_environ_sizes_get,L:_exit,I:_fd_close,G:_fd_read,V:_fd_seek,la:_fd_sync,A:_fd_write,Z:(c,t)=>(randomFill(rl.subarray(c,c+t)),0),Ba:function(c,t){var e=stackSave();try{return getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},D:function(c){var t=stackSave();try{return getWasmTableEntry(c)()}catch(c){if(stackRestore(t),c!==c+0)throw c;_setThrew(1,0)}},g:function(c,t){var e=stackSave();try{return getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},xa:function(c,t,e,n,r){var o=stackSave();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},Aa:function(c,t,e){var n=stackSave();try{return getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},e:function(c,t,e){var n=stackSave();try{return getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},f:function(c,t,e,n){var r=stackSave();try{return getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},z:function(c,t,e,n,r){var o=stackSave();try{return getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},y:function(c,t,e,n,r,o){var u=stackSave();try{return getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(stackRestore(u),c!==c+0)throw c;_setThrew(1,0)}},Q:function(c,t,e,n,r,o,u){var M=stackSave();try{return getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(stackRestore(M),c!==c+0)throw c;_setThrew(1,0)}},Y:function(c,t,e,n){var r=stackSave();try{return UZ(c,t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},r:function(c){var t=stackSave();try{getWasmTableEntry(c)()}catch(c){if(stackRestore(t),c!==c+0)throw c;_setThrew(1,0)}},j:function(c,t){var e=stackSave();try{getWasmTableEntry(c)(t)}catch(c){if(stackRestore(e),c!==c+0)throw c;_setThrew(1,0)}},i:function(c,t,e){var n=stackSave();try{getWasmTableEntry(c)(t,e)}catch(c){if(stackRestore(n),c!==c+0)throw c;_setThrew(1,0)}},t:function(c,t,e,n){var r=stackSave();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},C:function(c,t,e,n,r){var o=stackSave();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},o:function(c,t,e,n){var r=stackSave();try{getWasmTableEntry(c)(t,e,n)}catch(c){if(stackRestore(r),c!==c+0)throw c;_setThrew(1,0)}},za:function(c,t,e,n,r,o,u,M){var ll=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M)}catch(c){if(stackRestore(ll),c!==c+0)throw c;_setThrew(1,0)}},u:function(c,t,e,n,r){var o=stackSave();try{getWasmTableEntry(c)(t,e,n,r)}catch(c){if(stackRestore(o),c!==c+0)throw c;_setThrew(1,0)}},O:function(c,t,e,n,r,o,u){var M=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u)}catch(c){if(stackRestore(M),c!==c+0)throw c;_setThrew(1,0)}},P:function(c,t,e,n,r,o){var u=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o)}catch(c){if(stackRestore(u),c!==c+0)throw c;_setThrew(1,0)}},x:function(c,t,e,n,r,o,u,M,ll,Zl){var cl=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll,Zl)}catch(c){if(stackRestore(cl),c!==c+0)throw c;_setThrew(1,0)}},N:function(c,t,e,n,r,o,u,M,ll){var Zl=stackSave();try{getWasmTableEntry(c)(t,e,n,r,o,u,M,ll)}catch(c){if(stackRestore(Zl),c!==c+0)throw c;_setThrew(1,0)}},a:nl||r.wasmMemory,_:(c,t,e,n,r)=>_strftime(c,t,e,n),wa:function(c,t,e,n){const r=jl.length,o=new Uint8Array(rl.slice(c+t,c+e));try{var u=new WebAssembly.Module(o),M=new WebAssembly.Instance(u,{env:{memory:nl}});for(var ll in M.exports){var Zl=M.exports[ll];addFunction(Zl)}return r<jl.length?r:n}catch(c){return console.log(c),n}}},FZ=function(){var c,t,e,o,u={a:YZ};function receiveInstance(c,t){var e;return FZ=c.exports,registerTLSInit(FZ.Ka),jl=FZ.Ga,e=FZ.Ea,Fl.unshift(e),al=t,removeRunDependency(),FZ}if(addRunDependency(),r.instantiateWasm)try{return r.instantiateWasm(u,receiveInstance)}catch(c){Gl(`Module.instantiateWasm callback failed with error: ${c}`),n(c)}return(c=bl,t=Ul,e=u,o=function(c){receiveInstance(c.instance,c.module)},c||"function"!=typeof WebAssembly.instantiateStreaming||isDataURI(t)||"function"!=typeof fetch?instantiateArrayBuffer(t,e,o):fetch(t,{credentials:"same-origin"}).then((c=>WebAssembly.instantiateStreaming(c,e).then(o,(function(c){return Gl(`wasm streaming compile failed: ${c}`),Gl("falling back to ArrayBuffer instantiation"),instantiateArrayBuffer(t,e,o)}))))).catch(n),{}}(),JZ=r._pthread_self=()=>(JZ=r._pthread_self=FZ.Fa)(),_malloc=c=>(_malloc=FZ.Ha)(c),_free=c=>(_free=FZ.Ia)(c),___errno_location=()=>(___errno_location=FZ.Ja)(),IZ=(r.__emscripten_tls_init=()=>(r.__emscripten_tls_init=FZ.Ka)(),(c,t)=>(IZ=FZ.La)(c,t)),___getTypeName=c=>(___getTypeName=FZ.Ma)(c),NZ=(r.__embind_initialize_bindings=()=>(r.__embind_initialize_bindings=FZ.Na)(),()=>(NZ=FZ.Oa)()),HZ=r.__emscripten_thread_init=(c,t,e,n,o,u)=>(HZ=r.__emscripten_thread_init=FZ.Pa)(c,t,e,n,o,u),vZ=(r.__emscripten_thread_crashed=()=>(r.__emscripten_thread_crashed=FZ.Qa)(),r._fflush=c=>(vZ=r._fflush=FZ.Ra)(c)),__emscripten_run_on_main_thread_js=(c,t,e,n)=>(__emscripten_run_on_main_thread_js=FZ.Sa)(c,t,e,n),__emscripten_thread_free_data=c=>(__emscripten_thread_free_data=FZ.Ta)(c),kZ=r.__emscripten_thread_exit=c=>(kZ=r.__emscripten_thread_exit=FZ.Ua)(c),__emscripten_check_mailbox=()=>(__emscripten_check_mailbox=FZ.Va)(),_setThrew=(c,t)=>(_setThrew=FZ.Wa)(c,t),setTempRet0=c=>(setTempRet0=FZ.Xa)(c),_emscripten_stack_set_limits=(c,t)=>(_emscripten_stack_set_limits=FZ.Ya)(c,t),stackSave=()=>(stackSave=FZ.Za)(),stackRestore=c=>(stackRestore=FZ._a)(c),stackAlloc=c=>(stackAlloc=FZ.$a)(c),___cxa_decrement_exception_refcount=c=>(___cxa_decrement_exception_refcount=FZ.ab)(c),___cxa_increment_exception_refcount=c=>(___cxa_increment_exception_refcount=FZ.bb)(c),___cxa_can_catch=(c,t,e)=>(___cxa_can_catch=FZ.cb)(c,t,e),___cxa_is_pointer_type=c=>(___cxa_is_pointer_type=FZ.db)(c),UZ=(r.dynCall_viijj=(c,t,e,n,o,u,M)=>(r.dynCall_viijj=FZ.eb)(c,t,e,n,o,u,M),r.dynCall_viiijjj=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_viiijjj=FZ.fb)(c,t,e,n,o,u,M,ll,Zl,cl),r.dynCall_iiiij=(c,t,e,n,o,u)=>(r.dynCall_iiiij=FZ.gb)(c,t,e,n,o,u),r.dynCall_jii=(c,t,e)=>(r.dynCall_jii=FZ.hb)(c,t,e),r.dynCall_jjj=(c,t,e,n,o)=>(r.dynCall_jjj=FZ.ib)(c,t,e,n,o),r.dynCall_iiiijj=(c,t,e,n,o,u,M,ll)=>(r.dynCall_iiiijj=FZ.jb)(c,t,e,n,o,u,M,ll),r.dynCall_viijji=(c,t,e,n,o,u,M,ll)=>(r.dynCall_viijji=FZ.kb)(c,t,e,n,o,u,M,ll),r.dynCall_iiijj=(c,t,e,n,o,u,M)=>(r.dynCall_iiijj=FZ.lb)(c,t,e,n,o,u,M),r.dynCall_viijjj=(c,t,e,n,o,u,M,ll,Zl)=>(r.dynCall_viijjj=FZ.mb)(c,t,e,n,o,u,M,ll,Zl),r.dynCall_iij=(c,t,e,n)=>(UZ=r.dynCall_iij=FZ.nb)(c,t,e,n));r.dynCall_iijjiiii=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_iijjiiii=FZ.ob)(c,t,e,n,o,u,M,ll,Zl,cl),r.dynCall_jiji=(c,t,e,n,o)=>(r.dynCall_jiji=FZ.pb)(c,t,e,n,o),r.dynCall_viijii=(c,t,e,n,o,u,M)=>(r.dynCall_viijii=FZ.qb)(c,t,e,n,o,u,M),r.dynCall_iiiiij=(c,t,e,n,o,u,M)=>(r.dynCall_iiiiij=FZ.rb)(c,t,e,n,o,u,M),r.dynCall_iiiiijj=(c,t,e,n,o,u,M,ll,Zl)=>(r.dynCall_iiiiijj=FZ.sb)(c,t,e,n,o,u,M,ll,Zl),r.dynCall_iiiiiijj=(c,t,e,n,o,u,M,ll,Zl,cl)=>(r.dynCall_iiiiiijj=FZ.tb)(c,t,e,n,o,u,M,ll,Zl,cl),r.___start_em_js=262148,r.___stop_em_js=262760;function run(){if(!(Hl>0)){if(el)return e(r),initRuntime(),void startWorker(r);!function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)addOnPreRun(r.preRun.shift());callRuntimeCallbacks(Yl)}(),Hl>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),doRun()}),1)):doRun())}function doRun(){RZ||(RZ=!0,r.calledRun=!0,Rl||(initRuntime(),e(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!el){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)c=r.postRun.shift(),Il.unshift(c);var c;callRuntimeCallbacks(Il)}}()))}}if(r.wasmMemory=nl,r.keepRuntimeAlive=keepRuntimeAlive,r.ExitStatus=ExitStatus,r.PThread=Pl,kl=function runCaller(){RZ||run(),RZ||(kl=runCaller)},r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return run(),t.ready}})();createWasmMultiInstance=Module;var V=Object.defineProperty,Y=(c,t,e)=>t in c?V(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e,a=(c,t,e)=>(Y(c,"symbol"!=typeof t?t+"":t,e),e);class l{}a(l,"updates",{transformer_new:"New transformer",transformer_null:"Null transformer"}),a(l,"errors",{transformer_none:"No transformers provided",transformer_start:"Cannot start transformer",transformer_transform:"Cannot transform frame",transformer_flush:"Cannot flush transformer",readable_null:"Readable is null",writable_null:"Writable is null"});const h=new WeakMap,E=new WeakMap,y=new WeakMap,O=Symbol("anyProducer"),U=Promise.resolve(),k=Symbol("listenerAdded"),A=Symbol("listenerRemoved");let x=!1;function g(c){if("string"!=typeof c&&"symbol"!=typeof c)throw new TypeError("eventName must be a string or a symbol")}function T(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function _(c,t){const e=E.get(c);return e.has(t)||e.set(t,new Set),e.get(t)}function b(c,t){const e="string"==typeof t||"symbol"==typeof t?t:O,n=y.get(c);return n.has(e)||n.set(e,new Set),n.get(e)}function q(c,t,e){const n=y.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(O)){const c=Promise.all([t,e]);for(const t of n.get(O))t.enqueue(c)}}function $(c,t){t=Array.isArray(t)?t:[t];let e=!1,s=()=>{},n=[];const r={enqueue(c){n.push(c),s()},finish(){e=!0,s()}};for(const e of t)b(c,e).add(r);return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{s=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t)b(c,e).delete(r);return s(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function H(c){if(void 0===c)return Q;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!Q.includes(t))throw"string"!=typeof t?new TypeError("`methodNames` element must be a string"):new Error(`${t} is not Emittery method`);return c}const I=c=>c===k||c===A;class m{static mixin(c,t){return t=H(t),e=>{if("function"!=typeof e)throw new TypeError("`target` must be function");for(const c of t)if(void 0!==e.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(e.prototype,c,{enumerable:!1,get:function(){return Object.defineProperty(this,c,{enumerable:!1,value:new m}),this[c]}});const i=t=>function(...e){return this[c][t](...e)};for(const c of t)Object.defineProperty(e.prototype,c,{enumerable:!1,value:i(c)});return e}}static get isDebugEnabled(){if("object"!=typeof process)return x;const{env:c}=process||{env:{}};return"emittery"===c.DEBUG||"*"===c.DEBUG||x}static set isDebugEnabled(c){x=c}constructor(c={}){h.set(this,new Set),E.set(this,new Map),y.set(this,new Map),this.debug=c.debug||{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"==typeof e&&(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(c,t,e){(m.isDebugEnabled||this.debug.enabled)&&this.debug.logger(c,this.debug.name,t,e)}on(c,t){T(t),c=Array.isArray(c)?c:[c];for(const e of c)g(e),_(this,e).add(t),this.logIfDebugEnabled("subscribe",e,void 0),I(e)||this.emit(k,{eventName:e,listener:t});return this.off.bind(this,c,t)}off(c,t){T(t),c=Array.isArray(c)?c:[c];for(const e of c)g(e),_(this,e).delete(t),this.logIfDebugEnabled("unsubscribe",e,void 0),I(e)||this.emit(A,{eventName:e,listener:t})}once(c){return new Promise((t=>{const e=this.on(c,(c=>{e(),t(c)}))}))}events(c){c=Array.isArray(c)?c:[c];for(const t of c)g(t);return $(this,c)}async emit(c,t){g(c),this.logIfDebugEnabled("emit",c,t),q(this,c,t);const e=_(this,c),n=h.get(this),r=[...e],o=I(c)?[]:[...n];await U,await Promise.all([...r.map((async c=>{if(e.has(c))return c(t)})),...o.map((async e=>{if(n.has(e))return e(c,t)}))])}async emitSerial(c,t){g(c),this.logIfDebugEnabled("emitSerial",c,t);const e=_(this,c),n=h.get(this),r=[...e],o=[...n];await U;for(const c of r)e.has(c)&&await c(t);for(const e of o)n.has(e)&&await e(c,t)}onAny(c){return T(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),h.get(this).add(c),this.emit(k,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return $(this)}offAny(c){T(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),this.emit(A,{listener:c}),h.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t){_(this,t).clear();const c=b(this,t);for(const t of c)t.finish();c.clear()}else{h.get(this).clear();for(const c of E.get(this).values())c.clear();for(const c of y.get(this).values()){for(const t of c)t.finish();c.clear()}}}listenerCount(c){c=Array.isArray(c)?c:[c];let t=0;for(const e of c)if("string"!=typeof e){typeof e<"u"&&g(e),t+=h.get(this).size;for(const c of E.get(this).values())t+=c.size;for(const c of y.get(this).values())t+=c.size}else t+=h.get(this).size+_(this,e).size+b(this,e).size+b(this).size;return t}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=H(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}}const Q=Object.getOwnPropertyNames(m.prototype).filter((c=>"constructor"!==c));Object.defineProperty(m,"listenerAdded",{value:k,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(m,"listenerRemoved",{value:A,writable:!1,enumerable:!0,configurable:!1});var L=m;function J(c){return"object"==typeof c&&null!==c&&"message"in c&&"string"==typeof c.message}function X(c){if(J(c))return c;try{return new Error(JSON.stringify(c))}catch{return new Error(String(c))}}function v(c){return X(c).message}var Z=Object.defineProperty,K=(c,t,e)=>t in c?Z(c,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[t]=e,N=(c,t,e)=>(K(c,"symbol"!=typeof t?t+"":t,e),e);const re="hlg.tokbox.com/prod/logging/vcp_webrtc",te="https://",se=1e4;let S;const oe=new Uint8Array(16);function ie(){if(!S&&(S=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!S))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return S(oe)}const f=[];for(let c=0;c<256;++c)f.push((c+256).toString(16).slice(1));function ne(c,t=0){return(f[c[t+0]]+f[c[t+1]]+f[c[t+2]]+f[c[t+3]]+"-"+f[c[t+4]]+f[c[t+5]]+"-"+f[c[t+6]]+f[c[t+7]]+"-"+f[c[t+8]]+f[c[t+9]]+"-"+f[c[t+10]]+f[c[t+11]]+f[c[t+12]]+f[c[t+13]]+f[c[t+14]]+f[c[t+15]]).toLowerCase()}const ae=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),z={randomUUID:ae};function ce(c,t,e){if(z.randomUUID&&!t&&!c)return z.randomUUID();const n=(c=c||{}).random||(c.rng||ie)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){e=e||0;for(let c=0;c<16;++c)t[e+c]=n[c];return t}return ne(n)}function W(c,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let e=globalThis.vonage.workerizer;return e[c]||(e[c]=t),e[c]}const p=W("globals",{});var d=(c=>(c.INIT="INIT",c.FORWARD="FORWARD",c.TERMINATE="TERMINATE",c.GLOBALS_SYNC="GLOBALS_SYNC",c))(d||{});function j(c){return[ImageBitmap,ReadableStream,WritableStream].some((t=>c instanceof t))}let fe=0;function le(c,t,e,n,r){const o=fe++;return c.postMessage({id:o,type:t,functionName:e,args:n},n.filter((c=>j(c)))),new Promise((c=>{null==r||r.set(o,c)}))}function w(c,t){const{id:e,type:n}=c,r=Array.isArray(t)?t:[t];postMessage({id:e,type:n,result:t},r.filter((c=>j(c))))}const G=W("workerized",{});function B(){return typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope}async function ue(){if(B())w({type:d.GLOBALS_SYNC},p);else{const c=[];for(const t in G){const{worker:e,resolvers:n}=G[t].workerContext;e&&c.push(le(e,d.GLOBALS_SYNC,"",[p],n))}await Promise.all(c)}}function P(c,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const c in t)delete t[c];for(const e in c)Array.isArray(c[e])?(t[e]=[],P(c[e],t[e])):"object"==typeof c[e]?(t[e]={},P(c[e],t[e])):t[e]=c[e]}async function he(c,t){const{functionName:e,args:n}=c;if(!t.instance)throw"instance not initialized";if(!e)throw"missing function name to call";if(!t.instance[e])throw`undefined function [${e}] in class ${t.instance.constructor.workerId}`;w(c,await t.instance[e](...null!=n?n:[]))}const pe=W("registeredWorkers",{});function de(c,t){if(!c.args)throw"Missing className while initializing worker";const[e,n]=c.args,r=pe[e];if(!r)throw`unknown worker class ${e}`;t.instance=new r(c.args.slice(1)),P(n,p),w(c,void 0!==typeof t.instance)}async function me(c,t){const{args:e}=c;if(!t.instance)throw"instance not initialized";let n;t.instance.terminate&&(n=await t.instance.terminate(...null!=e?e:[])),w(c,n)}function ge(c){if(!c.args)throw"Missing globals while syncing";P(c.args[0],p),w(c,{})}function _e(){const c={};onmessage=async t=>{const e=t.data;switch(e.type){case d.INIT:de(e,c);break;case d.FORWARD:he(e,c);break;case d.TERMINATE:me(e,c);break;case d.GLOBALS_SYNC:ge(e)}}}function ye(c,t){return p[c]||(p[c]=t),[()=>p[c],async t=>{p[c]=t,await ue()}]}function be(c,t){return ye(c,t)}B()&&_e();const[we,Te]=be("metadata");function C(){return we()}class D{constructor(c){N(this,"uuid",ce()),this.config=c}async send(c){var t,e,n;const{appId:r,sourceType:o}=null!=(t=C())?t:{};if(!r||!o)return"metadata missing";const u=new AbortController,M=setTimeout((()=>u.abort()),se);return await(null!=(n=null==(e=this.config)?void 0:e.fetch)?n:fetch)(this.getUrl(),{method:"POST",headers:this.getHeaders(),body:JSON.stringify(this.buildReport(c)),signal:u.signal}),clearTimeout(M),"success"}getUrl(){var c;let t=null!=(c=C().proxyUrl)?c:te;return t+=("/"===t.at(-1)?"":"/")+re,t}getHeaders(){return{"Content-Type":"application/json"}}buildReport(c){const t=C();return{guid:this.uuid,...c,applicationId:t.appId,timestamp:Date.now(),proxyUrl:t.proxyUrl,source:t.sourceType}}}const R="2.0.3";class Se{constructor(c){a(this,"frameTransformedCount",0),a(this,"frameFromSourceCount",0),a(this,"startAt",0),a(this,"reporter"),this.config=c,this.reporter=new D(c)}async onFrameFromSource(){this.frameFromSourceCount++}get fps(){const{startAt:c,frameFromSourceCount:t}=this;return t/((Date.now()-c)/1e3)}async onFrameTransformed(c={},t=!1){0===this.startAt&&(this.startAt=Date.now()),this.frameTransformedCount++;const{startAt:e,frameTransformedCount:n,frameFromSourceCount:r}=this,o=Date.now(),u=(o-e)/1e3,M=n/u,ll=r/u;return t||this.frameTransformedCount>=this.config.loggingIntervalFrameCount?(this.frameFromSourceCount=0,this.frameTransformedCount=0,this.startAt=o,this.reporter.config=this.config,this.reporter.send({...this.config.report,variation:"QoS",fps:ll,transformedFps:M,framesTransformed:n,...c})):"success"}}var F=(c=>(c.pipeline_ended="pipeline_ended",c.pipeline_ended_with_error="pipeline_ended_with_error",c.pipeline_started="pipeline_started",c.pipeline_started_with_error="pipeline_started_with_error",c.pipeline_restarted="pipeline_restarted",c.pipeline_restarted_with_error="pipeline_restarted_with_error",c))(F||{});const ke=500,Ae=.8;class Pe extends L{constructor(c,t){super(),a(this,"reporter_",new D),a(this,"reporterQos_",new Se({loggingIntervalFrameCount:ke,report:{version:R}})),a(this,"transformerType_"),a(this,"transformer_"),a(this,"shouldStop_"),a(this,"isFlashed_"),a(this,"mediaTransformerQosReportStartTimestamp_"),a(this,"videoHeight_"),a(this,"videoWidth_"),a(this,"trackExpectedRate_"),a(this,"index_"),a(this,"controller_"),this.index_=t,this.transformer_=c,this.shouldStop_=!1,this.isFlashed_=!1,this.mediaTransformerQosReportStartTimestamp_=0,this.videoHeight_=0,this.videoWidth_=0,this.trackExpectedRate_=-1,this.transformerType_="Custom","getTransformerType"in c&&(this.transformerType_=c.getTransformerType()),this.report({variation:"Create"})}setTrackExpectedRate(c){this.trackExpectedRate_=c}async start(c){if(this.controller_=c,this.transformer_&&"function"==typeof this.transformer_.start)try{await this.transformer_.start(c)}catch(c){this.report({message:l.errors.transformer_start,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"start"};this.emit("error",t)}}async transform(c,t){var e,n,r,o;if(0===this.mediaTransformerQosReportStartTimestamp_&&(this.mediaTransformerQosReportStartTimestamp_=Date.now()),c instanceof VideoFrame&&(this.videoHeight_=null!=(e=null==c?void 0:c.displayHeight)?e:0,this.videoWidth_=null!=(n=null==c?void 0:c.displayWidth)?n:0),this.reporterQos_.onFrameFromSource(),this.transformer_)if(this.shouldStop_)console.warn("[Pipeline] flush from transform"),c.close(),this.flush(t),t.terminate();else{try{await(null==(o=(r=this.transformer_).transform)?void 0:o.call(r,c,t)),this.reportQos()}catch(c){this.report({message:l.errors.transformer_transform,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"transform"};this.emit("error",t)}if(-1!=this.trackExpectedRate_&&this.trackExpectedRate_*Ae>this.reporterQos_.fps){const c={eventMetaData:{transformerIndex:this.index_},warningType:"fps_drop",dropInfo:{requested:this.trackExpectedRate_,current:this.reporterQos_.fps}};this.emit("warn",c)}}}async flush(c){if(this.transformer_&&"function"==typeof this.transformer_.flush&&!this.isFlashed_){this.isFlashed_=!0;try{await this.transformer_.flush(c)}catch(c){this.report({message:l.errors.transformer_flush,variation:"Error",error:v(c)});const t={eventMetaData:{transformerIndex:this.index_},error:c,function:"flush"};this.emit("error",t)}}this.reportQos(!0),this.report({variation:"Delete"})}stop(){console.log("[Pipeline] Stop stream."),this.controller_&&(this.flush(this.controller_),this.controller_.terminate()),this.shouldStop_=!0}report(c){this.reporter_.send({version:R,action:"MediaTransformer",transformerType:this.transformerType_,...c})}reportQos(c=!1){this.reporterQos_.config={...this.reporterQos_.config},this.reporterQos_.onFrameTransformed({version:R,action:"MediaTransformer",transformerType:this.transformerType_,videoWidth:this.videoWidth_,videoHeight:this.videoHeight_},c)}}class Me extends L{constructor(c){super(),a(this,"transformers_"),a(this,"trackExpectedRate_"),this.transformers_=[],this.trackExpectedRate_=-1;for(let t=0;t<c.length;t++){let e=new Pe(c[t],t);e.on("error",(c=>{this.emit("error",c)})),e.on("warn",(c=>{this.emit("warn",c)})),this.transformers_.push(e)}}setTrackExpectedRate(c){this.trackExpectedRate_=c;for(let c of this.transformers_)c.setTrackExpectedRate(this.trackExpectedRate_)}async start(c,t){if(this.transformers_&&0!==this.transformers_.length){try{let e=c;for(let t of this.transformers_)c=c.pipeThrough(new TransformStream(t));c.pipeTo(t).then((async()=>{console.log("[Pipeline] Setup."),await t.abort(),await e.cancel(),this.emit("pipelineInfo","pipeline_ended")})).catch((async n=>{c.cancel().then((()=>{console.log("[Pipeline] Shutting down streams after abort.")})).catch((c=>{console.error("[Pipeline] Error from stream transform:",c)})),await t.abort(n),await e.cancel(n),this.emit("pipelineInfo","pipeline_ended_with_error")}))}catch{return this.emit("pipelineInfo","pipeline_started_with_error"),void this.destroy()}this.emit("pipelineInfo","pipeline_started"),console.log("[Pipeline] Pipeline started.")}else console.log("[Pipeline] No transformers.")}async destroy(){console.log("[Pipeline] Destroying Pipeline.");for(let c of this.transformers_)c.stop()}}class Oe extends L{constructor(){super(),a(this,"reporter_"),a(this,"pipeline_"),a(this,"transformers_"),a(this,"readable_"),a(this,"writable_"),a(this,"trackExpectedRate_"),this.reporter_=new D,this.trackExpectedRate_=-1,this.report({variation:"Create"})}setTrackExpectedRate(c){this.trackExpectedRate_=c,this.pipeline_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_)}transform(c,t){return this.readable_=c,this.writable_=t,this.transformInternal()}transformInternal(){return new Promise((async(c,t)=>{if(!this.transformers_||0===this.transformers_.length)return this.report({message:l.errors.transformer_none,variation:"Error"}),void t("[MediaProcessor] Need to set transformers.");if(!this.readable_)return this.report({variation:"Error",message:l.errors.readable_null}),void t("[MediaProcessor] Readable is null.");if(!this.writable_)return this.report({variation:"Error",message:l.errors.writable_null}),void t("[MediaProcessor] Writable is null.");let e=!1;this.pipeline_&&(e=!0,this.pipeline_.clearListeners(),this.pipeline_.destroy()),this.pipeline_=new Me(this.transformers_),this.pipeline_.on("warn",(c=>{this.emit("warn",c)})),this.pipeline_.on("error",(c=>{this.emit("error",c)})),this.pipeline_.on("pipelineInfo",(c=>{e&&("pipeline_started"===c?c=F.pipeline_restarted:"pipeline_started_with_error"===c&&(c=F.pipeline_restarted_with_error)),this.emit("pipelineInfo",c)})),-1!=this.trackExpectedRate_&&this.pipeline_.setTrackExpectedRate(this.trackExpectedRate_),this.pipeline_.start(this.readable_,this.writable_).then((()=>{c()})).catch((c=>{t(c)}))}))}setTransformers(c){return this.report({variation:"Update",message:l.updates.transformer_new}),this.transformers_=c,this.readable_&&this.writable_?this.transformInternal():Promise.resolve()}destroy(){return new Promise((async c=>{this.pipeline_&&this.pipeline_.destroy(),this.report({variation:"Delete"}),c()}))}report(c){this.reporter_.send({version:R,action:"MediaProcessor",...c})}}class xe{constructor(){a(this,"processor_"),a(this,"generator_"),this.processor_=null,this.generator_=null}init(c){return new Promise(((t,e)=>{try{this.processor_=new MediaStreamTrackProcessor(c)}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackProcessor failed: ${c}`),e(c)}try{"audio"===c.kind?this.generator_=new MediaStreamTrackGenerator({kind:"audio"}):"video"===c.kind?this.generator_=new MediaStreamTrackGenerator({kind:"video"}):e("kind not supported")}catch(c){console.log(`[InsertableStreamHelper] MediaStreamTrackGenerator failed: ${c}`),e(c)}t()}))}getReadable(){return this.processor_.readable}getWriteable(){return this.generator_.writable}getProccesorTrack(){return this.generator_}}class Fe{constructor(c){a(this,"insertableStreamHelper_"),a(this,"mediaProcessor_"),this.insertableStreamHelper_=new xe,this.mediaProcessor_=c}setTrack(c){return new Promise(((t,e)=>{this.insertableStreamHelper_.init(c).then((()=>{this.mediaProcessor_.transform(this.insertableStreamHelper_.getReadable(),this.insertableStreamHelper_.getWriteable()).then((()=>{t(this.insertableStreamHelper_.getProccesorTrack())})).catch((c=>{e(c)}))})).catch((c=>{e(c)}))}))}destroy(){return new Promise(((c,t)=>{this.mediaProcessor_?this.mediaProcessor_.destroy().then((()=>{c()})).catch((c=>{t(c)})):t("no processor")}))}}const anyMap$1=new WeakMap,eventsMap$1=new WeakMap,producersMap$1=new WeakMap,anyProducer$1=Symbol("anyProducer"),resolvedPromise$1=Promise.resolve(),listenerAdded$1=Symbol("listenerAdded"),listenerRemoved$1=Symbol("listenerRemoved");let canEmitMetaEvents$1=!1,isGlobalDebugEnabled$1=!1;function assertEventName$1(c){if("string"!=typeof c&&"symbol"!=typeof c&&"number"!=typeof c)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener$1(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function getListeners$1(c,t){const e=eventsMap$1.get(c);if(e.has(t))return e.get(t)}function getEventProducers$1(c,t){const e="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:anyProducer$1,n=producersMap$1.get(c);if(n.has(e))return n.get(e)}function enqueueProducers$1(c,t,e){const n=producersMap$1.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(anyProducer$1)){const c=Promise.all([t,e]);for(const t of n.get(anyProducer$1))t.enqueue(c)}}function iterator$1(c,t){t=Array.isArray(t)?t:[t];let e=!1,flush=()=>{},n=[];const r={enqueue(c){n.push(c),flush()},finish(){e=!0,flush()}};for(const e of t){let t=getEventProducers$1(c,e);if(!t){t=new Set;producersMap$1.get(c).set(e,t)}t.add(r)}return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{flush=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t){const t=getEventProducers$1(c,e);if(t&&(t.delete(r),0===t.size)){producersMap$1.get(c).delete(e)}}return flush(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert$1(c){if(void 0===c)return allEmitteryMethods$1;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!allEmitteryMethods$1.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return c}const isMetaEvent$1=c=>c===listenerAdded$1||c===listenerRemoved$1;function emitMetaEvent$1(c,t,e){if(isMetaEvent$1(t))try{canEmitMetaEvents$1=!0,c.emit(t,e)}finally{canEmitMetaEvents$1=!1}}let Emittery$1=class c{static mixin(t,e){return e=defaultMethodNamesOrAssert$1(e),n=>{if("function"!=typeof n)throw new TypeError("`target` must be function");for(const c of e)if(void 0!==n.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(n.prototype,t,{enumerable:!1,get:function(){return Object.defineProperty(this,t,{enumerable:!1,value:new c}),this[t]}});const emitteryMethodCaller=c=>function(...e){return this[t][c](...e)};for(const c of e)Object.defineProperty(n.prototype,c,{enumerable:!1,value:emitteryMethodCaller(c)});return n}}static get isDebugEnabled(){if("object"!=typeof globalThis.process?.env)return isGlobalDebugEnabled$1;const{env:c}=globalThis.process??{env:{}};return"emittery"===c.DEBUG||"*"===c.DEBUG||isGlobalDebugEnabled$1}static set isDebugEnabled(c){isGlobalDebugEnabled$1=c}constructor(c={}){anyMap$1.set(this,new Set),eventsMap$1.set(this,new Map),producersMap$1.set(this,new Map),producersMap$1.get(this).set(anyProducer$1,new Set),this.debug=c.debug??{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"!=typeof e&&"number"!=typeof e||(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(t,e,n){(c.isDebugEnabled||this.debug.enabled)&&this.debug.logger(t,this.debug.name,e,n)}on(c,t){assertListener$1(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName$1(e);let c=getListeners$1(this,e);if(!c){c=new Set;eventsMap$1.get(this).set(e,c)}c.add(t),this.logIfDebugEnabled("subscribe",e,void 0),isMetaEvent$1(e)||emitMetaEvent$1(this,listenerAdded$1,{eventName:e,listener:t})}return this.off.bind(this,c,t)}off(c,t){assertListener$1(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName$1(e);const c=getListeners$1(this,e);if(c&&(c.delete(t),0===c.size)){eventsMap$1.get(this).delete(e)}this.logIfDebugEnabled("unsubscribe",e,void 0),isMetaEvent$1(e)||emitMetaEvent$1(this,listenerRemoved$1,{eventName:e,listener:t})}}once(c){let t;const e=new Promise((e=>{t=this.on(c,(c=>{t(),e(c)}))}));return e.off=t,e}events(c){c=Array.isArray(c)?c:[c];for(const t of c)assertEventName$1(t);return iterator$1(this,c)}async emit(c,t){if(assertEventName$1(c),isMetaEvent$1(c)&&!canEmitMetaEvents$1)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",c,t),enqueueProducers$1(this,c,t);const e=getListeners$1(this,c)??new Set,n=anyMap$1.get(this),r=[...e],o=isMetaEvent$1(c)?[]:[...n];await resolvedPromise$1,await Promise.all([...r.map((async c=>{if(e.has(c))return c(t)})),...o.map((async e=>{if(n.has(e))return e(c,t)}))])}async emitSerial(c,t){if(assertEventName$1(c),isMetaEvent$1(c)&&!canEmitMetaEvents$1)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",c,t);const e=getListeners$1(this,c)??new Set,n=anyMap$1.get(this),r=[...e],o=[...n];await resolvedPromise$1;for(const c of r)e.has(c)&&await c(t);for(const e of o)n.has(e)&&await e(c,t)}onAny(c){return assertListener$1(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),anyMap$1.get(this).add(c),emitMetaEvent$1(this,listenerAdded$1,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return iterator$1(this)}offAny(c){assertListener$1(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent$1(this,listenerRemoved$1,{listener:c}),anyMap$1.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const c=getListeners$1(this,t);c&&c.clear();const e=getEventProducers$1(this,t);if(e){for(const c of e)c.finish();e.clear()}}else{anyMap$1.get(this).clear();for(const[c,t]of eventsMap$1.get(this).entries())t.clear(),eventsMap$1.get(this).delete(c);for(const[c,t]of producersMap$1.get(this).entries()){for(const c of t)c.finish();t.clear(),producersMap$1.get(this).delete(c)}}}listenerCount(c){c=Array.isArray(c)?c:[c];let t=0;for(const e of c)if("string"!=typeof e){void 0!==e&&assertEventName$1(e),t+=anyMap$1.get(this).size;for(const c of eventsMap$1.get(this).values())t+=c.size;for(const c of producersMap$1.get(this).values())t+=c.size}else t+=anyMap$1.get(this).size+(getListeners$1(this,e)?.size??0)+(getEventProducers$1(this,e)?.size??0)+(getEventProducers$1(this)?.size??0);return t}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert$1(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}};const allEmitteryMethods$1=Object.getOwnPropertyNames(Emittery$1.prototype).filter((c=>"constructor"!==c));Object.defineProperty(Emittery$1,"listenerAdded",{value:listenerAdded$1,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Emittery$1,"listenerRemoved",{value:listenerRemoved$1,writable:!1,enumerable:!0,configurable:!1});const version="1.0.0-beta.9";class Average{constructor(c){this.size=c,this.values=[],this.sum=0}push(c){for(this.values.push(c),this.sum+=c;this.size<this.values.length;)this.sum-=this.values.shift()??0}value(){return this.sum/Math.max(1,this.values.length)}}const defaultAssetsDirBaseUrl$1=`https://d3opqjmqzxf057.cloudfront.net/noise-suppression/${version}`;class NoiseSuppressionTransformer extends Emittery$1{constructor(){super(),this.isEnabled=!0,this.internalResampleSupported=!1,this.latency=new Average(100),this.transform=this.transformAudioData.bind(this)}async init(c={}){console.log("Noise suppression transformer initialization"),this.transform=c.debug?this.transformDebug.bind(this):this.transformAudioData.bind(this);const t=c.assetsDirBaseUrl??defaultAssetsDirBaseUrl$1,locateFile=c=>`${t}/${c}`;let e,n=1;await this.isMonoThread(c)?this.wasmInstance=await createWasmMonoInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-mono.js")}):(this.wasmInstance=await createWasmMultiInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-multi.js")}),n=4),this.wasmTransformer=new this.wasmInstance.DtlnTransformer,await Promise.all([this.loadModel(`${t}/model_1.tflite`,1),this.loadModel(`${t}/model_2.tflite`,2)]);try{e=await(this.wasmTransformer?.init(n))}catch(c){if("number"==typeof c){let t="";for(let e=0;e<500;++e)t+=String.fromCharCode(this.wasmInstance.HEAP8[c+e]);console.error(t)}else console.error(c)}if(0!==e){const c=`Fail to init wasm transformer, error code = ${e}`;throw console.error(c),c}if(this.internalResampleSupported=this.wasmTransformer?.getInternalResampleSupported(),!this.internalResampleSupported){const c="Internal resampling not supported";throw console.error(c),c}c.debug&&this.wasmTransformer?.enableWavExport(),console.log("Noise suppression transformer ready")}getWav(){if(!this.wasmTransformer)return"";this.wasmTransformer.closeWav();const c=this.wasmTransformer.getWav();return`data:audio/wav;base64,${btoa(new Uint8Array(c).reduce(((c,t)=>c+String.fromCharCode(t)),""))}`}setAudioOptions(c,t,e,n,r){this.wasmTransformer?.setAudioOptions(c,t,e,n,r)}enable(){this.isEnabled=!0}disable(){this.isEnabled=!1}getLatency(){return this.latency.value()}getWasmLatencyNs(){return this.wasmTransformer?.getLatencyNs()??0}async transformDebug(c,t){try{const e=performance.now();await this.transformAudioData(c,t),this.latency.push(performance.now()-e)}catch(c){console.error(c)}}async transformAudioData(c,t){if(this.wasmTransformer||this.emit("warning","transformer not initialized"),this.isEnabled&&this.wasmTransformer)try{const{numberOfFrames:t,sampleRate:e,numberOfChannels:n,timestamp:r}=c,o=this.getAudioDataAsFloat32(c),u=this.convertTypedArray(o,Int16Array,32767);this.wasmTransformer.getInputFrame(u.length).set(u);let M=0;try{M=this.wasmTransformer.runAlgorithm(t,e,n)}catch(c){if("number"==typeof c){let t="";for(let e=0;e<500;++e)t+=String.fromCharCode(this.wasmInstance.HEAP8[c+e]);console.error(t)}else console.error(c)}if(M>0){const o=this.wasmTransformer.getOutputFrame().slice(0,M),u=this.convertTypedArray(o,Float32Array,1/32767);c=new AudioData({data:u,format:"f32",numberOfChannels:n,numberOfFrames:t,sampleRate:e,timestamp:r})}}catch(c){console.error(c)}t.enqueue(c)}async loadModel(c,t){if(!this.wasmTransformer)return;const e=await fetch(c),n=await e.arrayBuffer(),r=n.byteLength,o=`getModel${t}`,u=this.wasmTransformer[o](r);if(u){const c=new Uint8Array(n);u.set(c)}}getAudioDataAsFloat32(c){return this.audioDataToTypedArray(c,Float32Array,"f32-planar")}audioDataToTypedArray(c,t,e,n=c.numberOfChannels){const r=c.numberOfFrames*n,o=new t(r);for(let t=0;t<n;++t){const n=c.numberOfFrames*t,r=o.subarray(n,n+c.numberOfFrames);c.copyTo(r,{planeIndex:t,format:e})}if(n>1){const e=new t(r);for(let t=0;t<c.numberOfFrames;++t){const r=2*t;for(let u=0;u<n;++u)e[r+u]=o[t+u*c.numberOfFrames]}return e}return o}convertTypedArray(c,t,e){const n=c.length,r=new t(n);for(let t=0;t<n;++t)r[t]=c[t]*e;return r}isMonoThread(c){if(c.disableWasmMultiThread)return!0;try{if(void 0===new SharedArrayBuffer(1024))throw new Error("not supported")}catch(c){return this.emit("warning","\nMultithread is not available, noise-suppresion is now running on a single thread.\nThis is impacting the performance and increase the latency.\n\nTo enable multithread, you need to serve the application via https with these http headers :\n   - Cross-Origin-Opener-Policy: same-origin\n   - Cross-Origin-Embedder-Policy: require-corp.\nMore info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements\n\nYou can disable this warning by enabling disableWasmMultiThread within the noiseSuppression options.\n"),!0}return!1}}function createGlobalThisVariable(c,t){globalThis.vonage||(globalThis.vonage={}),globalThis.vonage.workerizer||(globalThis.vonage.workerizer={});let e=globalThis.vonage.workerizer;return e[c]||(e[c]=t),e[c]}const globals=createGlobalThisVariable("globals",{});var CommandType=(c=>(c.INIT="INIT",c.FORWARD="FORWARD",c.TERMINATE="TERMINATE",c.GLOBALS_SYNC="GLOBALS_SYNC",c.EVENT="EVENT",c))(CommandType||{});function isTransferable(c){return[ImageBitmap,ReadableStream,WritableStream].some((t=>c instanceof t))}let nextCommandId=0;function postCommand$1(c,t,e,n,r){const o=nextCommandId++;c.postMessage({id:o,type:t,functionName:e,args:n},n.filter((c=>isTransferable(c))));return new Promise((c=>{null==r||r.set(o,c)}))}function postCommand(c,t){const{id:e,type:n}=c,r=Array.isArray(t)?t:[t];postMessage({id:e,type:n,result:t},r.filter((c=>isTransferable(c))))}const workerized=createGlobalThisVariable("workerized",{});function isWorker(){return"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope}async function globalsSync(){if(isWorker())postCommand({type:CommandType.GLOBALS_SYNC},globals);else{const c=[];for(const t in workerized){const{worker:e,resolvers:n}=workerized[t].workerContext;e&&c.push(postCommand$1(e,CommandType.GLOBALS_SYNC,"",[globals],n))}await Promise.all(c)}}function copy(c,t){if(Array.isArray(t))t.splice(0,t.length);else if("object"==typeof t)for(const c in t)delete t[c];for(const e in c)Array.isArray(c[e])?(t[e]=[],copy(c[e],t[e])):"object"==typeof c[e]?(t[e]={},copy(c[e],t[e])):t[e]=c[e]}async function createWorker(c,t,e,n){const r=new t;r.addEventListener("message",(async({data:c})=>{var t,r,o,u,M,ll,Zl;switch(c.type){case CommandType.GLOBALS_SYNC:c.id?(null==(r=e.get(null!=(t=c.id)?t:-1))||r(c.result),e.delete(null!=(o=c.id)?o:-1)):(copy(null!=(u=c.result)?u:{},globals),await globalsSync());break;case CommandType.EVENT:const{result:cl}=c,dl=cl;if(null==(null==dl?void 0:dl.name))throw"Missing event name";n(dl.name,dl.data);break;default:null==(ll=e.get(null!=(M=c.id)?M:-1))||ll(c.result),e.delete(null!=(Zl=c.id)?Zl:-1)}}));if(!await postCommand$1(r,CommandType.INIT,"",[c.workerId,globals],e))throw"Failed to instantiate workerized class";return r}const anyMap=new WeakMap,eventsMap=new WeakMap,producersMap=new WeakMap,anyProducer=Symbol("anyProducer"),resolvedPromise=Promise.resolve(),listenerAdded=Symbol("listenerAdded"),listenerRemoved=Symbol("listenerRemoved");let canEmitMetaEvents=!1,isGlobalDebugEnabled=!1;function assertEventName(c){if("string"!=typeof c&&"symbol"!=typeof c&&"number"!=typeof c)throw new TypeError("`eventName` must be a string, symbol, or number")}function assertListener(c){if("function"!=typeof c)throw new TypeError("listener must be a function")}function getListeners(c,t){const e=eventsMap.get(c);if(e.has(t))return e.get(t)}function getEventProducers(c,t){const e="string"==typeof t||"symbol"==typeof t||"number"==typeof t?t:anyProducer,n=producersMap.get(c);if(n.has(e))return n.get(e)}function enqueueProducers(c,t,e){const n=producersMap.get(c);if(n.has(t))for(const c of n.get(t))c.enqueue(e);if(n.has(anyProducer)){const c=Promise.all([t,e]);for(const t of n.get(anyProducer))t.enqueue(c)}}function iterator(c,t){t=Array.isArray(t)?t:[t];let e=!1,flush=()=>{},n=[];const r={enqueue(c){n.push(c),flush()},finish(){e=!0,flush()}};for(const e of t){let t=getEventProducers(c,e);if(!t){t=new Set;producersMap.get(c).set(e,t)}t.add(r)}return{async next(){return n?0===n.length?e?(n=void 0,this.next()):(await new Promise((c=>{flush=c})),this.next()):{done:!1,value:await n.shift()}:{done:!0}},async return(e){n=void 0;for(const e of t){const t=getEventProducers(c,e);if(t&&(t.delete(r),0===t.size)){producersMap.get(c).delete(e)}}return flush(),arguments.length>0?{done:!0,value:await e}:{done:!0}},[Symbol.asyncIterator](){return this}}}function defaultMethodNamesOrAssert(c){if(void 0===c)return allEmitteryMethods;if(!Array.isArray(c))throw new TypeError("`methodNames` must be an array of strings");for(const t of c)if(!allEmitteryMethods.includes(t)){if("string"!=typeof t)throw new TypeError("`methodNames` element must be a string");throw new Error(`${t} is not Emittery method`)}return c}const isMetaEvent=c=>c===listenerAdded||c===listenerRemoved;function emitMetaEvent(c,t,e){if(isMetaEvent(t))try{canEmitMetaEvents=!0,c.emit(t,e)}finally{canEmitMetaEvents=!1}}class Emittery2{static mixin(c,t){return t=defaultMethodNamesOrAssert(t),e=>{if("function"!=typeof e)throw new TypeError("`target` must be function");for(const c of t)if(void 0!==e.prototype[c])throw new Error(`The property \`${c}\` already exists on \`target\``);Object.defineProperty(e.prototype,c,{enumerable:!1,get:function(){return Object.defineProperty(this,c,{enumerable:!1,value:new Emittery2}),this[c]}});const emitteryMethodCaller=t=>function(...e){return this[c][t](...e)};for(const c of t)Object.defineProperty(e.prototype,c,{enumerable:!1,value:emitteryMethodCaller(c)});return e}}static get isDebugEnabled(){var c,t;if("object"!=typeof(null==(c=globalThis.process)?void 0:c.env))return isGlobalDebugEnabled;const{env:e}=null!=(t=globalThis.process)?t:{env:{}};return"emittery"===e.DEBUG||"*"===e.DEBUG||isGlobalDebugEnabled}static set isDebugEnabled(c){isGlobalDebugEnabled=c}constructor(c={}){var t;anyMap.set(this,new Set),eventsMap.set(this,new Map),producersMap.set(this,new Map),producersMap.get(this).set(anyProducer,new Set),this.debug=null!=(t=c.debug)?t:{},void 0===this.debug.enabled&&(this.debug.enabled=!1),this.debug.logger||(this.debug.logger=(c,t,e,n)=>{try{n=JSON.stringify(n)}catch{n=`Object with the following keys failed to stringify: ${Object.keys(n).join(",")}`}"symbol"!=typeof e&&"number"!=typeof e||(e=e.toString());const r=new Date,o=`${r.getHours()}:${r.getMinutes()}:${r.getSeconds()}.${r.getMilliseconds()}`;console.log(`[${o}][emittery:${c}][${t}] Event Name: ${e}\n\tdata: ${n}`)})}logIfDebugEnabled(c,t,e){(Emittery2.isDebugEnabled||this.debug.enabled)&&this.debug.logger(c,this.debug.name,t,e)}on(c,t){assertListener(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName(e);let c=getListeners(this,e);if(!c){c=new Set;eventsMap.get(this).set(e,c)}c.add(t),this.logIfDebugEnabled("subscribe",e,void 0),isMetaEvent(e)||emitMetaEvent(this,listenerAdded,{eventName:e,listener:t})}return this.off.bind(this,c,t)}off(c,t){assertListener(t),c=Array.isArray(c)?c:[c];for(const e of c){assertEventName(e);const c=getListeners(this,e);if(c&&(c.delete(t),0===c.size)){eventsMap.get(this).delete(e)}this.logIfDebugEnabled("unsubscribe",e,void 0),isMetaEvent(e)||emitMetaEvent(this,listenerRemoved,{eventName:e,listener:t})}}once(c){let t;const e=new Promise((e=>{t=this.on(c,(c=>{t(),e(c)}))}));return e.off=t,e}events(c){c=Array.isArray(c)?c:[c];for(const t of c)assertEventName(t);return iterator(this,c)}async emit(c,t){var e;if(assertEventName(c),isMetaEvent(c)&&!canEmitMetaEvents)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emit",c,t),enqueueProducers(this,c,t);const n=null!=(e=getListeners(this,c))?e:new Set,r=anyMap.get(this),o=[...n],u=isMetaEvent(c)?[]:[...r];await resolvedPromise,await Promise.all([...o.map((async c=>{if(n.has(c))return c(t)})),...u.map((async e=>{if(r.has(e))return e(c,t)}))])}async emitSerial(c,t){var e;if(assertEventName(c),isMetaEvent(c)&&!canEmitMetaEvents)throw new TypeError("`eventName` cannot be meta event `listenerAdded` or `listenerRemoved`");this.logIfDebugEnabled("emitSerial",c,t);const n=null!=(e=getListeners(this,c))?e:new Set,r=anyMap.get(this),o=[...n],u=[...r];await resolvedPromise;for(const c of o)n.has(c)&&await c(t);for(const e of u)r.has(e)&&await e(c,t)}onAny(c){return assertListener(c),this.logIfDebugEnabled("subscribeAny",void 0,void 0),anyMap.get(this).add(c),emitMetaEvent(this,listenerAdded,{listener:c}),this.offAny.bind(this,c)}anyEvent(){return iterator(this)}offAny(c){assertListener(c),this.logIfDebugEnabled("unsubscribeAny",void 0,void 0),emitMetaEvent(this,listenerRemoved,{listener:c}),anyMap.get(this).delete(c)}clearListeners(c){c=Array.isArray(c)?c:[c];for(const t of c)if(this.logIfDebugEnabled("clear",t,void 0),"string"==typeof t||"symbol"==typeof t||"number"==typeof t){const c=getListeners(this,t);c&&c.clear();const e=getEventProducers(this,t);if(e){for(const c of e)c.finish();e.clear()}}else{anyMap.get(this).clear();for(const[c,t]of eventsMap.get(this).entries())t.clear(),eventsMap.get(this).delete(c);for(const[c,t]of producersMap.get(this).entries()){for(const c of t)c.finish();t.clear(),producersMap.get(this).delete(c)}}}listenerCount(c){var t,e,n,r,o,u;c=Array.isArray(c)?c:[c];let M=0;for(const ll of c)if("string"!=typeof ll){void 0!==ll&&assertEventName(ll),M+=anyMap.get(this).size;for(const c of eventsMap.get(this).values())M+=c.size;for(const c of producersMap.get(this).values())M+=c.size}else M+=anyMap.get(this).size+(null!=(e=null==(t=getListeners(this,ll))?void 0:t.size)?e:0)+(null!=(r=null==(n=getEventProducers(this,ll))?void 0:n.size)?r:0)+(null!=(u=null==(o=getEventProducers(this))?void 0:o.size)?u:0);return M}bindMethods(c,t){if("object"!=typeof c||null===c)throw new TypeError("`target` must be an object");t=defaultMethodNamesOrAssert(t);for(const e of t){if(void 0!==c[e])throw new Error(`The property \`${e}\` already exists on \`target\``);Object.defineProperty(c,e,{enumerable:!1,value:this[e].bind(this)})}}}const allEmitteryMethods=Object.getOwnPropertyNames(Emittery2.prototype).filter((c=>"constructor"!==c));function isInstanceOfEmittery(c){return c.onAny&&c.emit}function isChildClassOfEmittery(c){return c.prototype.onAny&&c.prototype.emit}Object.defineProperty(Emittery2,"listenerAdded",{value:listenerAdded,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(Emittery2,"listenerRemoved",{value:listenerRemoved,writable:!1,enumerable:!0,configurable:!1});let nextId=0;async function createWorkerized(c,t,e){const n=isChildClassOfEmittery(c)?new Emittery2:{},r=nextId++;return Object.getOwnPropertyNames(c.prototype).forEach((c=>{n[c]=(...n)=>postCommand$1(t,CommandType.FORWARD,c,n,e)})),n.terminate=async(...c)=>{const o=await postCommand$1(t,CommandType.TERMINATE,"",c,e);return delete workerized[r],t.terminate(),n.workerContext.worker=void 0,o},n.workerContext={id:r,worker:t,resolvers:e},workerized[r]=n,n}async function workerize(c,t){const e=new Map;let n;const r=await createWorker(c,t,e,((c,t)=>{(null==n?void 0:n.emit)&&(null==n||n.emit(c,t))}));return n=await createWorkerized(c,r,e),n}async function handleCommandForward(c,t){const{functionName:e,args:n}=c;if(!t.instance)throw"instance not initialized";if(!e)throw"missing function name to call";if(!t.instance[e])throw`undefined function [${e}] in class ${t.instance.constructor.workerId}`;postCommand(c,await t.instance[e](...null!=n?n:[]))}const registeredWorkers=createGlobalThisVariable("registeredWorkers",{});function registerWorker(c,t){t.workerId=c,isWorker()&&(registeredWorkers[t.workerId]=t)}function handleCommandInit(c,t){if(!c.args)throw"Missing className while initializing worker";const[e,n]=c.args,r=registeredWorkers[e];if(!r)throw`unknown worker class ${e}`;t.instance=new r(c.args.slice(1)),copy(n,globals),isInstanceOfEmittery(t.instance)&&t.instance.onAny(((c,t)=>{postCommand({type:CommandType.EVENT},{name:c,data:t})})),postCommand(c,void 0!==typeof t.instance)}async function handleCommandTerminate(c,t){const{args:e}=c;if(!t.instance)throw"instance not initialized";let n;t.instance.terminate&&(n=await t.instance.terminate(...null!=e?e:[])),postCommand(c,n)}function handleCommandGlobalsSync(c){if(!c.args)throw"Missing globals while syncing";copy(c.args[0],globals),postCommand(c,{})}function initWorker(){const c={};onmessage=async t=>{const e=t.data;switch(e.type){case CommandType.INIT:handleCommandInit(e,c);break;case CommandType.FORWARD:handleCommandForward(e,c);break;case CommandType.TERMINATE:handleCommandTerminate(e,c);break;case CommandType.GLOBALS_SYNC:handleCommandGlobalsSync(e)}}}isWorker()&&initWorker();const _ProcessorWorker=class extends Emittery$1{constructor(){super(...arguments),this.processor=new Oe}async init(c={}){this.transformer=new NoiseSuppressionTransformer,this.processor.onAny(((c,t)=>this.emit(c,t))),this.transformer.onAny(((c,t)=>this.emit(c,t))),await this.transformer.init(c),await this.processor.setTransformers([this.transformer])}transform(c,t){this.processor.transform(c,t)}setAudioOptions(c,t,e,n,r){this.transformer?.setAudioOptions(c,t,e,n,r)}enable(){this.transformer?.enable()}disable(){this.transformer?.disable()}async terminate(){await this.processor.destroy()}getWav(){return this.transformer?.getWav()??""}getLatency(){return this.transformer?.getLatency()??0}getWasmLatencyNs(){return this.transformer?.getWasmLatencyNs()??0}};registerWorker("ProcessorWorker",_ProcessorWorker);let ProcessorWorker=_ProcessorWorker;const encodedJs="",blob="undefined"!=typeof window&&window.Blob&&new Blob([atob(encodedJs)],{type:"text/javascript;charset=utf-8"});function WorkerWrapper(){let c;try{if(c=blob&&(window.URL||window.webkitURL).createObjectURL(blob),!c)throw"";return new Worker(c)}catch(c){return new Worker("data:application/javascript;base64,"+encodedJs)}finally{c&&(window.URL||window.webkitURL).revokeObjectURL(c)}}class ProcessorMain extends Emittery$1{constructor(){super(...arguments),this.isEnabled=!0}async init(c={}){await this.startWorker(c)}async enable(){this.isEnabled=!0,await(this.worker?.enable())}async disable(){this.isEnabled=!1,await(this.worker?.disable())}async transform(c,t){await this.startWorker(),await(this.worker?.transform(c,t))}async destroy(){await(this.worker?.terminate()),this.worker=void 0}async setAudioOptions(c,t,e,n,r){await(this.worker?.setAudioOptions(c,t,e,n,r))}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}async startWorker(c={}){this.worker||(this.worker=await workerize(ProcessorWorker,WorkerWrapper),this.worker.onAny(((c,t)=>this.emit(c,t))),await this.worker.init(c),this.isEnabled||await this.worker.disable())}async close(){await(this.worker?.terminate())}async getWav(){return await(this.worker?.getWav())??""}}class VonageNoiseSuppression extends Emittery$1{async init(c={}){this.worker=new ProcessorMain,this.worker.onAny(((c,t)=>this.emit(c,t))),await this.worker.init(c),this.connector=new Fe(this.worker)}getConnector(){return this.connector}async close(){await(this.worker?.close())}async enable(){await(this.worker?.enable())}async disable(){await(this.worker?.disable())}async getLatency(){return this.worker?.getLatency()??0}async getWasmLatencyNs(){return this.worker?.getWasmLatencyNs()??0}async getWav(){return await(this.worker?.getWav())??""}}function createVonageNoiseSuppression(){return new VonageNoiseSuppression}const defaultAssetsDirBaseUrl=`https://d3opqjmqzxf057.cloudfront.net/noise-suppression/${version}`;class WavExporterTransformer{async init(c={}){console.log("Wav exporter transformer initialization");const t=c.assetsDirBaseUrl??defaultAssetsDirBaseUrl,locateFile=c=>`${t}/${c}`;this.wasmInstance=await createWasmMonoInstance({locateFile:locateFile,mainScriptUrlOrBlob:locateFile("main-bin-mono.js")}),console.log("Wav exporter transformer ready")}transform(c,t){if(this.wasmTransformer||(this.wasmTransformer=new this.wasmInstance.WavExporter(c.sampleRate,1)),this.wasmTransformer){const t=this.getAudioDataAsInt16(c);this.wasmTransformer.getInputFrame(t.length).set(t),this.wasmTransformer.push(c.numberOfFrames,c.sampleRate,c.numberOfChannels)}t.enqueue(c)}getWav(){if(!this.wasmTransformer)return"";this.wasmTransformer.close();const c=this.wasmTransformer.getWav();return`data:audio/wav;base64,${btoa(new Uint8Array(c).reduce(((c,t)=>c+String.fromCharCode(t)),""))}`}getAudioDataAsInt16(c){const t=this.getAudioDataAsFloat32(c),e=new Int16Array(t.length);for(let c=0;c<t.length;++c)e[c]=Math.round(65535*t[c]);return e}getAudioDataAsFloat32(c){return this.audioDataToTypedArray(c,Float32Array,"f32-planar",1)}audioDataToTypedArray(c,t,e,n=c.numberOfChannels){const r=new t(c.numberOfFrames*n);for(let t=0;t<n;++t){const n=c.numberOfFrames*t,o=r.subarray(n,n+c.numberOfFrames);c.copyTo(o,{planeIndex:t,format:e})}return r}}